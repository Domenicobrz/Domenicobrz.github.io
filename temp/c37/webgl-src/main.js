/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var t={d:(e,n)=>{for(var i in n)t.o(n,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:n[i]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)};t.d({},{C:()=>ku,i:()=>ju});const e=100,n=201,i=204,r=205,s=301,a=302,o=306,l=1e3,c=1001,h=1002,u=1003,d=1006,p=1008,m=1009,f=1012,g=1014,v=1015,y=1016,x=1020,_=1023,w=1026,b=1027,M=33776,S=33777,T=33778,E=33779,A=2300,P=2301,R=2302,C=2400,L=2401,D=2402,I=3e3,z=3001,N=7680,O=35044,F=35048,U="300 es",B=1035;class H{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)}hasEventListener(t,e){if(void 0===this._listeners)return!1;const n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)}removeEventListener(t,e){if(void 0===this._listeners)return;const n=this._listeners[t];if(void 0!==n){const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}dispatchEvent(t){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const n=e.slice(0);for(let e=0,i=n.length;e<i;e++)n[e].call(this,t);t.target=null}}}const G=[];for(let t=0;t<256;t++)G[t]=(t<16?"0":"")+t.toString(16);const k=Math.PI/180,V=180/Math.PI;function W(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,i=4294967295*Math.random()|0;return(G[255&t]+G[t>>8&255]+G[t>>16&255]+G[t>>24&255]+"-"+G[255&e]+G[e>>8&255]+"-"+G[e>>16&15|64]+G[e>>24&255]+"-"+G[63&n|128]+G[n>>8&255]+"-"+G[n>>16&255]+G[n>>24&255]+G[255&i]+G[i>>8&255]+G[i>>16&255]+G[i>>24&255]).toUpperCase()}function j(t,e,n){return Math.max(e,Math.min(n,t))}function q(t,e,n){return(1-n)*t+n*e}function X(t){return 0==(t&t-1)&&0!==t}function Y(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}class Z{constructor(t=0,e=0){this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this)}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this)}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,i=t.elements;return this.x=i[0]*e+i[3]*n+i[6],this.y=i[1]*e+i[4]*n+i[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e),r=this.x-t.x,s=this.y-t.y;return this.x=r*n-s*i+t.x,this.y=r*i+s*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}Z.prototype.isVector2=!0;class J{constructor(){this.elements=[1,0,0,0,1,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}set(t,e,n,i,r,s,a,o,l){const c=this.elements;return c[0]=t,c[1]=i,c[2]=a,c[3]=e,c[4]=r,c[5]=o,c[6]=n,c[7]=s,c[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,s=n[0],a=n[3],o=n[6],l=n[1],c=n[4],h=n[7],u=n[2],d=n[5],p=n[8],m=i[0],f=i[3],g=i[6],v=i[1],y=i[4],x=i[7],_=i[2],w=i[5],b=i[8];return r[0]=s*m+a*v+o*_,r[3]=s*f+a*y+o*w,r[6]=s*g+a*x+o*b,r[1]=l*m+c*v+h*_,r[4]=l*f+c*y+h*w,r[7]=l*g+c*x+h*b,r[2]=u*m+d*v+p*_,r[5]=u*f+d*y+p*w,r[8]=u*g+d*x+p*b,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8];return e*s*c-e*a*l-n*r*c+n*a*o+i*r*l-i*s*o}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8],h=c*s-a*l,u=a*o-c*r,d=l*r-s*o,p=e*h+n*u+i*d;if(0===p)return this.set(0,0,0,0,0,0,0,0,0);const m=1/p;return t[0]=h*m,t[1]=(i*l-c*n)*m,t[2]=(a*n-i*s)*m,t[3]=u*m,t[4]=(c*e-i*o)*m,t[5]=(i*r-a*e)*m,t[6]=d*m,t[7]=(n*o-l*e)*m,t[8]=(s*e-n*r)*m,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,i,r,s,a){const o=Math.cos(r),l=Math.sin(r);return this.set(n*o,n*l,-n*(o*s+l*a)+s+t,-i*l,i*o,-i*(-l*s+o*a)+a+e,0,0,1),this}scale(t,e){const n=this.elements;return n[0]*=t,n[3]*=t,n[6]*=t,n[1]*=e,n[4]*=e,n[7]*=e,this}rotate(t){const e=Math.cos(t),n=Math.sin(t),i=this.elements,r=i[0],s=i[3],a=i[6],o=i[1],l=i[4],c=i[7];return i[0]=e*r+n*o,i[3]=e*s+n*l,i[6]=e*a+n*c,i[1]=-n*r+e*o,i[4]=-n*s+e*l,i[7]=-n*a+e*c,this}translate(t,e){const n=this.elements;return n[0]+=t*n[2],n[3]+=t*n[5],n[6]+=t*n[8],n[1]+=e*n[2],n[4]+=e*n[5],n[7]+=e*n[8],this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<9;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<9;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}function K(t){for(let e=t.length-1;e>=0;--e)if(t[e]>65535)return!0;return!1}function Q(t){return document.createElementNS("http://www.w3.org/1999/xhtml",t)}J.prototype.isMatrix3=!0,Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array;const $={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},tt={h:0,s:0,l:0},et={h:0,s:0,l:0};function nt(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+6*(e-t)*(2/3-n):t}function it(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function rt(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}class st{constructor(t,e,n){return void 0===e&&void 0===n?this.set(t):this.setRGB(t,e,n)}set(t){return t&&t.isColor?this.copy(t):"number"==typeof t?this.setHex(t):"string"==typeof t&&this.setStyle(t),this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,this}setRGB(t,e,n){return this.r=t,this.g=e,this.b=n,this}setHSL(t,e,n){if(t=(t%(i=1)+i)%i,e=j(e,0,1),n=j(n,0,1),0===e)this.r=this.g=this.b=n;else{const i=n<=.5?n*(1+e):n+e-n*e,r=2*n-i;this.r=nt(r,i,t+1/3),this.g=nt(r,i,t),this.b=nt(r,i,t-1/3)}var i;return this}setStyle(t){function e(e){void 0!==e&&parseFloat(e)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let n;if(n=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)){let t;const i=n[1],r=n[2];switch(i){case"rgb":case"rgba":if(t=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r))return this.r=Math.min(255,parseInt(t[1],10))/255,this.g=Math.min(255,parseInt(t[2],10))/255,this.b=Math.min(255,parseInt(t[3],10))/255,e(t[4]),this;if(t=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r))return this.r=Math.min(100,parseInt(t[1],10))/100,this.g=Math.min(100,parseInt(t[2],10))/100,this.b=Math.min(100,parseInt(t[3],10))/100,e(t[4]),this;break;case"hsl":case"hsla":if(t=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r)){const n=parseFloat(t[1])/360,i=parseInt(t[2],10)/100,r=parseInt(t[3],10)/100;return e(t[4]),this.setHSL(n,i,r)}}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(t)){const t=n[1],e=t.length;if(3===e)return this.r=parseInt(t.charAt(0)+t.charAt(0),16)/255,this.g=parseInt(t.charAt(1)+t.charAt(1),16)/255,this.b=parseInt(t.charAt(2)+t.charAt(2),16)/255,this;if(6===e)return this.r=parseInt(t.charAt(0)+t.charAt(1),16)/255,this.g=parseInt(t.charAt(2)+t.charAt(3),16)/255,this.b=parseInt(t.charAt(4)+t.charAt(5),16)/255,this}return t&&t.length>0?this.setColorName(t):this}setColorName(t){const e=$[t.toLowerCase()];return void 0!==e?this.setHex(e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=it(t.r),this.g=it(t.g),this.b=it(t.b),this}copyLinearToSRGB(t){return this.r=rt(t.r),this.g=rt(t.g),this.b=rt(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(){return 255*this.r<<16^255*this.g<<8^255*this.b<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(t){const e=this.r,n=this.g,i=this.b,r=Math.max(e,n,i),s=Math.min(e,n,i);let a,o;const l=(s+r)/2;if(s===r)a=0,o=0;else{const t=r-s;switch(o=l<=.5?t/(r+s):t/(2-r-s),r){case e:a=(n-i)/t+(n<i?6:0);break;case n:a=(i-e)/t+2;break;case i:a=(e-n)/t+4}a/=6}return t.h=a,t.s=o,t.l=l,t}getStyle(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"}offsetHSL(t,e,n){return this.getHSL(tt),tt.h+=t,tt.s+=e,tt.l+=n,this.setHSL(tt.h,tt.s,tt.l),this}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(tt),t.getHSL(et);const n=q(tt.h,et.h,e),i=q(tt.s,et.s,e),r=q(tt.l,et.l,e);return this.setHSL(n,i,r),this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),!0===t.normalized&&(this.r/=255,this.g/=255,this.b/=255),this}toJSON(){return this.getHex()}}let at;st.NAMES=$,st.prototype.isColor=!0,st.prototype.r=1,st.prototype.g=1,st.prototype.b=1;class ot{static getDataURL(t){if(/^data:/i.test(t.src))return t.src;if("undefined"==typeof HTMLCanvasElement)return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{void 0===at&&(at=Q("canvas")),at.width=t.width,at.height=t.height;const n=at.getContext("2d");t instanceof ImageData?n.putImageData(t,0,0):n.drawImage(t,0,0,t.width,t.height),e=at}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const e=Q("canvas");e.width=t.width,e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height),r=i.data;for(let t=0;t<r.length;t++)r[t]=255*it(r[t]/255);return n.putImageData(i,0,0),e}if(t.data){const e=t.data.slice(0);for(let t=0;t<e.length;t++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[t]=Math.floor(255*it(e[t]/255)):e[t]=it(e[t]);return{data:e,width:t.width,height:t.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}class lt{constructor(t=null){this.uuid=W(),this.data=t,this.version=0}set needsUpdate(t){!0===t&&this.version++}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.images[this.uuid])return t.images[this.uuid];const n={uuid:this.uuid,url:""},i=this.data;if(null!==i){let t;if(Array.isArray(i)){t=[];for(let e=0,n=i.length;e<n;e++)i[e].isDataTexture?t.push(ct(i[e].image)):t.push(ct(i[e]))}else t=ct(i);n.url=t}return e||(t.images[this.uuid]=n),n}}function ct(t){return"undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap?ot.getDataURL(t):t.data?{data:Array.prototype.slice.call(t.data),width:t.width,height:t.height,type:t.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}lt.prototype.isSource=!0;let ht=0;class ut extends H{constructor(t=ut.DEFAULT_IMAGE,e=ut.DEFAULT_MAPPING,n=1001,i=1001,r=1006,s=1008,a=1023,o=1009,l=1,c=3e3){super(),Object.defineProperty(this,"id",{value:ht++}),this.uuid=W(),this.name="",this.source=new lt(t),this.mipmaps=[],this.mapping=e,this.wrapS=n,this.wrapT=i,this.magFilter=r,this.minFilter=s,this.anisotropy=l,this.format=a,this.internalFormat=null,this.type=o,this.offset=new Z(0,0),this.repeat=new Z(1,1),this.center=new Z(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new J,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.encoding=c,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.needsPMREMUpdate=!1}get image(){return this.source.data}set image(t){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.encoding=t.encoding,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=void 0===t||"string"==typeof t;if(!e&&void 0!==t.textures[this.uuid])return t.textures[this.uuid];const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),e||(t.textures[this.uuid]=n),n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(300!==this.mapping)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case l:t.x=t.x-Math.floor(t.x);break;case c:t.x=t.x<0?0:1;break;case h:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case l:t.y=t.y-Math.floor(t.y);break;case c:t.y=t.y<0?0:1;break;case h:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&(this.version++,this.source.needsUpdate=!0)}}ut.DEFAULT_IMAGE=null,ut.DEFAULT_MAPPING=300,ut.prototype.isTexture=!0;class dt{constructor(t=0,e=0,n=0,i=1){this.x=t,this.y=e,this.z=n,this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){return this.x=t,this.y=e,this.z=n,this.w=i,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=this.w,s=t.elements;return this.x=s[0]*e+s[4]*n+s[8]*i+s[12]*r,this.y=s[1]*e+s[5]*n+s[9]*i+s[13]*r,this.z=s[2]*e+s[6]*n+s[10]*i+s[14]*r,this.w=s[3]*e+s[7]*n+s[11]*i+s[15]*r,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,n,i,r;const s=.01,a=.1,o=t.elements,l=o[0],c=o[4],h=o[8],u=o[1],d=o[5],p=o[9],m=o[2],f=o[6],g=o[10];if(Math.abs(c-u)<s&&Math.abs(h-m)<s&&Math.abs(p-f)<s){if(Math.abs(c+u)<a&&Math.abs(h+m)<a&&Math.abs(p+f)<a&&Math.abs(l+d+g-3)<a)return this.set(1,0,0,0),this;e=Math.PI;const t=(l+1)/2,o=(d+1)/2,v=(g+1)/2,y=(c+u)/4,x=(h+m)/4,_=(p+f)/4;return t>o&&t>v?t<s?(n=0,i=.707106781,r=.707106781):(n=Math.sqrt(t),i=y/n,r=x/n):o>v?o<s?(n=.707106781,i=0,r=.707106781):(i=Math.sqrt(o),n=y/i,r=_/i):v<s?(n=.707106781,i=.707106781,r=0):(r=Math.sqrt(v),n=x/r,i=_/r),this.set(n,i,r,e),this}let v=Math.sqrt((f-p)*(f-p)+(h-m)*(h-m)+(u-c)*(u-c));return Math.abs(v)<.001&&(v=1),this.x=(f-p)/v,this.y=(h-m)/v,this.z=(u-c)/v,this.w=Math.acos((l+d+g-1)/2),this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}dt.prototype.isVector4=!0;class pt extends H{constructor(t,e,n={}){super(),this.width=t,this.height=e,this.depth=1,this.scissor=new dt(0,0,t,e),this.scissorTest=!1,this.viewport=new dt(0,0,t,e);const i={width:t,height:e,depth:1};this.texture=new ut(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==n.generateMipmaps&&n.generateMipmaps,this.texture.internalFormat=void 0!==n.internalFormat?n.internalFormat:null,this.texture.minFilter=void 0!==n.minFilter?n.minFilter:d,this.depthBuffer=void 0===n.depthBuffer||n.depthBuffer,this.stencilBuffer=void 0!==n.stencilBuffer&&n.stencilBuffer,this.depthTexture=void 0!==n.depthTexture?n.depthTexture:null,this.samples=void 0!==n.samples?n.samples:0}setSize(t,e,n=1){this.width===t&&this.height===e&&this.depth===n||(this.width=t,this.height=e,this.depth=n,this.texture.image.width=t,this.texture.image.height=e,this.texture.image.depth=n,this.dispose()),this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.copy(t.viewport),this.texture=t.texture.clone(),this.texture.image=Object.assign({},t.texture.image),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,null!==t.depthTexture&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}pt.prototype.isWebGLRenderTarget=!0;class mt extends ut{constructor(t=null,e=1,n=1,i=1){super(null),this.image={data:t,width:e,height:n,depth:i},this.magFilter=u,this.minFilter=u,this.wrapR=c,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}mt.prototype.isDataArrayTexture=!0,class extends pt{constructor(t,e,n){super(t,e),this.depth=n,this.texture=new mt(null,t,e,n),this.texture.isRenderTargetTexture=!0}}.prototype.isWebGLArrayRenderTarget=!0;class ft extends ut{constructor(t=null,e=1,n=1,i=1){super(null),this.image={data:t,width:e,height:n,depth:i},this.magFilter=u,this.minFilter=u,this.wrapR=c,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}ft.prototype.isData3DTexture=!0,class extends pt{constructor(t,e,n){super(t,e),this.depth=n,this.texture=new ft(null,t,e,n),this.texture.isRenderTargetTexture=!0}}.prototype.isWebGL3DRenderTarget=!0,class extends pt{constructor(t,e,n,i={}){super(t,e,i);const r=this.texture;this.texture=[];for(let t=0;t<n;t++)this.texture[t]=r.clone(),this.texture[t].isRenderTargetTexture=!0}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let i=0,r=this.texture.length;i<r;i++)this.texture[i].image.width=t,this.texture[i].image.height=e,this.texture[i].image.depth=n;this.dispose()}return this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e),this}copy(t){this.dispose(),this.width=t.width,this.height=t.height,this.depth=t.depth,this.viewport.set(0,0,this.width,this.height),this.scissor.set(0,0,this.width,this.height),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.depthTexture=t.depthTexture,this.texture.length=0;for(let e=0,n=t.texture.length;e<n;e++)this.texture[e]=t.texture[e].clone();return this}}.prototype.isWebGLMultipleRenderTargets=!0;class gt{constructor(t=0,e=0,n=0,i=1){this._x=t,this._y=e,this._z=n,this._w=i}static slerp(t,e,n,i){return console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead."),n.slerpQuaternions(t,e,i)}static slerpFlat(t,e,n,i,r,s,a){let o=n[i+0],l=n[i+1],c=n[i+2],h=n[i+3];const u=r[s+0],d=r[s+1],p=r[s+2],m=r[s+3];if(0===a)return t[e+0]=o,t[e+1]=l,t[e+2]=c,void(t[e+3]=h);if(1===a)return t[e+0]=u,t[e+1]=d,t[e+2]=p,void(t[e+3]=m);if(h!==m||o!==u||l!==d||c!==p){let t=1-a;const e=o*u+l*d+c*p+h*m,n=e>=0?1:-1,i=1-e*e;if(i>Number.EPSILON){const r=Math.sqrt(i),s=Math.atan2(r,e*n);t=Math.sin(t*s)/r,a=Math.sin(a*s)/r}const r=a*n;if(o=o*t+u*r,l=l*t+d*r,c=c*t+p*r,h=h*t+m*r,t===1-a){const t=1/Math.sqrt(o*o+l*l+c*c+h*h);o*=t,l*=t,c*=t,h*=t}}t[e]=o,t[e+1]=l,t[e+2]=c,t[e+3]=h}static multiplyQuaternionsFlat(t,e,n,i,r,s){const a=n[i],o=n[i+1],l=n[i+2],c=n[i+3],h=r[s],u=r[s+1],d=r[s+2],p=r[s+3];return t[e]=a*p+c*h+o*d-l*u,t[e+1]=o*p+c*u+l*h-a*d,t[e+2]=l*p+c*d+a*u-o*h,t[e+3]=c*p-a*h-o*u-l*d,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,i){return this._x=t,this._y=e,this._z=n,this._w=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e){if(!t||!t.isEuler)throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.");const n=t._x,i=t._y,r=t._z,s=t._order,a=Math.cos,o=Math.sin,l=a(n/2),c=a(i/2),h=a(r/2),u=o(n/2),d=o(i/2),p=o(r/2);switch(s){case"XYZ":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case"YXZ":this._x=u*c*h+l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case"ZXY":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h-u*d*p;break;case"ZYX":this._x=u*c*h-l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h+u*d*p;break;case"YZX":this._x=u*c*h+l*d*p,this._y=l*d*h+u*c*p,this._z=l*c*p-u*d*h,this._w=l*c*h-u*d*p;break;case"XZY":this._x=u*c*h-l*d*p,this._y=l*d*h-u*c*p,this._z=l*c*p+u*d*h,this._w=l*c*h+u*d*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+s)}return!1!==e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);return this._x=t.x*i,this._y=t.y*i,this._z=t.z*i,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],r=e[8],s=e[1],a=e[5],o=e[9],l=e[2],c=e[6],h=e[10],u=n+a+h;if(u>0){const t=.5/Math.sqrt(u+1);this._w=.25/t,this._x=(c-o)*t,this._y=(r-l)*t,this._z=(s-i)*t}else if(n>a&&n>h){const t=2*Math.sqrt(1+n-a-h);this._w=(c-o)/t,this._x=.25*t,this._y=(i+s)/t,this._z=(r+l)/t}else if(a>h){const t=2*Math.sqrt(1+a-n-h);this._w=(r-l)/t,this._x=(i+s)/t,this._y=.25*t,this._z=(o+c)/t}else{const t=2*Math.sqrt(1+h-n-a);this._w=(s-i)/t,this._x=(r+l)/t,this._y=(o+c)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(j(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(0===n)return this;const i=Math.min(1,e/n);return this.slerp(t,i),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t,e){return void 0!==e?(console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),this.multiplyQuaternions(t,e)):this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,r=t._z,s=t._w,a=e._x,o=e._y,l=e._z,c=e._w;return this._x=n*c+s*a+i*l-r*o,this._y=i*c+s*o+r*a-n*l,this._z=r*c+s*l+n*o-i*a,this._w=s*c-n*a-i*o-r*l,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const n=this._x,i=this._y,r=this._z,s=this._w;let a=s*t._w+n*t._x+i*t._y+r*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=s,this._x=n,this._y=i,this._z=r,this;const o=1-a*a;if(o<=Number.EPSILON){const t=1-e;return this._w=t*s+e*this._w,this._x=t*n+e*this._x,this._y=t*i+e*this._y,this._z=t*r+e*this._z,this.normalize(),this._onChangeCallback(),this}const l=Math.sqrt(o),c=Math.atan2(l,a),h=Math.sin((1-e)*c)/l,u=Math.sin(e*c)/l;return this._w=s*h+this._w*u,this._x=n*h+this._x*u,this._y=i*h+this._y*u,this._z=r*h+this._z*u,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=Math.random(),e=Math.sqrt(1-t),n=Math.sqrt(t),i=2*Math.PI*Math.random(),r=2*Math.PI*Math.random();return this.set(e*Math.cos(i),n*Math.sin(r),n*Math.cos(r),e*Math.sin(i))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}gt.prototype.isQuaternion=!0;class vt{constructor(t=0,e=0,n=0){this.x=t,this.y=e,this.z=n}set(t,e,n){return void 0===n&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t,e){return void 0!==e?(console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(t,e)):(this.x+=t.x,this.y+=t.y,this.z+=t.z,this)}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t,e){return void 0!==e?(console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(t,e)):(this.x-=t.x,this.y-=t.y,this.z-=t.z,this)}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t,e){return void 0!==e?(console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(t,e)):(this.x*=t.x,this.y*=t.y,this.z*=t.z,this)}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return t&&t.isEuler||console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order."),this.applyQuaternion(xt.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(xt.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6]*i,this.y=r[1]*e+r[4]*n+r[7]*i,this.z=r[2]*e+r[5]*n+r[8]*i,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=t.elements,s=1/(r[3]*e+r[7]*n+r[11]*i+r[15]);return this.x=(r[0]*e+r[4]*n+r[8]*i+r[12])*s,this.y=(r[1]*e+r[5]*n+r[9]*i+r[13])*s,this.z=(r[2]*e+r[6]*n+r[10]*i+r[14])*s,this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z,r=t.x,s=t.y,a=t.z,o=t.w,l=o*e+s*i-a*n,c=o*n+a*e-r*i,h=o*i+r*n-s*e,u=-r*e-s*n-a*i;return this.x=l*o+u*-r+c*-a-h*-s,this.y=c*o+u*-s+h*-r-l*-a,this.z=h*o+u*-a+l*-s-c*-r,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z,r=t.elements;return this.x=r[0]*e+r[4]*n+r[8]*i,this.y=r[1]*e+r[5]*n+r[9]*i,this.z=r[2]*e+r[6]*n+r[10]*i,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x),this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y),this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t,e){return void 0!==e?(console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),this.crossVectors(t,e)):this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,r=t.z,s=e.x,a=e.y,o=e.z;return this.x=i*o-r*a,this.y=r*s-n*o,this.z=n*a-i*s,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return yt.copy(this).projectOnVector(t),this.sub(yt)}reflect(t){return this.sub(yt.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(j(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;return this.x=i*Math.sin(n),this.y=Math.cos(e)*t,this.z=i*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),i=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=i,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e,n){return void 0!==n&&console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute()."),this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=2*(Math.random()-.5),e=Math.random()*Math.PI*2,n=Math.sqrt(1-t**2);return this.x=n*Math.cos(e),this.y=n*Math.sin(e),this.z=t,this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}vt.prototype.isVector3=!0;const yt=new vt,xt=new gt;class _t{constructor(t=new vt(1/0,1/0,1/0),e=new vt(-1/0,-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){let e=1/0,n=1/0,i=1/0,r=-1/0,s=-1/0,a=-1/0;for(let o=0,l=t.length;o<l;o+=3){const l=t[o],c=t[o+1],h=t[o+2];l<e&&(e=l),c<n&&(n=c),h<i&&(i=h),l>r&&(r=l),c>s&&(s=c),h>a&&(a=h)}return this.min.set(e,n,i),this.max.set(r,s,a),this}setFromBufferAttribute(t){let e=1/0,n=1/0,i=1/0,r=-1/0,s=-1/0,a=-1/0;for(let o=0,l=t.count;o<l;o++){const l=t.getX(o),c=t.getY(o),h=t.getZ(o);l<e&&(e=l),c<n&&(n=c),h<i&&(i=h),l>r&&(r=l),c>s&&(s=c),h>a&&(a=h)}return this.min.set(e,n,i),this.max.set(r,s,a),this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=bt.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const n=t.geometry;if(void 0!==n)if(e&&null!=n.attributes&&void 0!==n.attributes.position){const e=n.attributes.position;for(let n=0,i=e.count;n<i;n++)bt.fromBufferAttribute(e,n).applyMatrix4(t.matrixWorld),this.expandByPoint(bt)}else null===n.boundingBox&&n.computeBoundingBox(),Mt.copy(n.boundingBox),Mt.applyMatrix4(t.matrixWorld),this.union(Mt);const i=t.children;for(let t=0,n=i.length;t<n;t++)this.expandByObject(i[t],e);return this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z)}intersectsSphere(t){return this.clampPoint(t.center,bt),bt.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Ct),Lt.subVectors(this.max,Ct),St.subVectors(t.a,Ct),Tt.subVectors(t.b,Ct),Et.subVectors(t.c,Ct),At.subVectors(Tt,St),Pt.subVectors(Et,Tt),Rt.subVectors(St,Et);let e=[0,-At.z,At.y,0,-Pt.z,Pt.y,0,-Rt.z,Rt.y,At.z,0,-At.x,Pt.z,0,-Pt.x,Rt.z,0,-Rt.x,-At.y,At.x,0,-Pt.y,Pt.x,0,-Rt.y,Rt.x,0];return!!zt(e,St,Tt,Et,Lt)&&(e=[1,0,0,0,1,0,0,0,1],!!zt(e,St,Tt,Et,Lt)&&(Dt.crossVectors(At,Pt),e=[Dt.x,Dt.y,Dt.z],zt(e,St,Tt,Et,Lt)))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return bt.copy(t).clamp(this.min,this.max).sub(t).length()}getBoundingSphere(t){return this.getCenter(t.center),t.radius=.5*this.getSize(bt).length(),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(wt[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),wt[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),wt[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),wt[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),wt[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),wt[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),wt[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),wt[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(wt)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}_t.prototype.isBox3=!0;const wt=[new vt,new vt,new vt,new vt,new vt,new vt,new vt,new vt],bt=new vt,Mt=new _t,St=new vt,Tt=new vt,Et=new vt,At=new vt,Pt=new vt,Rt=new vt,Ct=new vt,Lt=new vt,Dt=new vt,It=new vt;function zt(t,e,n,i,r){for(let s=0,a=t.length-3;s<=a;s+=3){It.fromArray(t,s);const a=r.x*Math.abs(It.x)+r.y*Math.abs(It.y)+r.z*Math.abs(It.z),o=e.dot(It),l=n.dot(It),c=i.dot(It);if(Math.max(-Math.max(o,l,c),Math.min(o,l,c))>a)return!1}return!0}const Nt=new _t,Ot=new vt,Ft=new vt,Ut=new vt;class Bt{constructor(t=new vt,e=-1){this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;void 0!==e?n.copy(e):Nt.setFromPoints(t).getCenter(n);let i=0;for(let e=0,r=t.length;e<r;e++)i=Math.max(i,n.distanceToSquared(t[e]));return this.radius=Math.sqrt(i),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){Ut.subVectors(t,this.center);const e=Ut.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),n=.5*(t-this.radius);this.center.add(Ut.multiplyScalar(n/t)),this.radius+=n}return this}union(t){return!0===this.center.equals(t.center)?Ft.set(0,0,1).multiplyScalar(t.radius):Ft.subVectors(t.center,this.center).normalize().multiplyScalar(t.radius),this.expandByPoint(Ot.copy(t.center).add(Ft)),this.expandByPoint(Ot.copy(t.center).sub(Ft)),this}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const Ht=new vt,Gt=new vt,kt=new vt,Vt=new vt,Wt=new vt,jt=new vt,qt=new vt;class Xt{constructor(t=new vt,e=new vt(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,Ht)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=Ht.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(Ht.copy(this.direction).multiplyScalar(e).add(this.origin),Ht.distanceToSquared(t))}distanceSqToSegment(t,e,n,i){Gt.copy(t).add(e).multiplyScalar(.5),kt.copy(e).sub(t).normalize(),Vt.copy(this.origin).sub(Gt);const r=.5*t.distanceTo(e),s=-this.direction.dot(kt),a=Vt.dot(this.direction),o=-Vt.dot(kt),l=Vt.lengthSq(),c=Math.abs(1-s*s);let h,u,d,p;if(c>0)if(h=s*o-a,u=s*a-o,p=r*c,h>=0)if(u>=-p)if(u<=p){const t=1/c;h*=t,u*=t,d=h*(h+s*u+2*a)+u*(s*h+u+2*o)+l}else u=r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;else u=-r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;else u<=-p?(h=Math.max(0,-(-s*r+a)),u=h>0?-r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l):u<=p?(h=0,u=Math.min(Math.max(-r,-o),r),d=u*(u+2*o)+l):(h=Math.max(0,-(s*r+a)),u=h>0?r:Math.min(Math.max(-r,-o),r),d=-h*h+u*(u+2*o)+l);else u=s>0?-r:r,h=Math.max(0,-(s*u+a)),d=-h*h+u*(u+2*o)+l;return n&&n.copy(this.direction).multiplyScalar(h).add(this.origin),i&&i.copy(kt).multiplyScalar(u).add(Gt),d}intersectSphere(t,e){Ht.subVectors(t.center,this.origin);const n=Ht.dot(this.direction),i=Ht.dot(Ht)-n*n,r=t.radius*t.radius;if(i>r)return null;const s=Math.sqrt(r-i),a=n-s,o=n+s;return a<0&&o<0?null:a<0?this.at(o,e):this.at(a,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return null===n?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);return 0===e||t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,i,r,s,a,o;const l=1/this.direction.x,c=1/this.direction.y,h=1/this.direction.z,u=this.origin;return l>=0?(n=(t.min.x-u.x)*l,i=(t.max.x-u.x)*l):(n=(t.max.x-u.x)*l,i=(t.min.x-u.x)*l),c>=0?(r=(t.min.y-u.y)*c,s=(t.max.y-u.y)*c):(r=(t.max.y-u.y)*c,s=(t.min.y-u.y)*c),n>s||r>i?null:((r>n||n!=n)&&(n=r),(s<i||i!=i)&&(i=s),h>=0?(a=(t.min.z-u.z)*h,o=(t.max.z-u.z)*h):(a=(t.max.z-u.z)*h,o=(t.min.z-u.z)*h),n>o||a>i?null:((a>n||n!=n)&&(n=a),(o<i||i!=i)&&(i=o),i<0?null:this.at(n>=0?n:i,e)))}intersectsBox(t){return null!==this.intersectBox(t,Ht)}intersectTriangle(t,e,n,i,r){Wt.subVectors(e,t),jt.subVectors(n,t),qt.crossVectors(Wt,jt);let s,a=this.direction.dot(qt);if(a>0){if(i)return null;s=1}else{if(!(a<0))return null;s=-1,a=-a}Vt.subVectors(this.origin,t);const o=s*this.direction.dot(jt.crossVectors(Vt,jt));if(o<0)return null;const l=s*this.direction.dot(Wt.cross(Vt));if(l<0)return null;if(o+l>a)return null;const c=-s*Vt.dot(qt);return c<0?null:this.at(c/a,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Yt{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],arguments.length>0&&console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}set(t,e,n,i,r,s,a,o,l,c,h,u,d,p,m,f){const g=this.elements;return g[0]=t,g[4]=e,g[8]=n,g[12]=i,g[1]=r,g[5]=s,g[9]=a,g[13]=o,g[2]=l,g[6]=c,g[10]=h,g[14]=u,g[3]=d,g[7]=p,g[11]=m,g[15]=f,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new Yt).fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,i=1/Zt.setFromMatrixColumn(t,0).length(),r=1/Zt.setFromMatrixColumn(t,1).length(),s=1/Zt.setFromMatrixColumn(t,2).length();return e[0]=n[0]*i,e[1]=n[1]*i,e[2]=n[2]*i,e[3]=0,e[4]=n[4]*r,e[5]=n[5]*r,e[6]=n[6]*r,e[7]=0,e[8]=n[8]*s,e[9]=n[9]*s,e[10]=n[10]*s,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){t&&t.isEuler||console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.");const e=this.elements,n=t.x,i=t.y,r=t.z,s=Math.cos(n),a=Math.sin(n),o=Math.cos(i),l=Math.sin(i),c=Math.cos(r),h=Math.sin(r);if("XYZ"===t.order){const t=s*c,n=s*h,i=a*c,r=a*h;e[0]=o*c,e[4]=-o*h,e[8]=l,e[1]=n+i*l,e[5]=t-r*l,e[9]=-a*o,e[2]=r-t*l,e[6]=i+n*l,e[10]=s*o}else if("YXZ"===t.order){const t=o*c,n=o*h,i=l*c,r=l*h;e[0]=t+r*a,e[4]=i*a-n,e[8]=s*l,e[1]=s*h,e[5]=s*c,e[9]=-a,e[2]=n*a-i,e[6]=r+t*a,e[10]=s*o}else if("ZXY"===t.order){const t=o*c,n=o*h,i=l*c,r=l*h;e[0]=t-r*a,e[4]=-s*h,e[8]=i+n*a,e[1]=n+i*a,e[5]=s*c,e[9]=r-t*a,e[2]=-s*l,e[6]=a,e[10]=s*o}else if("ZYX"===t.order){const t=s*c,n=s*h,i=a*c,r=a*h;e[0]=o*c,e[4]=i*l-n,e[8]=t*l+r,e[1]=o*h,e[5]=r*l+t,e[9]=n*l-i,e[2]=-l,e[6]=a*o,e[10]=s*o}else if("YZX"===t.order){const t=s*o,n=s*l,i=a*o,r=a*l;e[0]=o*c,e[4]=r-t*h,e[8]=i*h+n,e[1]=h,e[5]=s*c,e[9]=-a*c,e[2]=-l*c,e[6]=n*h+i,e[10]=t-r*h}else if("XZY"===t.order){const t=s*o,n=s*l,i=a*o,r=a*l;e[0]=o*c,e[4]=-h,e[8]=l*c,e[1]=t*h+r,e[5]=s*c,e[9]=n*h-i,e[2]=i*h-n,e[6]=a*c,e[10]=r*h+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(Kt,t,Qt)}lookAt(t,e,n){const i=this.elements;return ee.subVectors(t,e),0===ee.lengthSq()&&(ee.z=1),ee.normalize(),$t.crossVectors(n,ee),0===$t.lengthSq()&&(1===Math.abs(n.z)?ee.x+=1e-4:ee.z+=1e-4,ee.normalize(),$t.crossVectors(n,ee)),$t.normalize(),te.crossVectors(ee,$t),i[0]=$t.x,i[4]=te.x,i[8]=ee.x,i[1]=$t.y,i[5]=te.y,i[9]=ee.y,i[2]=$t.z,i[6]=te.z,i[10]=ee.z,this}multiply(t,e){return void 0!==e?(console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(t,e)):this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements,i=e.elements,r=this.elements,s=n[0],a=n[4],o=n[8],l=n[12],c=n[1],h=n[5],u=n[9],d=n[13],p=n[2],m=n[6],f=n[10],g=n[14],v=n[3],y=n[7],x=n[11],_=n[15],w=i[0],b=i[4],M=i[8],S=i[12],T=i[1],E=i[5],A=i[9],P=i[13],R=i[2],C=i[6],L=i[10],D=i[14],I=i[3],z=i[7],N=i[11],O=i[15];return r[0]=s*w+a*T+o*R+l*I,r[4]=s*b+a*E+o*C+l*z,r[8]=s*M+a*A+o*L+l*N,r[12]=s*S+a*P+o*D+l*O,r[1]=c*w+h*T+u*R+d*I,r[5]=c*b+h*E+u*C+d*z,r[9]=c*M+h*A+u*L+d*N,r[13]=c*S+h*P+u*D+d*O,r[2]=p*w+m*T+f*R+g*I,r[6]=p*b+m*E+f*C+g*z,r[10]=p*M+m*A+f*L+g*N,r[14]=p*S+m*P+f*D+g*O,r[3]=v*w+y*T+x*R+_*I,r[7]=v*b+y*E+x*C+_*z,r[11]=v*M+y*A+x*L+_*N,r[15]=v*S+y*P+x*D+_*O,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],n=t[4],i=t[8],r=t[12],s=t[1],a=t[5],o=t[9],l=t[13],c=t[2],h=t[6],u=t[10],d=t[14];return t[3]*(+r*o*h-i*l*h-r*a*u+n*l*u+i*a*d-n*o*d)+t[7]*(+e*o*d-e*l*u+r*s*u-i*s*d+i*l*c-r*o*c)+t[11]*(+e*l*h-e*a*d-r*s*h+n*s*d+r*a*c-n*l*c)+t[15]*(-i*a*c-e*o*h+e*a*u+i*s*h-n*s*u+n*o*c)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const i=this.elements;return t.isVector3?(i[12]=t.x,i[13]=t.y,i[14]=t.z):(i[12]=t,i[13]=e,i[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],s=t[4],a=t[5],o=t[6],l=t[7],c=t[8],h=t[9],u=t[10],d=t[11],p=t[12],m=t[13],f=t[14],g=t[15],v=h*f*l-m*u*l+m*o*d-a*f*d-h*o*g+a*u*g,y=p*u*l-c*f*l-p*o*d+s*f*d+c*o*g-s*u*g,x=c*m*l-p*h*l+p*a*d-s*m*d-c*a*g+s*h*g,_=p*h*o-c*m*o-p*a*u+s*m*u+c*a*f-s*h*f,w=e*v+n*y+i*x+r*_;if(0===w)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const b=1/w;return t[0]=v*b,t[1]=(m*u*r-h*f*r-m*i*d+n*f*d+h*i*g-n*u*g)*b,t[2]=(a*f*r-m*o*r+m*i*l-n*f*l-a*i*g+n*o*g)*b,t[3]=(h*o*r-a*u*r-h*i*l+n*u*l+a*i*d-n*o*d)*b,t[4]=y*b,t[5]=(c*f*r-p*u*r+p*i*d-e*f*d-c*i*g+e*u*g)*b,t[6]=(p*o*r-s*f*r-p*i*l+e*f*l+s*i*g-e*o*g)*b,t[7]=(s*u*r-c*o*r+c*i*l-e*u*l-s*i*d+e*o*d)*b,t[8]=x*b,t[9]=(p*h*r-c*m*r-p*n*d+e*m*d+c*n*g-e*h*g)*b,t[10]=(s*m*r-p*a*r+p*n*l-e*m*l-s*n*g+e*a*g)*b,t[11]=(c*a*r-s*h*r-c*n*l+e*h*l+s*n*d-e*a*d)*b,t[12]=_*b,t[13]=(c*m*i-p*h*i+p*n*u-e*m*u-c*n*f+e*h*f)*b,t[14]=(p*a*i-s*m*i-p*n*o+e*m*o+s*n*f-e*a*f)*b,t[15]=(s*h*i-c*a*i+c*n*o-e*h*o-s*n*u+e*a*u)*b,this}scale(t){const e=this.elements,n=t.x,i=t.y,r=t.z;return e[0]*=n,e[4]*=i,e[8]*=r,e[1]*=n,e[5]*=i,e[9]*=r,e[2]*=n,e[6]*=i,e[10]*=r,e[3]*=n,e[7]*=i,e[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){return this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);return this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);return this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),i=Math.sin(e),r=1-n,s=t.x,a=t.y,o=t.z,l=r*s,c=r*a;return this.set(l*s+n,l*a-i*o,l*o+i*a,0,l*a+i*o,c*a+n,c*o-i*s,0,l*o-i*a,c*o+i*s,r*o*o+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,i,r,s){return this.set(1,n,r,0,t,1,s,0,e,i,1,0,0,0,0,1),this}compose(t,e,n){const i=this.elements,r=e._x,s=e._y,a=e._z,o=e._w,l=r+r,c=s+s,h=a+a,u=r*l,d=r*c,p=r*h,m=s*c,f=s*h,g=a*h,v=o*l,y=o*c,x=o*h,_=n.x,w=n.y,b=n.z;return i[0]=(1-(m+g))*_,i[1]=(d+x)*_,i[2]=(p-y)*_,i[3]=0,i[4]=(d-x)*w,i[5]=(1-(u+g))*w,i[6]=(f+v)*w,i[7]=0,i[8]=(p+y)*b,i[9]=(f-v)*b,i[10]=(1-(u+m))*b,i[11]=0,i[12]=t.x,i[13]=t.y,i[14]=t.z,i[15]=1,this}decompose(t,e,n){const i=this.elements;let r=Zt.set(i[0],i[1],i[2]).length();const s=Zt.set(i[4],i[5],i[6]).length(),a=Zt.set(i[8],i[9],i[10]).length();this.determinant()<0&&(r=-r),t.x=i[12],t.y=i[13],t.z=i[14],Jt.copy(this);const o=1/r,l=1/s,c=1/a;return Jt.elements[0]*=o,Jt.elements[1]*=o,Jt.elements[2]*=o,Jt.elements[4]*=l,Jt.elements[5]*=l,Jt.elements[6]*=l,Jt.elements[8]*=c,Jt.elements[9]*=c,Jt.elements[10]*=c,e.setFromRotationMatrix(Jt),n.x=r,n.y=s,n.z=a,this}makePerspective(t,e,n,i,r,s){void 0===s&&console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.");const a=this.elements,o=2*r/(e-t),l=2*r/(n-i),c=(e+t)/(e-t),h=(n+i)/(n-i),u=-(s+r)/(s-r),d=-2*s*r/(s-r);return a[0]=o,a[4]=0,a[8]=c,a[12]=0,a[1]=0,a[5]=l,a[9]=h,a[13]=0,a[2]=0,a[6]=0,a[10]=u,a[14]=d,a[3]=0,a[7]=0,a[11]=-1,a[15]=0,this}makeOrthographic(t,e,n,i,r,s){const a=this.elements,o=1/(e-t),l=1/(n-i),c=1/(s-r),h=(e+t)*o,u=(n+i)*l,d=(s+r)*c;return a[0]=2*o,a[4]=0,a[8]=0,a[12]=-h,a[1]=0,a[5]=2*l,a[9]=0,a[13]=-u,a[2]=0,a[6]=0,a[10]=-2*c,a[14]=-d,a[3]=0,a[7]=0,a[11]=0,a[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let t=0;t<16;t++)if(e[t]!==n[t])return!1;return!0}fromArray(t,e=0){for(let n=0;n<16;n++)this.elements[n]=t[n+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}Yt.prototype.isMatrix4=!0;const Zt=new vt,Jt=new Yt,Kt=new vt(0,0,0),Qt=new vt(1,1,1),$t=new vt,te=new vt,ee=new vt,ne=new Yt,ie=new gt;class re{constructor(t=0,e=0,n=0,i=re.DefaultOrder){this._x=t,this._y=e,this._z=n,this._order=i}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,i=this._order){return this._x=t,this._y=e,this._z=n,this._order=i,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const i=t.elements,r=i[0],s=i[4],a=i[8],o=i[1],l=i[5],c=i[9],h=i[2],u=i[6],d=i[10];switch(e){case"XYZ":this._y=Math.asin(j(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-c,d),this._z=Math.atan2(-s,r)):(this._x=Math.atan2(u,l),this._z=0);break;case"YXZ":this._x=Math.asin(-j(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(a,d),this._z=Math.atan2(o,l)):(this._y=Math.atan2(-h,r),this._z=0);break;case"ZXY":this._x=Math.asin(j(u,-1,1)),Math.abs(u)<.9999999?(this._y=Math.atan2(-h,d),this._z=Math.atan2(-s,l)):(this._y=0,this._z=Math.atan2(o,r));break;case"ZYX":this._y=Math.asin(-j(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(u,d),this._z=Math.atan2(o,r)):(this._x=0,this._z=Math.atan2(-s,l));break;case"YZX":this._z=Math.asin(j(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-c,l),this._y=Math.atan2(-h,r)):(this._x=0,this._y=Math.atan2(a,d));break;case"XZY":this._z=Math.asin(-j(s,-1,1)),Math.abs(s)<.9999999?(this._x=Math.atan2(u,l),this._y=Math.atan2(a,r)):(this._x=Math.atan2(-c,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,!0===n&&this._onChangeCallback(),this}setFromQuaternion(t,e,n){return ne.makeRotationFromQuaternion(t),this.setFromRotationMatrix(ne,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return ie.setFromEuler(this),this.setFromQuaternion(ie,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}}re.prototype.isEuler=!0,re.DefaultOrder="XYZ",re.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class se{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return 0!=(this.mask&t.mask)}isEnabled(t){return 0!=(this.mask&(1<<t|0))}}let ae=0;const oe=new vt,le=new gt,ce=new Yt,he=new vt,ue=new vt,de=new vt,pe=new gt,me=new vt(1,0,0),fe=new vt(0,1,0),ge=new vt(0,0,1),ve={type:"added"},ye={type:"removed"};class xe extends H{constructor(){super(),Object.defineProperty(this,"id",{value:ae++}),this.uuid=W(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=xe.DefaultUp.clone();const t=new vt,e=new re,n=new gt,i=new vt(1,1,1);e._onChange((function(){n.setFromEuler(e,!1)})),n._onChange((function(){e.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:i},modelViewMatrix:{value:new Yt},normalMatrix:{value:new J}}),this.matrix=new Yt,this.matrixWorld=new Yt,this.matrixAutoUpdate=xe.DefaultMatrixAutoUpdate,this.matrixWorldNeedsUpdate=!1,this.layers=new se,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return le.setFromAxisAngle(t,e),this.quaternion.multiply(le),this}rotateOnWorldAxis(t,e){return le.setFromAxisAngle(t,e),this.quaternion.premultiply(le),this}rotateX(t){return this.rotateOnAxis(me,t)}rotateY(t){return this.rotateOnAxis(fe,t)}rotateZ(t){return this.rotateOnAxis(ge,t)}translateOnAxis(t,e){return oe.copy(t).applyQuaternion(this.quaternion),this.position.add(oe.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(me,t)}translateY(t){return this.translateOnAxis(fe,t)}translateZ(t){return this.translateOnAxis(ge,t)}localToWorld(t){return t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return t.applyMatrix4(ce.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?he.copy(t):he.set(t,e,n);const i=this.parent;this.updateWorldMatrix(!0,!1),ue.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?ce.lookAt(ue,he,this.up):ce.lookAt(he,ue,this.up),this.quaternion.setFromRotationMatrix(ce),i&&(ce.extractRotation(i.matrixWorld),le.setFromRotationMatrix(ce),this.quaternion.premultiply(le.invert()))}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.add(arguments[t]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(null!==t.parent&&t.parent.remove(t),t.parent=this,this.children.push(t),t.dispatchEvent(ve)):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++)this.remove(arguments[t]);return this}const e=this.children.indexOf(t);return-1!==e&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(ye)),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){for(let t=0;t<this.children.length;t++){const e=this.children[t];e.parent=null,e.dispatchEvent(ye)}return this.children.length=0,this}attach(t){return this.updateWorldMatrix(!0,!1),ce.copy(this.matrixWorld).invert(),null!==t.parent&&(t.parent.updateWorldMatrix(!0,!1),ce.multiply(t.parent.matrixWorld)),t.applyMatrix4(ce),this.add(t),t.updateWorldMatrix(!1,!0),this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const i=this.children[n].getObjectByProperty(t,e);if(void 0!==i)return i}}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(ue,t,de),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(ue,pe,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverse(t)}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].traverseVisible(t)}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let n=0,i=e.length;n<i;n++)e[n].updateMatrixWorld(t)}updateWorldMatrix(t,e){const n=this.parent;if(!0===t&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),!0===e){const t=this.children;for(let e=0,n=t.length;e<n;e++)t[e].updateWorldMatrix(!1,!0)}}toJSON(t){const e=void 0===t||"string"==typeof t,n={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"});const i={};function r(e,n){return void 0===e[n.uuid]&&(e[n.uuid]=n.toJSON(t)),n.uuid}if(i.uuid=this.uuid,i.type=this.type,""!==this.name&&(i.name=this.name),!0===this.castShadow&&(i.castShadow=!0),!0===this.receiveShadow&&(i.receiveShadow=!0),!1===this.visible&&(i.visible=!1),!1===this.frustumCulled&&(i.frustumCulled=!1),0!==this.renderOrder&&(i.renderOrder=this.renderOrder),"{}"!==JSON.stringify(this.userData)&&(i.userData=this.userData),i.layers=this.layers.mask,i.matrix=this.matrix.toArray(),!1===this.matrixAutoUpdate&&(i.matrixAutoUpdate=!1),this.isInstancedMesh&&(i.type="InstancedMesh",i.count=this.count,i.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(i.instanceColor=this.instanceColor.toJSON())),this.isScene)this.background&&(this.background.isColor?i.background=this.background.toJSON():this.background.isTexture&&(i.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&(i.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(t.geometries,this.geometry);const e=this.geometry.parameters;if(void 0!==e&&void 0!==e.shapes){const n=e.shapes;if(Array.isArray(n))for(let e=0,i=n.length;e<i;e++){const i=n[e];r(t.shapes,i)}else r(t.shapes,n)}}if(this.isSkinnedMesh&&(i.bindMode=this.bindMode,i.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(r(t.skeletons,this.skeleton),i.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const e=[];for(let n=0,i=this.material.length;n<i;n++)e.push(r(t.materials,this.material[n]));i.material=e}else i.material=r(t.materials,this.material);if(this.children.length>0){i.children=[];for(let e=0;e<this.children.length;e++)i.children.push(this.children[e].toJSON(t).object)}if(this.animations.length>0){i.animations=[];for(let e=0;e<this.animations.length;e++){const n=this.animations[e];i.animations.push(r(t.animations,n))}}if(e){const e=s(t.geometries),i=s(t.materials),r=s(t.textures),a=s(t.images),o=s(t.shapes),l=s(t.skeletons),c=s(t.animations),h=s(t.nodes);e.length>0&&(n.geometries=e),i.length>0&&(n.materials=i),r.length>0&&(n.textures=r),a.length>0&&(n.images=a),o.length>0&&(n.shapes=o),l.length>0&&(n.skeletons=l),c.length>0&&(n.animations=c),h.length>0&&(n.nodes=h)}return n.object=i,n;function s(t){const e=[];for(const n in t){const i=t[n];delete i.metadata,e.push(i)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.userData=JSON.parse(JSON.stringify(t.userData)),!0===e)for(let e=0;e<t.children.length;e++){const n=t.children[e];this.add(n.clone())}return this}}xe.DefaultUp=new vt(0,1,0),xe.DefaultMatrixAutoUpdate=!0,xe.prototype.isObject3D=!0;const _e=new vt,we=new vt,be=new vt,Me=new vt,Se=new vt,Te=new vt,Ee=new vt,Ae=new vt,Pe=new vt,Re=new vt;class Ce{constructor(t=new vt,e=new vt,n=new vt){this.a=t,this.b=e,this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e),_e.subVectors(t,e),i.cross(_e);const r=i.lengthSq();return r>0?i.multiplyScalar(1/Math.sqrt(r)):i.set(0,0,0)}static getBarycoord(t,e,n,i,r){_e.subVectors(i,e),we.subVectors(n,e),be.subVectors(t,e);const s=_e.dot(_e),a=_e.dot(we),o=_e.dot(be),l=we.dot(we),c=we.dot(be),h=s*l-a*a;if(0===h)return r.set(-2,-1,-1);const u=1/h,d=(l*o-a*c)*u,p=(s*c-a*o)*u;return r.set(1-d-p,p,d)}static containsPoint(t,e,n,i){return this.getBarycoord(t,e,n,i,Me),Me.x>=0&&Me.y>=0&&Me.x+Me.y<=1}static getUV(t,e,n,i,r,s,a,o){return this.getBarycoord(t,e,n,i,Me),o.set(0,0),o.addScaledVector(r,Me.x),o.addScaledVector(s,Me.y),o.addScaledVector(a,Me.z),o}static isFrontFacing(t,e,n,i){return _e.subVectors(n,e),we.subVectors(t,e),_e.cross(we).dot(i)<0}set(t,e,n){return this.a.copy(t),this.b.copy(e),this.c.copy(n),this}setFromPointsAndIndices(t,e,n,i){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[i]),this}setFromAttributeAndIndices(t,e,n,i){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,n),this.c.fromBufferAttribute(t,i),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return _e.subVectors(this.c,this.b),we.subVectors(this.a,this.b),.5*_e.cross(we).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Ce.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return Ce.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,n,i,r){return Ce.getUV(t,this.a,this.b,this.c,e,n,i,r)}containsPoint(t){return Ce.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Ce.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,r=this.c;let s,a;Se.subVectors(i,n),Te.subVectors(r,n),Ae.subVectors(t,n);const o=Se.dot(Ae),l=Te.dot(Ae);if(o<=0&&l<=0)return e.copy(n);Pe.subVectors(t,i);const c=Se.dot(Pe),h=Te.dot(Pe);if(c>=0&&h<=c)return e.copy(i);const u=o*h-c*l;if(u<=0&&o>=0&&c<=0)return s=o/(o-c),e.copy(n).addScaledVector(Se,s);Re.subVectors(t,r);const d=Se.dot(Re),p=Te.dot(Re);if(p>=0&&d<=p)return e.copy(r);const m=d*l-o*p;if(m<=0&&l>=0&&p<=0)return a=l/(l-p),e.copy(n).addScaledVector(Te,a);const f=c*p-d*h;if(f<=0&&h-c>=0&&d-p>=0)return Ee.subVectors(r,i),a=(h-c)/(h-c+(d-p)),e.copy(i).addScaledVector(Ee,a);const g=1/(f+m+u);return s=m*g,a=u*g,e.copy(n).addScaledVector(Se,s).addScaledVector(Te,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let Le=0;class De extends H{constructor(){super(),Object.defineProperty(this,"id",{value:Le++}),this.uuid=W(),this.name="",this.type="Material",this.fog=!0,this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.blendSrc=i,this.blendDst=r,this.blendEquation=e,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=N,this.stencilZFail=N,this.stencilZPass=N,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const n=t[e];if(void 0===n){console.warn("THREE.Material: '"+e+"' parameter is undefined.");continue}if("shading"===e){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===n;continue}const i=this[e];void 0!==i?i&&i.isColor?i.set(n):i&&i.isVector3&&n&&n.isVector3?i.copy(n):this[e]=n:console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.")}}toJSON(t){const e=void 0===t||"string"==typeof t;e&&(t={textures:{},images:{}});const n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};function i(t){const e=[];for(const n in t){const i=t[n];delete i.metadata,e.push(i)}return e}if(n.uuid=this.uuid,n.type=this.type,""!==this.name&&(n.name=this.name),this.color&&this.color.isColor&&(n.color=this.color.getHex()),void 0!==this.roughness&&(n.roughness=this.roughness),void 0!==this.metalness&&(n.metalness=this.metalness),void 0!==this.sheen&&(n.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(n.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(n.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(n.emissive=this.emissive.getHex()),this.emissiveIntensity&&1!==this.emissiveIntensity&&(n.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(n.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(n.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(n.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(n.shininess=this.shininess),void 0!==this.clearcoat&&(n.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(n.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.map&&this.map.isTexture&&(n.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(n.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(n.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(n.lightMap=this.lightMap.toJSON(t).uuid,n.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(n.aoMap=this.aoMap.toJSON(t).uuid,n.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(n.bumpMap=this.bumpMap.toJSON(t).uuid,n.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(n.normalMap=this.normalMap.toJSON(t).uuid,n.normalMapType=this.normalMapType,n.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(n.displacementMap=this.displacementMap.toJSON(t).uuid,n.displacementScale=this.displacementScale,n.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(n.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(n.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(n.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(n.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(n.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(n.envMap=this.envMap.toJSON(t).uuid,void 0!==this.combine&&(n.combine=this.combine)),void 0!==this.envMapIntensity&&(n.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(n.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(n.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(n.gradientMap=this.gradientMap.toJSON(t).uuid),void 0!==this.transmission&&(n.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(n.transmissionMap=this.transmissionMap.toJSON(t).uuid),void 0!==this.thickness&&(n.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(n.thicknessMap=this.thicknessMap.toJSON(t).uuid),void 0!==this.attenuationDistance&&(n.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(n.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(n.size=this.size),null!==this.shadowSide&&(n.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(n.sizeAttenuation=this.sizeAttenuation),1!==this.blending&&(n.blending=this.blending),0!==this.side&&(n.side=this.side),this.vertexColors&&(n.vertexColors=!0),this.opacity<1&&(n.opacity=this.opacity),!0===this.transparent&&(n.transparent=this.transparent),n.depthFunc=this.depthFunc,n.depthTest=this.depthTest,n.depthWrite=this.depthWrite,n.colorWrite=this.colorWrite,n.stencilWrite=this.stencilWrite,n.stencilWriteMask=this.stencilWriteMask,n.stencilFunc=this.stencilFunc,n.stencilRef=this.stencilRef,n.stencilFuncMask=this.stencilFuncMask,n.stencilFail=this.stencilFail,n.stencilZFail=this.stencilZFail,n.stencilZPass=this.stencilZPass,void 0!==this.rotation&&0!==this.rotation&&(n.rotation=this.rotation),!0===this.polygonOffset&&(n.polygonOffset=!0),0!==this.polygonOffsetFactor&&(n.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(n.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(n.linewidth=this.linewidth),void 0!==this.dashSize&&(n.dashSize=this.dashSize),void 0!==this.gapSize&&(n.gapSize=this.gapSize),void 0!==this.scale&&(n.scale=this.scale),!0===this.dithering&&(n.dithering=!0),this.alphaTest>0&&(n.alphaTest=this.alphaTest),!0===this.alphaToCoverage&&(n.alphaToCoverage=this.alphaToCoverage),!0===this.premultipliedAlpha&&(n.premultipliedAlpha=this.premultipliedAlpha),!0===this.wireframe&&(n.wireframe=this.wireframe),this.wireframeLinewidth>1&&(n.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(n.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(n.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(n.flatShading=this.flatShading),!1===this.visible&&(n.visible=!1),!1===this.toneMapped&&(n.toneMapped=!1),"{}"!==JSON.stringify(this.userData)&&(n.userData=this.userData),e){const e=i(t.textures),r=i(t.images);e.length>0&&(n.textures=e),r.length>0&&(n.images=r)}return n}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name,this.fog=t.fog,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(null!==e){const t=e.length;n=new Array(t);for(let i=0;i!==t;++i)n[i]=e[i].clone()}return this.clippingPlanes=n,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){!0===t&&this.version++}}De.prototype.isMaterial=!0,De.fromType=function(){return null};class Ie extends De{constructor(t){super(),this.type="MeshBasicMaterial",this.color=new st(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}Ie.prototype.isMeshBasicMaterial=!0;const ze=new vt,Ne=new Z;class Oe{constructor(t,e,n){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=!0===n,this.usage=O,this.updateRange={offset:0,count:-1},this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}copyColorsArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i),r=new st),e[n++]=r.r,e[n++]=r.g,e[n++]=r.b}return this}copyVector2sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i),r=new Z),e[n++]=r.x,e[n++]=r.y}return this}copyVector3sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i),r=new vt),e[n++]=r.x,e[n++]=r.y,e[n++]=r.z}return this}copyVector4sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];void 0===r&&(console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i),r=new dt),e[n++]=r.x,e[n++]=r.y,e[n++]=r.z,e[n++]=r.w}return this}applyMatrix3(t){if(2===this.itemSize)for(let e=0,n=this.count;e<n;e++)Ne.fromBufferAttribute(this,e),Ne.applyMatrix3(t),this.setXY(e,Ne.x,Ne.y);else if(3===this.itemSize)for(let e=0,n=this.count;e<n;e++)ze.fromBufferAttribute(this,e),ze.applyMatrix3(t),this.setXYZ(e,ze.x,ze.y,ze.z);return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++)ze.x=this.getX(e),ze.y=this.getY(e),ze.z=this.getZ(e),ze.applyMatrix4(t),this.setXYZ(e,ze.x,ze.y,ze.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)ze.x=this.getX(e),ze.y=this.getY(e),ze.z=this.getZ(e),ze.applyNormalMatrix(t),this.setXYZ(e,ze.x,ze.y,ze.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)ze.x=this.getX(e),ze.y=this.getY(e),ze.z=this.getZ(e),ze.transformDirection(t),this.setXYZ(e,ze.x,ze.y,ze.z);return this}set(t,e=0){return this.array.set(t,e),this}getX(t){return this.array[t*this.itemSize]}setX(t,e){return this.array[t*this.itemSize]=e,this}getY(t){return this.array[t*this.itemSize+1]}setY(t,e){return this.array[t*this.itemSize+1]=e,this}getZ(t){return this.array[t*this.itemSize+2]}setZ(t,e){return this.array[t*this.itemSize+2]=e,this}getW(t){return this.array[t*this.itemSize+3]}setW(t,e){return this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,i){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this}setXYZW(t,e,n,i,r){return t*=this.itemSize,this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=i,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};return""!==this.name&&(t.name=this.name),this.usage!==O&&(t.usage=this.usage),0===this.updateRange.offset&&-1===this.updateRange.count||(t.updateRange=this.updateRange),t}}Oe.prototype.isBufferAttribute=!0;class Fe extends Oe{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class Ue extends Oe{constructor(t,e,n){super(new Uint32Array(t),e,n)}}(class extends Oe{constructor(t,e,n){super(new Uint16Array(t),e,n)}}).prototype.isFloat16BufferAttribute=!0;class Be extends Oe{constructor(t,e,n){super(new Float32Array(t),e,n)}}let He=0;const Ge=new Yt,ke=new xe,Ve=new vt,We=new _t,je=new _t,qe=new vt;class Xe extends H{constructor(){super(),Object.defineProperty(this,"id",{value:He++}),this.uuid=W(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(K(t)?Ue:Fe)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(void 0!==n){const e=(new J).getNormalMatrix(t);n.applyNormalMatrix(e),n.needsUpdate=!0}const i=this.attributes.tangent;return void 0!==i&&(i.transformDirection(t),i.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(t){return Ge.makeRotationFromQuaternion(t),this.applyMatrix4(Ge),this}rotateX(t){return Ge.makeRotationX(t),this.applyMatrix4(Ge),this}rotateY(t){return Ge.makeRotationY(t),this.applyMatrix4(Ge),this}rotateZ(t){return Ge.makeRotationZ(t),this.applyMatrix4(Ge),this}translate(t,e,n){return Ge.makeTranslation(t,e,n),this.applyMatrix4(Ge),this}scale(t,e,n){return Ge.makeScale(t,e,n),this.applyMatrix4(Ge),this}lookAt(t){return ke.lookAt(t),ke.updateMatrix(),this.applyMatrix4(ke.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Ve).negate(),this.translate(Ve.x,Ve.y,Ve.z),this}setFromPoints(t){const e=[];for(let n=0,i=t.length;n<i;n++){const i=t[n];e.push(i.x,i.y,i.z||0)}return this.setAttribute("position",new Be(e,3)),this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new _t);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingBox.set(new vt(-1/0,-1/0,-1/0),new vt(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){const n=e[t];We.setFromBufferAttribute(n),this.morphTargetsRelative?(qe.addVectors(this.boundingBox.min,We.min),this.boundingBox.expandByPoint(qe),qe.addVectors(this.boundingBox.max,We.max),this.boundingBox.expandByPoint(qe)):(this.boundingBox.expandByPoint(We.min),this.boundingBox.expandByPoint(We.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new Bt);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this),void this.boundingSphere.set(new vt,1/0);if(t){const n=this.boundingSphere.center;if(We.setFromBufferAttribute(t),e)for(let t=0,n=e.length;t<n;t++){const n=e[t];je.setFromBufferAttribute(n),this.morphTargetsRelative?(qe.addVectors(We.min,je.min),We.expandByPoint(qe),qe.addVectors(We.max,je.max),We.expandByPoint(qe)):(We.expandByPoint(je.min),We.expandByPoint(je.max))}We.getCenter(n);let i=0;for(let e=0,r=t.count;e<r;e++)qe.fromBufferAttribute(t,e),i=Math.max(i,n.distanceToSquared(qe));if(e)for(let r=0,s=e.length;r<s;r++){const s=e[r],a=this.morphTargetsRelative;for(let e=0,r=s.count;e<r;e++)qe.fromBufferAttribute(s,e),a&&(Ve.fromBufferAttribute(t,e),qe.add(Ve)),i=Math.max(i,n.distanceToSquared(qe))}this.boundingSphere.radius=Math.sqrt(i),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const n=t.array,i=e.position.array,r=e.normal.array,s=e.uv.array,a=i.length/3;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new Oe(new Float32Array(4*a),4));const o=this.getAttribute("tangent").array,l=[],c=[];for(let t=0;t<a;t++)l[t]=new vt,c[t]=new vt;const h=new vt,u=new vt,d=new vt,p=new Z,m=new Z,f=new Z,g=new vt,v=new vt;function y(t,e,n){h.fromArray(i,3*t),u.fromArray(i,3*e),d.fromArray(i,3*n),p.fromArray(s,2*t),m.fromArray(s,2*e),f.fromArray(s,2*n),u.sub(h),d.sub(h),m.sub(p),f.sub(p);const r=1/(m.x*f.y-f.x*m.y);isFinite(r)&&(g.copy(u).multiplyScalar(f.y).addScaledVector(d,-m.y).multiplyScalar(r),v.copy(d).multiplyScalar(m.x).addScaledVector(u,-f.x).multiplyScalar(r),l[t].add(g),l[e].add(g),l[n].add(g),c[t].add(v),c[e].add(v),c[n].add(v))}let x=this.groups;0===x.length&&(x=[{start:0,count:n.length}]);for(let t=0,e=x.length;t<e;++t){const e=x[t],i=e.start;for(let t=i,r=i+e.count;t<r;t+=3)y(n[t+0],n[t+1],n[t+2])}const _=new vt,w=new vt,b=new vt,M=new vt;function S(t){b.fromArray(r,3*t),M.copy(b);const e=l[t];_.copy(e),_.sub(b.multiplyScalar(b.dot(e))).normalize(),w.crossVectors(M,e);const n=w.dot(c[t])<0?-1:1;o[4*t]=_.x,o[4*t+1]=_.y,o[4*t+2]=_.z,o[4*t+3]=n}for(let t=0,e=x.length;t<e;++t){const e=x[t],i=e.start;for(let t=i,r=i+e.count;t<r;t+=3)S(n[t+0]),S(n[t+1]),S(n[t+2])}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(void 0!==e){let n=this.getAttribute("normal");if(void 0===n)n=new Oe(new Float32Array(3*e.count),3),this.setAttribute("normal",n);else for(let t=0,e=n.count;t<e;t++)n.setXYZ(t,0,0,0);const i=new vt,r=new vt,s=new vt,a=new vt,o=new vt,l=new vt,c=new vt,h=new vt;if(t)for(let u=0,d=t.count;u<d;u+=3){const d=t.getX(u+0),p=t.getX(u+1),m=t.getX(u+2);i.fromBufferAttribute(e,d),r.fromBufferAttribute(e,p),s.fromBufferAttribute(e,m),c.subVectors(s,r),h.subVectors(i,r),c.cross(h),a.fromBufferAttribute(n,d),o.fromBufferAttribute(n,p),l.fromBufferAttribute(n,m),a.add(c),o.add(c),l.add(c),n.setXYZ(d,a.x,a.y,a.z),n.setXYZ(p,o.x,o.y,o.z),n.setXYZ(m,l.x,l.y,l.z)}else for(let t=0,a=e.count;t<a;t+=3)i.fromBufferAttribute(e,t+0),r.fromBufferAttribute(e,t+1),s.fromBufferAttribute(e,t+2),c.subVectors(s,r),h.subVectors(i,r),c.cross(h),n.setXYZ(t+0,c.x,c.y,c.z),n.setXYZ(t+1,c.x,c.y,c.z),n.setXYZ(t+2,c.x,c.y,c.z);this.normalizeNormals(),n.needsUpdate=!0}}merge(t,e){if(!t||!t.isBufferGeometry)return void console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t);void 0===e&&(e=0,console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge."));const n=this.attributes;for(const i in n){if(void 0===t.attributes[i])continue;const r=n[i].array,s=t.attributes[i],a=s.array,o=s.itemSize*e,l=Math.min(a.length,r.length-o);for(let t=0,e=o;t<l;t++,e++)r[e]=a[t]}return this}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++)qe.fromBufferAttribute(t,e),qe.normalize(),t.setXYZ(e,qe.x,qe.y,qe.z)}toNonIndexed(){function t(t,e){const n=t.array,i=t.itemSize,r=t.normalized,s=new n.constructor(e.length*i);let a=0,o=0;for(let r=0,l=e.length;r<l;r++){a=t.isInterleavedBufferAttribute?e[r]*t.data.stride+t.offset:e[r]*i;for(let t=0;t<i;t++)s[o++]=n[a++]}return new Oe(s,i,r)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new Xe,n=this.index.array,i=this.attributes;for(const r in i){const s=t(i[r],n);e.setAttribute(r,s)}const r=this.morphAttributes;for(const i in r){const s=[],a=r[i];for(let e=0,i=a.length;e<i;e++){const i=t(a[e],n);s.push(i)}e.morphAttributes[i]=s}e.morphTargetsRelative=this.morphTargetsRelative;const s=this.groups;for(let t=0,n=s.length;t<n;t++){const n=s[t];e.addGroup(n.start,n.count,n.materialIndex)}return e}toJSON(){const t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,""!==this.name&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),void 0!==this.parameters){const e=this.parameters;for(const n in e)void 0!==e[n]&&(t[n]=e[n]);return t}t.data={attributes:{}};const e=this.index;null!==e&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const n=this.attributes;for(const e in n){const i=n[e];t.data.attributes[e]=i.toJSON(t.data)}const i={};let r=!1;for(const e in this.morphAttributes){const n=this.morphAttributes[e],s=[];for(let e=0,i=n.length;e<i;e++){const i=n[e];s.push(i.toJSON(t.data))}s.length>0&&(i[e]=s,r=!0)}r&&(t.data.morphAttributes=i,t.data.morphTargetsRelative=this.morphTargetsRelative);const s=this.groups;s.length>0&&(t.data.groups=JSON.parse(JSON.stringify(s)));const a=this.boundingSphere;return null!==a&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return(new this.constructor).copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;null!==n&&this.setIndex(n.clone(e));const i=t.attributes;for(const t in i){const n=i[t];this.setAttribute(t,n.clone(e))}const r=t.morphAttributes;for(const t in r){const n=[],i=r[t];for(let t=0,r=i.length;t<r;t++)n.push(i[t].clone(e));this.morphAttributes[t]=n}this.morphTargetsRelative=t.morphTargetsRelative;const s=t.groups;for(let t=0,e=s.length;t<e;t++){const e=s[t];this.addGroup(e.start,e.count,e.materialIndex)}const a=t.boundingBox;null!==a&&(this.boundingBox=a.clone());const o=t.boundingSphere;return null!==o&&(this.boundingSphere=o.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,void 0!==t.parameters&&(this.parameters=Object.assign({},t.parameters)),this}dispose(){this.dispatchEvent({type:"dispose"})}}Xe.prototype.isBufferGeometry=!0;const Ye=new Yt,Ze=new Xt,Je=new Bt,Ke=new vt,Qe=new vt,$e=new vt,tn=new vt,en=new vt,nn=new vt,rn=new vt,sn=new vt,an=new vt,on=new Z,ln=new Z,cn=new Z,hn=new vt,un=new vt;class dn extends xe{constructor(t=new Xe,e=new Ie){super(),this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),void 0!==t.morphTargetInfluences&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),void 0!==t.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}raycast(t,e){const n=this.geometry,i=this.material,r=this.matrixWorld;if(void 0===i)return;if(null===n.boundingSphere&&n.computeBoundingSphere(),Je.copy(n.boundingSphere),Je.applyMatrix4(r),!1===t.ray.intersectsSphere(Je))return;if(Ye.copy(r).invert(),Ze.copy(t.ray).applyMatrix4(Ye),null!==n.boundingBox&&!1===Ze.intersectsBox(n.boundingBox))return;let s;if(n.isBufferGeometry){const r=n.index,a=n.attributes.position,o=n.morphAttributes.position,l=n.morphTargetsRelative,c=n.attributes.uv,h=n.attributes.uv2,u=n.groups,d=n.drawRange;if(null!==r)if(Array.isArray(i))for(let n=0,p=u.length;n<p;n++){const p=u[n],m=i[p.materialIndex];for(let n=Math.max(p.start,d.start),i=Math.min(r.count,Math.min(p.start+p.count,d.start+d.count));n<i;n+=3){const i=r.getX(n),u=r.getX(n+1),d=r.getX(n+2);s=pn(this,m,t,Ze,a,o,l,c,h,i,u,d),s&&(s.faceIndex=Math.floor(n/3),s.face.materialIndex=p.materialIndex,e.push(s))}}else for(let n=Math.max(0,d.start),u=Math.min(r.count,d.start+d.count);n<u;n+=3){const u=r.getX(n),d=r.getX(n+1),p=r.getX(n+2);s=pn(this,i,t,Ze,a,o,l,c,h,u,d,p),s&&(s.faceIndex=Math.floor(n/3),e.push(s))}else if(void 0!==a)if(Array.isArray(i))for(let n=0,r=u.length;n<r;n++){const r=u[n],p=i[r.materialIndex];for(let n=Math.max(r.start,d.start),i=Math.min(a.count,Math.min(r.start+r.count,d.start+d.count));n<i;n+=3)s=pn(this,p,t,Ze,a,o,l,c,h,n,n+1,n+2),s&&(s.faceIndex=Math.floor(n/3),s.face.materialIndex=r.materialIndex,e.push(s))}else for(let n=Math.max(0,d.start),r=Math.min(a.count,d.start+d.count);n<r;n+=3)s=pn(this,i,t,Ze,a,o,l,c,h,n,n+1,n+2),s&&(s.faceIndex=Math.floor(n/3),e.push(s))}else n.isGeometry&&console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}function pn(t,e,n,i,r,s,a,o,l,c,h,u){Ke.fromBufferAttribute(r,c),Qe.fromBufferAttribute(r,h),$e.fromBufferAttribute(r,u);const d=t.morphTargetInfluences;if(s&&d){rn.set(0,0,0),sn.set(0,0,0),an.set(0,0,0);for(let t=0,e=s.length;t<e;t++){const e=d[t],n=s[t];0!==e&&(tn.fromBufferAttribute(n,c),en.fromBufferAttribute(n,h),nn.fromBufferAttribute(n,u),a?(rn.addScaledVector(tn,e),sn.addScaledVector(en,e),an.addScaledVector(nn,e)):(rn.addScaledVector(tn.sub(Ke),e),sn.addScaledVector(en.sub(Qe),e),an.addScaledVector(nn.sub($e),e)))}Ke.add(rn),Qe.add(sn),$e.add(an)}t.isSkinnedMesh&&(t.boneTransform(c,Ke),t.boneTransform(h,Qe),t.boneTransform(u,$e));const p=function(t,e,n,i,r,s,a,o){let l;if(l=1===e.side?i.intersectTriangle(a,s,r,!0,o):i.intersectTriangle(r,s,a,2!==e.side,o),null===l)return null;un.copy(o),un.applyMatrix4(t.matrixWorld);const c=n.ray.origin.distanceTo(un);return c<n.near||c>n.far?null:{distance:c,point:un.clone(),object:t}}(t,e,n,i,Ke,Qe,$e,hn);if(p){o&&(on.fromBufferAttribute(o,c),ln.fromBufferAttribute(o,h),cn.fromBufferAttribute(o,u),p.uv=Ce.getUV(hn,Ke,Qe,$e,on,ln,cn,new Z)),l&&(on.fromBufferAttribute(l,c),ln.fromBufferAttribute(l,h),cn.fromBufferAttribute(l,u),p.uv2=Ce.getUV(hn,Ke,Qe,$e,on,ln,cn,new Z));const t={a:c,b:h,c:u,normal:new vt,materialIndex:0};Ce.getNormal(Ke,Qe,$e,t.normal),p.face=t}return p}dn.prototype.isMesh=!0;class mn extends Xe{constructor(t=1,e=1,n=1,i=1,r=1,s=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:r,depthSegments:s};const a=this;i=Math.floor(i),r=Math.floor(r),s=Math.floor(s);const o=[],l=[],c=[],h=[];let u=0,d=0;function p(t,e,n,i,r,s,p,m,f,g,v){const y=s/f,x=p/g,_=s/2,w=p/2,b=m/2,M=f+1,S=g+1;let T=0,E=0;const A=new vt;for(let s=0;s<S;s++){const a=s*x-w;for(let o=0;o<M;o++){const u=o*y-_;A[t]=u*i,A[e]=a*r,A[n]=b,l.push(A.x,A.y,A.z),A[t]=0,A[e]=0,A[n]=m>0?1:-1,c.push(A.x,A.y,A.z),h.push(o/f),h.push(1-s/g),T+=1}}for(let t=0;t<g;t++)for(let e=0;e<f;e++){const n=u+e+M*t,i=u+e+M*(t+1),r=u+(e+1)+M*(t+1),s=u+(e+1)+M*t;o.push(n,i,s),o.push(i,r,s),E+=6}a.addGroup(d,E,v),d+=E,u+=T}p("z","y","x",-1,-1,n,e,t,s,r,0),p("z","y","x",1,-1,n,e,-t,s,r,1),p("x","z","y",1,1,t,n,e,i,s,2),p("x","z","y",1,-1,t,n,-e,i,s,3),p("x","y","z",1,-1,t,e,n,i,r,4),p("x","y","z",-1,-1,t,e,-n,i,r,5),this.setIndex(o),this.setAttribute("position",new Be(l,3)),this.setAttribute("normal",new Be(c,3)),this.setAttribute("uv",new Be(h,2))}static fromJSON(t){return new mn(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function fn(t){const e={};for(const n in t){e[n]={};for(const i in t[n]){const r=t[n][i];r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)?e[n][i]=r.clone():Array.isArray(r)?e[n][i]=r.slice():e[n][i]=r}}return e}function gn(t){const e={};for(let n=0;n<t.length;n++){const i=fn(t[n]);for(const t in i)e[t]=i[t]}return e}const vn={clone:fn,merge:gn};class yn extends De{constructor(t){super(),this.type="ShaderMaterial",this.defines={},this.uniforms={},this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.extensions={derivatives:!1,fragDepth:!1,drawBuffers:!1,shaderTextureLOD:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&(void 0!==t.attributes&&console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead."),this.setValues(t))}copy(t){return super.copy(t),this.fragmentShader=t.fragmentShader,this.vertexShader=t.vertexShader,this.uniforms=fn(t.uniforms),this.defines=Object.assign({},t.defines),this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.lights=t.lights,this.clipping=t.clipping,this.extensions=Object.assign({},t.extensions),this.glslVersion=t.glslVersion,this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion,e.uniforms={};for(const n in this.uniforms){const i=this.uniforms[n].value;i&&i.isTexture?e.uniforms[n]={type:"t",value:i.toJSON(t).uuid}:i&&i.isColor?e.uniforms[n]={type:"c",value:i.getHex()}:i&&i.isVector2?e.uniforms[n]={type:"v2",value:i.toArray()}:i&&i.isVector3?e.uniforms[n]={type:"v3",value:i.toArray()}:i&&i.isVector4?e.uniforms[n]={type:"v4",value:i.toArray()}:i&&i.isMatrix3?e.uniforms[n]={type:"m3",value:i.toArray()}:i&&i.isMatrix4?e.uniforms[n]={type:"m4",value:i.toArray()}:e.uniforms[n]={value:i}}Object.keys(this.defines).length>0&&(e.defines=this.defines),e.vertexShader=this.vertexShader,e.fragmentShader=this.fragmentShader;const n={};for(const t in this.extensions)!0===this.extensions[t]&&(n[t]=!0);return Object.keys(n).length>0&&(e.extensions=n),e}}yn.prototype.isShaderMaterial=!0;class xn extends xe{constructor(){super(),this.type="Camera",this.matrixWorldInverse=new Yt,this.projectionMatrix=new Yt,this.projectionMatrixInverse=new Yt}copy(t,e){return super.copy(t,e),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}xn.prototype.isCamera=!0;class _n extends xn{constructor(t=50,e=1,n=.1,i=2e3){super(),this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=i,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.fov=t.fov,this.zoom=t.zoom,this.near=t.near,this.far=t.far,this.focus=t.focus,this.aspect=t.aspect,this.view=null===t.view?null:Object.assign({},t.view),this.filmGauge=t.filmGauge,this.filmOffset=t.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*V*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*k*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*V*Math.atan(Math.tan(.5*k*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,n,i,r,s){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*k*this.fov)/this.zoom,n=2*e,i=this.aspect*n,r=-.5*i;const s=this.view;if(null!==this.view&&this.view.enabled){const t=s.fullWidth,a=s.fullHeight;r+=s.offsetX*i/t,e-=s.offsetY*n/a,i*=s.width/t,n*=s.height/a}const a=this.filmOffset;0!==a&&(r+=t*a/this.getFilmWidth()),this.projectionMatrix.makePerspective(r,r+i,e,e-n,t,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.fov=this.fov,e.object.zoom=this.zoom,e.object.near=this.near,e.object.far=this.far,e.object.focus=this.focus,e.object.aspect=this.aspect,null!==this.view&&(e.object.view=Object.assign({},this.view)),e.object.filmGauge=this.filmGauge,e.object.filmOffset=this.filmOffset,e}}_n.prototype.isPerspectiveCamera=!0;const wn=90;class bn extends xe{constructor(t,e,n){if(super(),this.type="CubeCamera",!0!==n.isWebGLCubeRenderTarget)return void console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");this.renderTarget=n;const i=new _n(wn,1,t,e);i.layers=this.layers,i.up.set(0,-1,0),i.lookAt(new vt(1,0,0)),this.add(i);const r=new _n(wn,1,t,e);r.layers=this.layers,r.up.set(0,-1,0),r.lookAt(new vt(-1,0,0)),this.add(r);const s=new _n(wn,1,t,e);s.layers=this.layers,s.up.set(0,0,1),s.lookAt(new vt(0,1,0)),this.add(s);const a=new _n(wn,1,t,e);a.layers=this.layers,a.up.set(0,0,-1),a.lookAt(new vt(0,-1,0)),this.add(a);const o=new _n(wn,1,t,e);o.layers=this.layers,o.up.set(0,-1,0),o.lookAt(new vt(0,0,1)),this.add(o);const l=new _n(wn,1,t,e);l.layers=this.layers,l.up.set(0,-1,0),l.lookAt(new vt(0,0,-1)),this.add(l)}update(t,e){null===this.parent&&this.updateMatrixWorld();const n=this.renderTarget,[i,r,s,a,o,l]=this.children,c=t.xr.enabled,h=t.getRenderTarget();t.xr.enabled=!1;const u=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0),t.render(e,i),t.setRenderTarget(n,1),t.render(e,r),t.setRenderTarget(n,2),t.render(e,s),t.setRenderTarget(n,3),t.render(e,a),t.setRenderTarget(n,4),t.render(e,o),n.texture.generateMipmaps=u,t.setRenderTarget(n,5),t.render(e,l),t.setRenderTarget(h),t.xr.enabled=c,n.texture.needsPMREMUpdate=!0}}class Mn extends ut{constructor(t,e,n,i,r,a,o,l,c,h){super(t=void 0!==t?t:[],e=void 0!==e?e:s,n,i,r,a,o,l,c,h),this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}Mn.prototype.isCubeTexture=!0;class Sn extends pt{constructor(t,e={}){super(t,t,e);const n={width:t,height:t,depth:1},i=[n,n,n,n,n,n];this.texture=new Mn(i,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:d}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.format=_,this.texture.encoding=e.encoding,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={tEquirect:{value:null}},i="\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",r="\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t",s=new mn(5,5,5),a=new yn({name:"CubemapFromEquirect",uniforms:fn(n),vertexShader:i,fragmentShader:r,side:1,blending:0});a.uniforms.tEquirect.value=e;const o=new dn(s,a),l=e.minFilter;return e.minFilter===p&&(e.minFilter=d),new bn(1,10,this).update(t,o),e.minFilter=l,o.geometry.dispose(),o.material.dispose(),this}clear(t,e,n,i){const r=t.getRenderTarget();for(let r=0;r<6;r++)t.setRenderTarget(this,r),t.clear(e,n,i);t.setRenderTarget(r)}}Sn.prototype.isWebGLCubeRenderTarget=!0;const Tn=new vt,En=new vt,An=new J;class Pn{constructor(t=new vt(1,0,0),e=0){this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,i){return this.normal.set(t,e,n),this.constant=i,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,n){const i=Tn.subVectors(n,e).cross(En.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(i,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){const n=t.delta(Tn),i=this.normal.dot(n);if(0===i)return 0===this.distanceToPoint(t.start)?e.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/i;return r<0||r>1?null:e.copy(n).multiplyScalar(r).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start),n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||An.getNormalMatrix(t),i=this.coplanarPoint(Tn).applyMatrix4(t),r=this.normal.applyMatrix3(n).normalize();return this.constant=-i.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}Pn.prototype.isPlane=!0;const Rn=new Bt,Cn=new vt;class Ln{constructor(t=new Pn,e=new Pn,n=new Pn,i=new Pn,r=new Pn,s=new Pn){this.planes=[t,e,n,i,r,s]}set(t,e,n,i,r,s){const a=this.planes;return a[0].copy(t),a[1].copy(e),a[2].copy(n),a[3].copy(i),a[4].copy(r),a[5].copy(s),this}copy(t){const e=this.planes;for(let n=0;n<6;n++)e[n].copy(t.planes[n]);return this}setFromProjectionMatrix(t){const e=this.planes,n=t.elements,i=n[0],r=n[1],s=n[2],a=n[3],o=n[4],l=n[5],c=n[6],h=n[7],u=n[8],d=n[9],p=n[10],m=n[11],f=n[12],g=n[13],v=n[14],y=n[15];return e[0].setComponents(a-i,h-o,m-u,y-f).normalize(),e[1].setComponents(a+i,h+o,m+u,y+f).normalize(),e[2].setComponents(a+r,h+l,m+d,y+g).normalize(),e[3].setComponents(a-r,h-l,m-d,y-g).normalize(),e[4].setComponents(a-s,h-c,m-p,y-v).normalize(),e[5].setComponents(a+s,h+c,m+p,y+v).normalize(),this}intersectsObject(t){const e=t.geometry;return null===e.boundingSphere&&e.computeBoundingSphere(),Rn.copy(e.boundingSphere).applyMatrix4(t.matrixWorld),this.intersectsSphere(Rn)}intersectsSprite(t){return Rn.center.set(0,0,0),Rn.radius=.7071067811865476,Rn.applyMatrix4(t.matrixWorld),this.intersectsSphere(Rn)}intersectsSphere(t){const e=this.planes,n=t.center,i=-t.radius;for(let t=0;t<6;t++)if(e[t].distanceToPoint(n)<i)return!1;return!0}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];if(Cn.x=i.normal.x>0?t.max.x:t.min.x,Cn.y=i.normal.y>0?t.max.y:t.min.y,Cn.z=i.normal.z>0?t.max.z:t.min.z,i.distanceToPoint(Cn)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++)if(e[n].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function Dn(){let t=null,e=!1,n=null,i=null;function r(e,s){n(e,s),i=t.requestAnimationFrame(r)}return{start:function(){!0!==e&&null!==n&&(i=t.requestAnimationFrame(r),e=!0)},stop:function(){t.cancelAnimationFrame(i),e=!1},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function In(t,e){const n=e.isWebGL2,i=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),i.get(t)},remove:function(e){e.isInterleavedBufferAttribute&&(e=e.data);const n=i.get(e);n&&(t.deleteBuffer(n.buffer),i.delete(e))},update:function(e,r){if(e.isGLBufferAttribute){const t=i.get(e);return void((!t||t.version<e.version)&&i.set(e,{buffer:e.buffer,type:e.type,bytesPerElement:e.elementSize,version:e.version}))}e.isInterleavedBufferAttribute&&(e=e.data);const s=i.get(e);void 0===s?i.set(e,function(e,i){const r=e.array,s=e.usage,a=t.createBuffer();let o;if(t.bindBuffer(i,a),t.bufferData(i,r,s),e.onUploadCallback(),r instanceof Float32Array)o=5126;else if(r instanceof Uint16Array)if(e.isFloat16BufferAttribute){if(!n)throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.");o=5131}else o=5123;else if(r instanceof Int16Array)o=5122;else if(r instanceof Uint32Array)o=5125;else if(r instanceof Int32Array)o=5124;else if(r instanceof Int8Array)o=5120;else if(r instanceof Uint8Array)o=5121;else{if(!(r instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+r);o=5121}return{buffer:a,type:o,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version}}(e,r)):s.version<e.version&&(function(e,i,r){const s=i.array,a=i.updateRange;t.bindBuffer(r,e),-1===a.count?t.bufferSubData(r,0,s):(n?t.bufferSubData(r,a.offset*s.BYTES_PER_ELEMENT,s,a.offset,a.count):t.bufferSubData(r,a.offset*s.BYTES_PER_ELEMENT,s.subarray(a.offset,a.offset+a.count)),a.count=-1)}(s.buffer,e,r),s.version=e.version)}}}class zn extends Xe{constructor(t=1,e=1,n=1,i=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};const r=t/2,s=e/2,a=Math.floor(n),o=Math.floor(i),l=a+1,c=o+1,h=t/a,u=e/o,d=[],p=[],m=[],f=[];for(let t=0;t<c;t++){const e=t*u-s;for(let n=0;n<l;n++){const i=n*h-r;p.push(i,-e,0),m.push(0,0,1),f.push(n/a),f.push(1-t/o)}}for(let t=0;t<o;t++)for(let e=0;e<a;e++){const n=e+l*t,i=e+l*(t+1),r=e+1+l*(t+1),s=e+1+l*t;d.push(n,i,s),d.push(i,r,s)}this.setIndex(d),this.setAttribute("position",new Be(p,3)),this.setAttribute("normal",new Be(m,3)),this.setAttribute("uv",new Be(f,2))}static fromJSON(t){return new zn(t.width,t.height,t.widthSegments,t.heightSegments)}}const Nn={alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",begin_vertex:"vec3 transformed = vec3( position );",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",encodings_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",encodings_pars_fragment:"vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec;\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\t#else\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\t\t\t#endif\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}",lightmap_fragment:"#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tlightMapIrradiance *= PI;\n\t#endif\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_vertex:"vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ]\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform vec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tfloat texelIndex = float( vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset );\n\t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\n\t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n\t\t\treturn texture( morphTargetsTexture, morphUV );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;",normal_fragment_maps:"#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif",output_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif",shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef texture2DLodEXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif",uv_pars_fragment:"#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif",uv_pars_vertex:"#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif",uv_vertex:"#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif",uv2_pars_fragment:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif",uv2_pars_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif",uv2_vertex:"#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",depth_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}"},On={common:{diffuse:{value:new st(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new J},uv2Transform:{value:new J},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Z(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new st(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new st(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new J}},sprite:{diffuse:{value:new st(16777215)},opacity:{value:1},center:{value:new Z(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new J}}},Fn={basic:{uniforms:gn([On.common,On.specularmap,On.envmap,On.aomap,On.lightmap,On.fog]),vertexShader:Nn.meshbasic_vert,fragmentShader:Nn.meshbasic_frag},lambert:{uniforms:gn([On.common,On.specularmap,On.envmap,On.aomap,On.lightmap,On.emissivemap,On.fog,On.lights,{emissive:{value:new st(0)}}]),vertexShader:Nn.meshlambert_vert,fragmentShader:Nn.meshlambert_frag},phong:{uniforms:gn([On.common,On.specularmap,On.envmap,On.aomap,On.lightmap,On.emissivemap,On.bumpmap,On.normalmap,On.displacementmap,On.fog,On.lights,{emissive:{value:new st(0)},specular:{value:new st(1118481)},shininess:{value:30}}]),vertexShader:Nn.meshphong_vert,fragmentShader:Nn.meshphong_frag},standard:{uniforms:gn([On.common,On.envmap,On.aomap,On.lightmap,On.emissivemap,On.bumpmap,On.normalmap,On.displacementmap,On.roughnessmap,On.metalnessmap,On.fog,On.lights,{emissive:{value:new st(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Nn.meshphysical_vert,fragmentShader:Nn.meshphysical_frag},toon:{uniforms:gn([On.common,On.aomap,On.lightmap,On.emissivemap,On.bumpmap,On.normalmap,On.displacementmap,On.gradientmap,On.fog,On.lights,{emissive:{value:new st(0)}}]),vertexShader:Nn.meshtoon_vert,fragmentShader:Nn.meshtoon_frag},matcap:{uniforms:gn([On.common,On.bumpmap,On.normalmap,On.displacementmap,On.fog,{matcap:{value:null}}]),vertexShader:Nn.meshmatcap_vert,fragmentShader:Nn.meshmatcap_frag},points:{uniforms:gn([On.points,On.fog]),vertexShader:Nn.points_vert,fragmentShader:Nn.points_frag},dashed:{uniforms:gn([On.common,On.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Nn.linedashed_vert,fragmentShader:Nn.linedashed_frag},depth:{uniforms:gn([On.common,On.displacementmap]),vertexShader:Nn.depth_vert,fragmentShader:Nn.depth_frag},normal:{uniforms:gn([On.common,On.bumpmap,On.normalmap,On.displacementmap,{opacity:{value:1}}]),vertexShader:Nn.meshnormal_vert,fragmentShader:Nn.meshnormal_frag},sprite:{uniforms:gn([On.sprite,On.fog]),vertexShader:Nn.sprite_vert,fragmentShader:Nn.sprite_frag},background:{uniforms:{uvTransform:{value:new J},t2D:{value:null}},vertexShader:Nn.background_vert,fragmentShader:Nn.background_frag},cube:{uniforms:gn([On.envmap,{opacity:{value:1}}]),vertexShader:Nn.cube_vert,fragmentShader:Nn.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Nn.equirect_vert,fragmentShader:Nn.equirect_frag},distanceRGBA:{uniforms:gn([On.common,On.displacementmap,{referencePosition:{value:new vt},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Nn.distanceRGBA_vert,fragmentShader:Nn.distanceRGBA_frag},shadow:{uniforms:gn([On.lights,On.fog,{color:{value:new st(0)},opacity:{value:1}}]),vertexShader:Nn.shadow_vert,fragmentShader:Nn.shadow_frag}};function Un(t,e,n,i,r,s){const a=new st(0);let l,c,h=!0===r?0:1,u=null,d=0,p=null;function m(t,e){n.buffers.color.setClear(t.r,t.g,t.b,e,s)}return{getClearColor:function(){return a},setClearColor:function(t,e=1){a.set(t),h=e,m(a,h)},getClearAlpha:function(){return h},setClearAlpha:function(t){h=t,m(a,h)},render:function(n,r){let s=!1,f=!0===r.isScene?r.background:null;f&&f.isTexture&&(f=e.get(f));const g=t.xr,v=g.getSession&&g.getSession();v&&"additive"===v.environmentBlendMode&&(f=null),null===f?m(a,h):f&&f.isColor&&(m(f,1),s=!0),(t.autoClear||s)&&t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil),f&&(f.isCubeTexture||f.mapping===o)?(void 0===c&&(c=new dn(new mn(1,1,1),new yn({name:"BackgroundCubeMaterial",uniforms:fn(Fn.cube.uniforms),vertexShader:Fn.cube.vertexShader,fragmentShader:Fn.cube.fragmentShader,side:1,depthTest:!1,depthWrite:!1,fog:!1})),c.geometry.deleteAttribute("normal"),c.geometry.deleteAttribute("uv"),c.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(c.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),i.update(c)),c.material.uniforms.envMap.value=f,c.material.uniforms.flipEnvMap.value=f.isCubeTexture&&!1===f.isRenderTargetTexture?-1:1,u===f&&d===f.version&&p===t.toneMapping||(c.material.needsUpdate=!0,u=f,d=f.version,p=t.toneMapping),n.unshift(c,c.geometry,c.material,0,0,null)):f&&f.isTexture&&(void 0===l&&(l=new dn(new zn(2,2),new yn({name:"BackgroundMaterial",uniforms:fn(Fn.background.uniforms),vertexShader:Fn.background.vertexShader,fragmentShader:Fn.background.fragmentShader,side:0,depthTest:!1,depthWrite:!1,fog:!1})),l.geometry.deleteAttribute("normal"),Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.t2D.value}}),i.update(l)),l.material.uniforms.t2D.value=f,!0===f.matrixAutoUpdate&&f.updateMatrix(),l.material.uniforms.uvTransform.value.copy(f.matrix),u===f&&d===f.version&&p===t.toneMapping||(l.material.needsUpdate=!0,u=f,d=f.version,p=t.toneMapping),n.unshift(l,l.geometry,l.material,0,0,null))}}}function Bn(t,e,n,i){const r=t.getParameter(34921),s=i.isWebGL2?null:e.get("OES_vertex_array_object"),a=i.isWebGL2||null!==s,o={},l=d(null);let c=l;function h(e){return i.isWebGL2?t.bindVertexArray(e):s.bindVertexArrayOES(e)}function u(e){return i.isWebGL2?t.deleteVertexArray(e):s.deleteVertexArrayOES(e)}function d(t){const e=[],n=[],i=[];for(let t=0;t<r;t++)e[t]=0,n[t]=0,i[t]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:e,enabledAttributes:n,attributeDivisors:i,object:t,attributes:{},index:null}}function p(){const t=c.newAttributes;for(let e=0,n=t.length;e<n;e++)t[e]=0}function m(t){f(t,0)}function f(n,r){const s=c.newAttributes,a=c.enabledAttributes,o=c.attributeDivisors;s[n]=1,0===a[n]&&(t.enableVertexAttribArray(n),a[n]=1),o[n]!==r&&((i.isWebGL2?t:e.get("ANGLE_instanced_arrays"))[i.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,r),o[n]=r)}function g(){const e=c.newAttributes,n=c.enabledAttributes;for(let i=0,r=n.length;i<r;i++)n[i]!==e[i]&&(t.disableVertexAttribArray(i),n[i]=0)}function v(e,n,r,s,a,o){!0!==i.isWebGL2||5124!==r&&5125!==r?t.vertexAttribPointer(e,n,r,s,a,o):t.vertexAttribIPointer(e,n,r,a,o)}function y(){x(),c!==l&&(c=l,h(c.object))}function x(){l.geometry=null,l.program=null,l.wireframe=!1}return{setup:function(r,l,u,y,x){let _=!1;if(a){const e=function(e,n,r){const a=!0===r.wireframe;let l=o[e.id];void 0===l&&(l={},o[e.id]=l);let c=l[n.id];void 0===c&&(c={},l[n.id]=c);let h=c[a];return void 0===h&&(h=d(i.isWebGL2?t.createVertexArray():s.createVertexArrayOES()),c[a]=h),h}(y,u,l);c!==e&&(c=e,h(c.object)),_=function(t,e){const n=c.attributes,i=t.attributes;let r=0;for(const t in i){const e=n[t],s=i[t];if(void 0===e)return!0;if(e.attribute!==s)return!0;if(e.data!==s.data)return!0;r++}return c.attributesNum!==r||c.index!==e}(y,x),_&&function(t,e){const n={},i=t.attributes;let r=0;for(const t in i){const e=i[t],s={};s.attribute=e,e.data&&(s.data=e.data),n[t]=s,r++}c.attributes=n,c.attributesNum=r,c.index=e}(y,x)}else{const t=!0===l.wireframe;c.geometry===y.id&&c.program===u.id&&c.wireframe===t||(c.geometry=y.id,c.program=u.id,c.wireframe=t,_=!0)}!0===r.isInstancedMesh&&(_=!0),null!==x&&n.update(x,34963),_&&(function(r,s,a,o){if(!1===i.isWebGL2&&(r.isInstancedMesh||o.isInstancedBufferGeometry)&&null===e.get("ANGLE_instanced_arrays"))return;p();const l=o.attributes,c=a.getAttributes(),h=s.defaultAttributeValues;for(const e in c){const i=c[e];if(i.location>=0){let s=l[e];if(void 0===s&&("instanceMatrix"===e&&r.instanceMatrix&&(s=r.instanceMatrix),"instanceColor"===e&&r.instanceColor&&(s=r.instanceColor)),void 0!==s){const e=s.normalized,a=s.itemSize,l=n.get(s);if(void 0===l)continue;const c=l.buffer,h=l.type,u=l.bytesPerElement;if(s.isInterleavedBufferAttribute){const n=s.data,l=n.stride,d=s.offset;if(n.isInstancedInterleavedBuffer){for(let t=0;t<i.locationSize;t++)f(i.location+t,n.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=n.meshPerAttribute*n.count)}else for(let t=0;t<i.locationSize;t++)m(i.location+t);t.bindBuffer(34962,c);for(let t=0;t<i.locationSize;t++)v(i.location+t,a/i.locationSize,h,e,l*u,(d+a/i.locationSize*t)*u)}else{if(s.isInstancedBufferAttribute){for(let t=0;t<i.locationSize;t++)f(i.location+t,s.meshPerAttribute);!0!==r.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=s.meshPerAttribute*s.count)}else for(let t=0;t<i.locationSize;t++)m(i.location+t);t.bindBuffer(34962,c);for(let t=0;t<i.locationSize;t++)v(i.location+t,a/i.locationSize,h,e,a*u,a/i.locationSize*t*u)}}else if(void 0!==h){const n=h[e];if(void 0!==n)switch(n.length){case 2:t.vertexAttrib2fv(i.location,n);break;case 3:t.vertexAttrib3fv(i.location,n);break;case 4:t.vertexAttrib4fv(i.location,n);break;default:t.vertexAttrib1fv(i.location,n)}}}}g()}(r,l,u,y),null!==x&&t.bindBuffer(34963,n.get(x).buffer))},reset:y,resetDefaultState:x,dispose:function(){y();for(const t in o){const e=o[t];for(const t in e){const n=e[t];for(const t in n)u(n[t].object),delete n[t];delete e[t]}delete o[t]}},releaseStatesOfGeometry:function(t){if(void 0===o[t.id])return;const e=o[t.id];for(const t in e){const n=e[t];for(const t in n)u(n[t].object),delete n[t];delete e[t]}delete o[t.id]},releaseStatesOfProgram:function(t){for(const e in o){const n=o[e];if(void 0===n[t.id])continue;const i=n[t.id];for(const t in i)u(i[t].object),delete i[t];delete n[t.id]}},initAttributes:p,enableAttribute:m,disableUnusedAttributes:g}}function Hn(t,e,n,i){const r=i.isWebGL2;let s;this.setMode=function(t){s=t},this.render=function(e,i){t.drawArrays(s,e,i),n.update(i,s,1)},this.renderInstances=function(i,a,o){if(0===o)return;let l,c;if(r)l=t,c="drawArraysInstanced";else if(l=e.get("ANGLE_instanced_arrays"),c="drawArraysInstancedANGLE",null===l)return void console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");l[c](s,i,a,o),n.update(a,s,o)}}function Gn(t,e,n){let i;function r(e){if("highp"===e){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0?"mediump":"lowp"}const s="undefined"!=typeof WebGL2RenderingContext&&t instanceof WebGL2RenderingContext||"undefined"!=typeof WebGL2ComputeRenderingContext&&t instanceof WebGL2ComputeRenderingContext;let a=void 0!==n.precision?n.precision:"highp";const o=r(a);o!==a&&(console.warn("THREE.WebGLRenderer:",a,"not supported, using",o,"instead."),a=o);const l=s||e.has("WEBGL_draw_buffers"),c=!0===n.logarithmicDepthBuffer,h=t.getParameter(34930),u=t.getParameter(35660),d=t.getParameter(3379),p=t.getParameter(34076),m=t.getParameter(34921),f=t.getParameter(36347),g=t.getParameter(36348),v=t.getParameter(36349),y=u>0,x=s||e.has("OES_texture_float");return{isWebGL2:s,drawBuffers:l,getMaxAnisotropy:function(){if(void 0!==i)return i;if(!0===e.has("EXT_texture_filter_anisotropic")){const n=e.get("EXT_texture_filter_anisotropic");i=t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else i=0;return i},getMaxPrecision:r,precision:a,logarithmicDepthBuffer:c,maxTextures:h,maxVertexTextures:u,maxTextureSize:d,maxCubemapSize:p,maxAttributes:m,maxVertexUniforms:f,maxVaryings:g,maxFragmentUniforms:v,vertexTextures:y,floatFragmentTextures:x,floatVertexTextures:y&&x,maxSamples:s?t.getParameter(36183):0}}function kn(t){const e=this;let n=null,i=0,r=!1,s=!1;const a=new Pn,o=new J,l={value:null,needsUpdate:!1};function c(){l.value!==n&&(l.value=n,l.needsUpdate=i>0),e.numPlanes=i,e.numIntersection=0}function h(t,n,i,r){const s=null!==t?t.length:0;let c=null;if(0!==s){if(c=l.value,!0!==r||null===c){const e=i+4*s,r=n.matrixWorldInverse;o.getNormalMatrix(r),(null===c||c.length<e)&&(c=new Float32Array(e));for(let e=0,n=i;e!==s;++e,n+=4)a.copy(t[e]).applyMatrix4(r,o),a.normal.toArray(c,n),c[n+3]=a.constant}l.value=c,l.needsUpdate=!0}return e.numPlanes=s,e.numIntersection=0,c}this.uniform=l,this.numPlanes=0,this.numIntersection=0,this.init=function(t,e,s){const a=0!==t.length||e||0!==i||r;return r=e,n=h(t,s,0),i=t.length,a},this.beginShadows=function(){s=!0,h(null)},this.endShadows=function(){s=!1,c()},this.setState=function(e,a,o){const u=e.clippingPlanes,d=e.clipIntersection,p=e.clipShadows,m=t.get(e);if(!r||null===u||0===u.length||s&&!p)s?h(null):c();else{const t=s?0:i,e=4*t;let r=m.clippingState||null;l.value=r,r=h(u,a,e,o);for(let t=0;t!==e;++t)r[t]=n[t];m.clippingState=r,this.numIntersection=d?this.numPlanes:0,this.numPlanes+=t}}}function Vn(t){let e=new WeakMap;function n(t,e){return 303===e?t.mapping=s:304===e&&(t.mapping=a),t}function i(t){const n=t.target;n.removeEventListener("dispose",i);const r=e.get(n);void 0!==r&&(e.delete(n),r.dispose())}return{get:function(r){if(r&&r.isTexture&&!1===r.isRenderTargetTexture){const s=r.mapping;if(303===s||304===s){if(e.has(r))return n(e.get(r).texture,r.mapping);{const s=r.image;if(s&&s.height>0){const a=new Sn(s.height/2);return a.fromEquirectangularTexture(t,r),e.set(r,a),r.addEventListener("dispose",i),n(a.texture,r.mapping)}return null}}}return r},dispose:function(){e=new WeakMap}}}Fn.physical={uniforms:gn([Fn.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Z(1,1)},clearcoatNormalMap:{value:null},sheen:{value:0},sheenColor:{value:new st(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new Z},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new st(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new st(1,1,1)},specularColorMap:{value:null}}]),vertexShader:Nn.meshphysical_vert,fragmentShader:Nn.meshphysical_frag};class Wn extends xn{constructor(t=-1,e=1,n=1,i=-1,r=.1,s=2e3){super(),this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=i,this.near=r,this.far=s,this.updateProjectionMatrix()}copy(t,e){return super.copy(t,e),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=null===t.view?null:Object.assign({},t.view),this}setViewOffset(t,e,n,i,r,s){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=i,this.view.width=r,this.view.height=s,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,i=(this.top+this.bottom)/2;let r=n-t,s=n+t,a=i+e,o=i-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=t*this.view.offsetX,s=r+t*this.view.width,a-=e*this.view.offsetY,o=a-e*this.view.height}this.projectionMatrix.makeOrthographic(r,s,a,o,this.near,this.far),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);return e.object.zoom=this.zoom,e.object.left=this.left,e.object.right=this.right,e.object.top=this.top,e.object.bottom=this.bottom,e.object.near=this.near,e.object.far=this.far,null!==this.view&&(e.object.view=Object.assign({},this.view)),e}}Wn.prototype.isOrthographicCamera=!0;const jn=[.125,.215,.35,.446,.526,.582],qn=new Wn,Xn=new st;let Yn=null;const Zn=(1+Math.sqrt(5))/2,Jn=1/Zn,Kn=[new vt(1,1,1),new vt(-1,1,1),new vt(1,1,-1),new vt(-1,1,-1),new vt(0,Zn,Jn),new vt(0,Zn,-Jn),new vt(Jn,0,Zn),new vt(-Jn,0,Zn),new vt(Zn,Jn,0),new vt(-Zn,Jn,0)];class Qn{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,i=100){Yn=this._renderer.getRenderTarget(),this._setSize(256);const r=this._allocateTargets();return r.depthBuffer=!0,this._sceneToCubeUV(t,n,i,r),e>0&&this._blur(r,0,0,e),this._applyPMREM(r),this._cleanup(r),r}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=ni(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=ei(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++)this._lodPlanes[t].dispose()}_cleanup(t){this._renderer.setRenderTarget(Yn),t.scissorTest=!1,ti(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===s||t.mapping===a?this._setSize(0===t.image.length?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),Yn=this._renderer.getRenderTarget();const n=e||this._allocateTargets();return this._textureToCubeUV(t,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize-32,n={magFilter:d,minFilter:d,generateMipmaps:!1,type:y,format:_,encoding:I,depthBuffer:!1},i=$n(t,e,n);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=$n(t,e,n);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(t){const e=[],n=[],i=[];let r=t;const s=t-4+1+jn.length;for(let a=0;a<s;a++){const s=Math.pow(2,r);n.push(s);let o=1/s;a>t-4?o=jn[a-t+4-1]:0===a&&(o=0),i.push(o);const l=1/(s-1),c=-l/2,h=1+l/2,u=[c,c,h,c,h,h,c,c,h,h,c,h],d=6,p=6,m=3,f=2,g=1,v=new Float32Array(m*p*d),y=new Float32Array(f*p*d),x=new Float32Array(g*p*d);for(let t=0;t<d;t++){const e=t%3*2/3-1,n=t>2?0:-1,i=[e,n,0,e+2/3,n,0,e+2/3,n+1,0,e,n,0,e+2/3,n+1,0,e,n+1,0];v.set(i,m*p*t),y.set(u,f*p*t);const r=[t,t,t,t,t,t];x.set(r,g*p*t)}const _=new Xe;_.setAttribute("position",new Oe(v,m)),_.setAttribute("uv",new Oe(y,f)),_.setAttribute("faceIndex",new Oe(x,g)),e.push(_),r>4&&r--}return{lodPlanes:e,sizeLods:n,sigmas:i}}(i)),this._blurMaterial=function(t,e,n){const i=new Float32Array(20),r=new vt(0,1,0);return new yn({name:"SphericalGaussianBlur",defines:{n:20,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${t}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}(i,t,e)}return i}_compileMaterial(t){const e=new dn(this._lodPlanes[0],t);this._renderer.compile(e,qn)}_sceneToCubeUV(t,e,n,i){const r=new _n(90,1,e,n),s=[1,-1,1,1,1,1],a=[1,1,1,-1,-1,-1],o=this._renderer,l=o.autoClear,c=o.toneMapping;o.getClearColor(Xn),o.toneMapping=0,o.autoClear=!1;const h=new Ie({name:"PMREM.Background",side:1,depthWrite:!1,depthTest:!1}),u=new dn(new mn,h);let d=!1;const p=t.background;p?p.isColor&&(h.color.copy(p),t.background=null,d=!0):(h.color.copy(Xn),d=!0);for(let e=0;e<6;e++){const n=e%3;0===n?(r.up.set(0,s[e],0),r.lookAt(a[e],0,0)):1===n?(r.up.set(0,0,s[e]),r.lookAt(0,a[e],0)):(r.up.set(0,s[e],0),r.lookAt(0,0,a[e]));const l=this._cubeSize;ti(i,n*l,e>2?l:0,l,l),o.setRenderTarget(i),d&&o.render(u,r),o.render(t,r)}u.geometry.dispose(),u.material.dispose(),o.toneMapping=c,o.autoClear=l,t.background=p}_textureToCubeUV(t,e){const n=this._renderer,i=t.mapping===s||t.mapping===a;i?(null===this._cubemapMaterial&&(this._cubemapMaterial=ni()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===t.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=ei());const r=i?this._cubemapMaterial:this._equirectMaterial,o=new dn(this._lodPlanes[0],r);r.uniforms.envMap.value=t;const l=this._cubeSize;ti(e,0,0,3*l,2*l),n.setRenderTarget(e),n.render(o,qn)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;for(let e=1;e<this._lodPlanes.length;e++){const n=Math.sqrt(this._sigmas[e]*this._sigmas[e]-this._sigmas[e-1]*this._sigmas[e-1]),i=Kn[(e-1)%Kn.length];this._blur(t,e-1,e,n,i)}e.autoClear=n}_blur(t,e,n,i,r){const s=this._pingPongRenderTarget;this._halfBlur(t,s,e,n,i,"latitudinal",r),this._halfBlur(s,t,n,n,i,"longitudinal",r)}_halfBlur(t,e,n,i,r,s,a){const o=this._renderer,l=this._blurMaterial;"latitudinal"!==s&&"longitudinal"!==s&&console.error("blur direction must be either latitudinal or longitudinal!");const c=new dn(this._lodPlanes[i],l),h=l.uniforms,u=this._sizeLods[n]-1,d=isFinite(r)?Math.PI/(2*u):2*Math.PI/39,p=r/d,m=isFinite(r)?1+Math.floor(3*p):20;m>20&&console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${m} samples when the maximum is set to 20`);const f=[];let g=0;for(let t=0;t<20;++t){const e=t/p,n=Math.exp(-e*e/2);f.push(n),0===t?g+=n:t<m&&(g+=2*n)}for(let t=0;t<f.length;t++)f[t]=f[t]/g;h.envMap.value=t.texture,h.samples.value=m,h.weights.value=f,h.latitudinal.value="latitudinal"===s,a&&(h.poleAxis.value=a);const{_lodMax:v}=this;h.dTheta.value=d,h.mipInt.value=v-n;const y=this._sizeLods[i];ti(e,3*y*(i>v-4?i-v+4:0),4*(this._cubeSize-y),3*y,2*y),o.setRenderTarget(e),o.render(c,qn)}}function $n(t,e,n){const i=new pt(t,e,n);return i.texture.mapping=o,i.texture.name="PMREM.cubeUv",i.scissorTest=!0,i}function ti(t,e,n,i,r){t.viewport.set(e,n,i,r),t.scissor.set(e,n,i,r)}function ei(){return new yn({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function ni(){return new yn({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t",fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:0,depthTest:!1,depthWrite:!1})}function ii(t){let e=new WeakMap,n=null;function i(t){const n=t.target;n.removeEventListener("dispose",i);const r=e.get(n);void 0!==r&&(e.delete(n),r.dispose())}return{get:function(r){if(r&&r.isTexture){const o=r.mapping,l=303===o||304===o,c=o===s||o===a;if(l||c){if(r.isRenderTargetTexture&&!0===r.needsPMREMUpdate){r.needsPMREMUpdate=!1;let i=e.get(r);return null===n&&(n=new Qn(t)),i=l?n.fromEquirectangular(r,i):n.fromCubemap(r,i),e.set(r,i),i.texture}if(e.has(r))return e.get(r).texture;{const s=r.image;if(l&&s&&s.height>0||c&&s&&function(t){let e=0;for(let n=0;n<6;n++)void 0!==t[n]&&e++;return 6===e}(s)){null===n&&(n=new Qn(t));const s=l?n.fromEquirectangular(r):n.fromCubemap(r);return e.set(r,s),r.addEventListener("dispose",i),s.texture}return null}}}return r},dispose:function(){e=new WeakMap,null!==n&&(n.dispose(),n=null)}}}function ri(t){const e={};function n(n){if(void 0!==e[n])return e[n];let i;switch(n){case"WEBGL_depth_texture":i=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=t.getExtension(n)}return e[n]=i,i}return{has:function(t){return null!==n(t)},init:function(t){t.isWebGL2?n("EXT_color_buffer_float"):(n("WEBGL_depth_texture"),n("OES_texture_float"),n("OES_texture_half_float"),n("OES_texture_half_float_linear"),n("OES_standard_derivatives"),n("OES_element_index_uint"),n("OES_vertex_array_object"),n("ANGLE_instanced_arrays")),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture")},get:function(t){const e=n(t);return null===e&&console.warn("THREE.WebGLRenderer: "+t+" extension not supported."),e}}}function si(t,e,n,i){const r={},s=new WeakMap;function a(t){const o=t.target;null!==o.index&&e.remove(o.index);for(const t in o.attributes)e.remove(o.attributes[t]);o.removeEventListener("dispose",a),delete r[o.id];const l=s.get(o);l&&(e.remove(l),s.delete(o)),i.releaseStatesOfGeometry(o),!0===o.isInstancedBufferGeometry&&delete o._maxInstanceCount,n.memory.geometries--}function o(t){const n=[],i=t.index,r=t.attributes.position;let a=0;if(null!==i){const t=i.array;a=i.version;for(let e=0,i=t.length;e<i;e+=3){const i=t[e+0],r=t[e+1],s=t[e+2];n.push(i,r,r,s,s,i)}}else{const t=r.array;a=r.version;for(let e=0,i=t.length/3-1;e<i;e+=3){const t=e+0,i=e+1,r=e+2;n.push(t,i,i,r,r,t)}}const o=new(K(n)?Ue:Fe)(n,1);o.version=a;const l=s.get(t);l&&e.remove(l),s.set(t,o)}return{get:function(t,e){return!0===r[e.id]||(e.addEventListener("dispose",a),r[e.id]=!0,n.memory.geometries++),e},update:function(t){const n=t.attributes;for(const t in n)e.update(n[t],34962);const i=t.morphAttributes;for(const t in i){const n=i[t];for(let t=0,i=n.length;t<i;t++)e.update(n[t],34962)}},getWireframeAttribute:function(t){const e=s.get(t);if(e){const n=t.index;null!==n&&e.version<n.version&&o(t)}else o(t);return s.get(t)}}}function ai(t,e,n,i){const r=i.isWebGL2;let s,a,o;this.setMode=function(t){s=t},this.setIndex=function(t){a=t.type,o=t.bytesPerElement},this.render=function(e,i){t.drawElements(s,i,a,e*o),n.update(i,s,1)},this.renderInstances=function(i,l,c){if(0===c)return;let h,u;if(r)h=t,u="drawElementsInstanced";else if(h=e.get("ANGLE_instanced_arrays"),u="drawElementsInstancedANGLE",null===h)return void console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");h[u](s,l,a,i*o,c),n.update(l,s,c)}}function oi(t){const e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.frame++,e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(t,n,i){switch(e.calls++,n){case 4:e.triangles+=i*(t/3);break;case 1:e.lines+=i*(t/2);break;case 3:e.lines+=i*(t-1);break;case 2:e.lines+=i*t;break;case 0:e.points+=i*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",n)}}}}function li(t,e){return t[0]-e[0]}function ci(t,e){return Math.abs(e[1])-Math.abs(t[1])}function hi(t,e){let n=1;const i=e.isInterleavedBufferAttribute?e.data.array:e.array;i instanceof Int8Array?n=127:i instanceof Int16Array?n=32767:i instanceof Int32Array?n=2147483647:console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ",i),t.divideScalar(n)}function ui(t,e,n){const i={},r=new Float32Array(8),s=new WeakMap,a=new dt,o=[];for(let t=0;t<8;t++)o[t]=[t,0];return{update:function(l,c,h,u){const d=l.morphTargetInfluences;if(!0===e.isWebGL2){const p=c.morphAttributes.position||c.morphAttributes.normal||c.morphAttributes.color,m=void 0!==p?p.length:0;let f=s.get(c);if(void 0===f||f.count!==m){void 0!==f&&f.texture.dispose();const x=void 0!==c.morphAttributes.position,w=void 0!==c.morphAttributes.normal,b=void 0!==c.morphAttributes.color,M=c.morphAttributes.position||[],S=c.morphAttributes.normal||[],T=c.morphAttributes.color||[];let E=0;!0===x&&(E=1),!0===w&&(E=2),!0===b&&(E=3);let A=c.attributes.position.count*E,P=1;A>e.maxTextureSize&&(P=Math.ceil(A/e.maxTextureSize),A=e.maxTextureSize);const R=new Float32Array(A*P*4*m),C=new mt(R,A,P,m);C.format=_,C.type=v,C.needsUpdate=!0;const L=4*E;for(let I=0;I<m;I++){const z=M[I],N=S[I],O=T[I],F=A*P*4*I;for(let U=0;U<z.count;U++){const B=U*L;!0===x&&(a.fromBufferAttribute(z,U),!0===z.normalized&&hi(a,z),R[F+B+0]=a.x,R[F+B+1]=a.y,R[F+B+2]=a.z,R[F+B+3]=0),!0===w&&(a.fromBufferAttribute(N,U),!0===N.normalized&&hi(a,N),R[F+B+4]=a.x,R[F+B+5]=a.y,R[F+B+6]=a.z,R[F+B+7]=0),!0===b&&(a.fromBufferAttribute(O,U),!0===O.normalized&&hi(a,N),R[F+B+8]=a.x,R[F+B+9]=a.y,R[F+B+10]=a.z,R[F+B+11]=4===O.itemSize?a.w:1)}}function D(){C.dispose(),s.delete(c),c.removeEventListener("dispose",D)}f={count:m,texture:C,size:new Z(A,P)},s.set(c,f),c.addEventListener("dispose",D)}let g=0;for(let H=0;H<d.length;H++)g+=d[H];const y=c.morphTargetsRelative?1:1-g;u.getUniforms().setValue(t,"morphTargetBaseInfluence",y),u.getUniforms().setValue(t,"morphTargetInfluences",d),u.getUniforms().setValue(t,"morphTargetsTexture",f.texture,n),u.getUniforms().setValue(t,"morphTargetsTextureSize",f.size)}else{const G=void 0===d?0:d.length;let k=i[c.id];if(void 0===k||k.length!==G){k=[];for(let X=0;X<G;X++)k[X]=[X,0];i[c.id]=k}for(let Y=0;Y<G;Y++){const J=k[Y];J[0]=Y,J[1]=d[Y]}k.sort(ci);for(let K=0;K<8;K++)K<G&&k[K][1]?(o[K][0]=k[K][0],o[K][1]=k[K][1]):(o[K][0]=Number.MAX_SAFE_INTEGER,o[K][1]=0);o.sort(li);const V=c.morphAttributes.position,W=c.morphAttributes.normal;let j=0;for(let Q=0;Q<8;Q++){const $=o[Q],tt=$[0],et=$[1];tt!==Number.MAX_SAFE_INTEGER&&et?(V&&c.getAttribute("morphTarget"+Q)!==V[tt]&&c.setAttribute("morphTarget"+Q,V[tt]),W&&c.getAttribute("morphNormal"+Q)!==W[tt]&&c.setAttribute("morphNormal"+Q,W[tt]),r[Q]=et,j+=et):(V&&!0===c.hasAttribute("morphTarget"+Q)&&c.deleteAttribute("morphTarget"+Q),W&&!0===c.hasAttribute("morphNormal"+Q)&&c.deleteAttribute("morphNormal"+Q),r[Q]=0)}const q=c.morphTargetsRelative?1:1-j;u.getUniforms().setValue(t,"morphTargetBaseInfluence",q),u.getUniforms().setValue(t,"morphTargetInfluences",r)}}}}function di(t,e,n,i){let r=new WeakMap;function s(t){const e=t.target;e.removeEventListener("dispose",s),n.remove(e.instanceMatrix),null!==e.instanceColor&&n.remove(e.instanceColor)}return{update:function(t){const a=i.render.frame,o=t.geometry,l=e.get(t,o);return r.get(l)!==a&&(e.update(l),r.set(l,a)),t.isInstancedMesh&&(!1===t.hasEventListener("dispose",s)&&t.addEventListener("dispose",s),n.update(t.instanceMatrix,34962),null!==t.instanceColor&&n.update(t.instanceColor,34962)),l},dispose:function(){r=new WeakMap}}}const pi=new ut,mi=new mt,fi=new ft,gi=new Mn,vi=[],yi=[],xi=new Float32Array(16),_i=new Float32Array(9),wi=new Float32Array(4);function bi(t,e,n){const i=t[0];if(i<=0||i>0)return t;const r=e*n;let s=vi[r];if(void 0===s&&(s=new Float32Array(r),vi[r]=s),0!==e){i.toArray(s,0);for(let i=1,r=0;i!==e;++i)r+=n,t[i].toArray(s,r)}return s}function Mi(t,e){if(t.length!==e.length)return!1;for(let n=0,i=t.length;n<i;n++)if(t[n]!==e[n])return!1;return!0}function Si(t,e){for(let n=0,i=e.length;n<i;n++)t[n]=e[n]}function Ti(t,e){let n=yi[e];void 0===n&&(n=new Int32Array(e),yi[e]=n);for(let i=0;i!==e;++i)n[i]=t.allocateTextureUnit();return n}function Ei(t,e){const n=this.cache;n[0]!==e&&(t.uniform1f(this.addr,e),n[0]=e)}function Ai(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(Mi(n,e))return;t.uniform2fv(this.addr,e),Si(n,e)}}function Pi(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(void 0!==e.r)n[0]===e.r&&n[1]===e.g&&n[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(Mi(n,e))return;t.uniform3fv(this.addr,e),Si(n,e)}}function Ri(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(Mi(n,e))return;t.uniform4fv(this.addr,e),Si(n,e)}}function Ci(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(Mi(n,e))return;t.uniformMatrix2fv(this.addr,!1,e),Si(n,e)}else{if(Mi(n,i))return;wi.set(i),t.uniformMatrix2fv(this.addr,!1,wi),Si(n,i)}}function Li(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(Mi(n,e))return;t.uniformMatrix3fv(this.addr,!1,e),Si(n,e)}else{if(Mi(n,i))return;_i.set(i),t.uniformMatrix3fv(this.addr,!1,_i),Si(n,i)}}function Di(t,e){const n=this.cache,i=e.elements;if(void 0===i){if(Mi(n,e))return;t.uniformMatrix4fv(this.addr,!1,e),Si(n,e)}else{if(Mi(n,i))return;xi.set(i),t.uniformMatrix4fv(this.addr,!1,xi),Si(n,i)}}function Ii(t,e){const n=this.cache;n[0]!==e&&(t.uniform1i(this.addr,e),n[0]=e)}function zi(t,e){const n=this.cache;Mi(n,e)||(t.uniform2iv(this.addr,e),Si(n,e))}function Ni(t,e){const n=this.cache;Mi(n,e)||(t.uniform3iv(this.addr,e),Si(n,e))}function Oi(t,e){const n=this.cache;Mi(n,e)||(t.uniform4iv(this.addr,e),Si(n,e))}function Fi(t,e){const n=this.cache;n[0]!==e&&(t.uniform1ui(this.addr,e),n[0]=e)}function Ui(t,e){const n=this.cache;Mi(n,e)||(t.uniform2uiv(this.addr,e),Si(n,e))}function Bi(t,e){const n=this.cache;Mi(n,e)||(t.uniform3uiv(this.addr,e),Si(n,e))}function Hi(t,e){const n=this.cache;Mi(n,e)||(t.uniform4uiv(this.addr,e),Si(n,e))}function Gi(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture2D(e||pi,r)}function ki(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture3D(e||fi,r)}function Vi(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTextureCube(e||gi,r)}function Wi(t,e,n){const i=this.cache,r=n.allocateTextureUnit();i[0]!==r&&(t.uniform1i(this.addr,r),i[0]=r),n.setTexture2DArray(e||mi,r)}function ji(t,e){t.uniform1fv(this.addr,e)}function qi(t,e){const n=bi(e,this.size,2);t.uniform2fv(this.addr,n)}function Xi(t,e){const n=bi(e,this.size,3);t.uniform3fv(this.addr,n)}function Yi(t,e){const n=bi(e,this.size,4);t.uniform4fv(this.addr,n)}function Zi(t,e){const n=bi(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,n)}function Ji(t,e){const n=bi(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,n)}function Ki(t,e){const n=bi(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,n)}function Qi(t,e){t.uniform1iv(this.addr,e)}function $i(t,e){t.uniform2iv(this.addr,e)}function tr(t,e){t.uniform3iv(this.addr,e)}function er(t,e){t.uniform4iv(this.addr,e)}function nr(t,e){t.uniform1uiv(this.addr,e)}function ir(t,e){t.uniform2uiv(this.addr,e)}function rr(t,e){t.uniform3uiv(this.addr,e)}function sr(t,e){t.uniform4uiv(this.addr,e)}function ar(t,e,n){const i=e.length,r=Ti(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t)n.setTexture2D(e[t]||pi,r[t])}function or(t,e,n){const i=e.length,r=Ti(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t)n.setTexture3D(e[t]||fi,r[t])}function lr(t,e,n){const i=e.length,r=Ti(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t)n.setTextureCube(e[t]||gi,r[t])}function cr(t,e,n){const i=e.length,r=Ti(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t)n.setTexture2DArray(e[t]||mi,r[t])}function hr(t,e,n){this.id=t,this.addr=n,this.cache=[],this.setValue=function(t){switch(t){case 5126:return Ei;case 35664:return Ai;case 35665:return Pi;case 35666:return Ri;case 35674:return Ci;case 35675:return Li;case 35676:return Di;case 5124:case 35670:return Ii;case 35667:case 35671:return zi;case 35668:case 35672:return Ni;case 35669:case 35673:return Oi;case 5125:return Fi;case 36294:return Ui;case 36295:return Bi;case 36296:return Hi;case 35678:case 36198:case 36298:case 36306:case 35682:return Gi;case 35679:case 36299:case 36307:return ki;case 35680:case 36300:case 36308:case 36293:return Vi;case 36289:case 36303:case 36311:case 36292:return Wi}}(e.type)}function ur(t,e,n){this.id=t,this.addr=n,this.cache=[],this.size=e.size,this.setValue=function(t){switch(t){case 5126:return ji;case 35664:return qi;case 35665:return Xi;case 35666:return Yi;case 35674:return Zi;case 35675:return Ji;case 35676:return Ki;case 5124:case 35670:return Qi;case 35667:case 35671:return $i;case 35668:case 35672:return tr;case 35669:case 35673:return er;case 5125:return nr;case 36294:return ir;case 36295:return rr;case 36296:return sr;case 35678:case 36198:case 36298:case 36306:case 35682:return ar;case 35679:case 36299:case 36307:return or;case 35680:case 36300:case 36308:case 36293:return lr;case 36289:case 36303:case 36311:case 36292:return cr}}(e.type)}function dr(t){this.id=t,this.seq=[],this.map={}}ur.prototype.updateCache=function(t){const e=this.cache;t instanceof Float32Array&&e.length!==t.length&&(this.cache=new Float32Array(t.length)),Si(e,t)},dr.prototype.setValue=function(t,e,n){const i=this.seq;for(let r=0,s=i.length;r!==s;++r){const s=i[r];s.setValue(t,e[s.id],n)}};const pr=/(\w+)(\])?(\[|\.)?/g;function mr(t,e){t.seq.push(e),t.map[e.id]=e}function fr(t,e,n){const i=t.name,r=i.length;for(pr.lastIndex=0;;){const s=pr.exec(i),a=pr.lastIndex;let o=s[1];const l="]"===s[2],c=s[3];if(l&&(o|=0),void 0===c||"["===c&&a+2===r){mr(n,void 0===c?new hr(o,t,e):new ur(o,t,e));break}{let t=n.map[o];void 0===t&&(t=new dr(o),mr(n,t)),n=t}}}function gr(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,35718);for(let i=0;i<n;++i){const n=t.getActiveUniform(e,i);fr(n,t.getUniformLocation(e,n.name),this)}}function vr(t,e,n){const i=t.createShader(e);return t.shaderSource(i,n),t.compileShader(i),i}gr.prototype.setValue=function(t,e,n,i){const r=this.map[e];void 0!==r&&r.setValue(t,n,i)},gr.prototype.setOptional=function(t,e,n){const i=e[n];void 0!==i&&this.setValue(t,n,i)},gr.upload=function(t,e,n,i){for(let r=0,s=e.length;r!==s;++r){const s=e[r],a=n[s.id];!1!==a.needsUpdate&&s.setValue(t,a.value,i)}},gr.seqWithValue=function(t,e){const n=[];for(let i=0,r=t.length;i!==r;++i){const r=t[i];r.id in e&&n.push(r)}return n};let yr=0;function xr(t,e,n){const i=t.getShaderParameter(e,35713),r=t.getShaderInfoLog(e).trim();return i&&""===r?"":n.toUpperCase()+"\n\n"+r+"\n\n"+function(t){const e=t.split("\n");for(let t=0;t<e.length;t++)e[t]=t+1+": "+e[t];return e.join("\n")}(t.getShaderSource(e))}function _r(t,e){const n=function(t){switch(t){case I:return["Linear","( value )"];case z:return["sRGB","( value )"];default:return console.warn("THREE.WebGLProgram: Unsupported encoding:",t),["Linear","( value )"]}}(e);return"vec4 "+t+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function wr(t,e){let n;switch(e){case 1:n="Linear";break;case 2:n="Reinhard";break;case 3:n="OptimizedCineon";break;case 4:n="ACESFilmic";break;case 5:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),n="Linear"}return"vec3 "+t+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function br(t){return""!==t}function Mr(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Sr(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const Tr=/^[ \t]*#include +<([\w\d./]+)>/gm;function Er(t){return t.replace(Tr,Ar)}function Ar(t,e){const n=Nn[e];if(void 0===n)throw new Error("Can not resolve #include <"+e+">");return Er(n)}const Pr=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,Rr=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Cr(t){return t.replace(Rr,Dr).replace(Pr,Lr)}function Lr(t,e,n,i){return console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead."),Dr(0,e,n,i)}function Dr(t,e,n,i){let r="";for(let t=parseInt(e);t<parseInt(n);t++)r+=i.replace(/\[\s*i\s*\]/g,"[ "+t+" ]").replace(/UNROLLED_LOOP_INDEX/g,t);return r}function Ir(t){let e="precision "+t.precision+" float;\nprecision "+t.precision+" int;";return"highp"===t.precision?e+="\n#define HIGH_PRECISION":"mediump"===t.precision?e+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(e+="\n#define LOW_PRECISION"),e}function zr(t,e,n,i){const r=t.getContext(),l=n.defines;let c=n.vertexShader,h=n.fragmentShader;const u=function(t){let e="SHADOWMAP_TYPE_BASIC";return 1===t.shadowMapType?e="SHADOWMAP_TYPE_PCF":2===t.shadowMapType?e="SHADOWMAP_TYPE_PCF_SOFT":3===t.shadowMapType&&(e="SHADOWMAP_TYPE_VSM"),e}(n),d=function(t){let e="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case s:case a:e="ENVMAP_TYPE_CUBE";break;case o:case 307:e="ENVMAP_TYPE_CUBE_UV"}return e}(n),p=function(t){let e="ENVMAP_MODE_REFLECTION";if(t.envMap)switch(t.envMapMode){case a:case 307:e="ENVMAP_MODE_REFRACTION"}return e}(n),m=function(t){let e="ENVMAP_BLENDING_NONE";if(t.envMap)switch(t.combine){case 0:e="ENVMAP_BLENDING_MULTIPLY";break;case 1:e="ENVMAP_BLENDING_MIX";break;case 2:e="ENVMAP_BLENDING_ADD"}return e}(n),f=function(t){const e=t.envMapCubeUVHeight;if(null===e)return null;const n=Math.log2(e/32+1)+3,i=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,n),112)),texelHeight:i,maxMip:n}}(n),g=n.isWebGL2?"":function(t){return[t.extensionDerivatives||t.envMapCubeUVHeight||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading||"physical"===t.shaderID?"#extension GL_OES_standard_derivatives : enable":"",(t.extensionFragDepth||t.logarithmicDepthBuffer)&&t.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",t.extensionDrawBuffers&&t.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(t.extensionShaderTextureLOD||t.envMap||t.transmission)&&t.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""].filter(br).join("\n")}(n),v=function(t){const e=[];for(const n in t){const i=t[n];!1!==i&&e.push("#define "+n+" "+i)}return e.join("\n")}(l),y=r.createProgram();let x,_,w=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(x=[v].filter(br).join("\n"),x.length>0&&(x+="\n"),_=[g,v].filter(br).join("\n"),_.length>0&&(_+="\n")):(x=[Ir(n),"#define SHADER_NAME "+n.shaderName,v,n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define MAX_BONES "+n.maxBones,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+p:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.displacementMap&&n.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.useVertexTexture?"#define BONE_TEXTURE":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.morphColors&&n.isWebGL2?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+u:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(br).join("\n"),_=[g,Ir(n),"#define SHADER_NAME "+n.shaderName,v,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+d:"",n.envMap?"#define "+p:"",n.envMap?"#define "+m:"",f?"#define CUBEUV_TEXEL_WIDTH "+f.texelWidth:"",f?"#define CUBEUV_TEXEL_HEIGHT "+f.texelHeight:"",f?"#define CUBEUV_MAX_MIP "+f.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+u:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",0!==n.toneMapping?"#define TONE_MAPPING":"",0!==n.toneMapping?Nn.tonemapping_pars_fragment:"",0!==n.toneMapping?wr("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",Nn.encodings_pars_fragment,_r("linearToOutputTexel",n.outputEncoding),n.depthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(br).join("\n")),c=Er(c),c=Mr(c,n),c=Sr(c,n),h=Er(h),h=Mr(h,n),h=Sr(h,n),c=Cr(c),h=Cr(h),n.isWebGL2&&!0!==n.isRawShaderMaterial&&(w="#version 300 es\n",x=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+x,_=["#define varying in",n.glslVersion===U?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===U?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+_);const b=w+_+h,M=vr(r,35633,w+x+c),S=vr(r,35632,b);if(r.attachShader(y,M),r.attachShader(y,S),void 0!==n.index0AttributeName?r.bindAttribLocation(y,0,n.index0AttributeName):!0===n.morphTargets&&r.bindAttribLocation(y,0,"position"),r.linkProgram(y),t.debug.checkShaderErrors){const t=r.getProgramInfoLog(y).trim(),e=r.getShaderInfoLog(M).trim(),n=r.getShaderInfoLog(S).trim();let i=!0,s=!0;if(!1===r.getProgramParameter(y,35714)){i=!1;const e=xr(r,M,"vertex"),n=xr(r,S,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - VALIDATE_STATUS "+r.getProgramParameter(y,35715)+"\n\nProgram Info Log: "+t+"\n"+e+"\n"+n)}else""!==t?console.warn("THREE.WebGLProgram: Program Info Log:",t):""!==e&&""!==n||(s=!1);s&&(this.diagnostics={runnable:i,programLog:t,vertexShader:{log:e,prefix:x},fragmentShader:{log:n,prefix:_}})}let T,E;return r.deleteShader(M),r.deleteShader(S),this.getUniforms=function(){return void 0===T&&(T=new gr(r,y)),T},this.getAttributes=function(){return void 0===E&&(E=function(t,e){const n={},i=t.getProgramParameter(e,35721);for(let r=0;r<i;r++){const i=t.getActiveAttrib(e,r),s=i.name;let a=1;35674===i.type&&(a=2),35675===i.type&&(a=3),35676===i.type&&(a=4),n[s]={type:i.type,location:t.getAttribLocation(e,s),locationSize:a}}return n}(r,y)),E},this.destroy=function(){i.releaseStatesOfProgram(this),r.deleteProgram(y),this.program=void 0},this.name=n.shaderName,this.id=yr++,this.cacheKey=e,this.usedTimes=1,this.program=y,this.vertexShader=M,this.fragmentShader=S,this}let Nr=0;class Or{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,n=t.fragmentShader,i=this._getShaderStage(e),r=this._getShaderStage(n),s=this._getShaderCacheForMaterial(t);return!1===s.has(i)&&(s.add(i),i.usedTimes++),!1===s.has(r)&&(s.add(r),r.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const t of e)t.usedTimes--,0===t.usedTimes&&this.shaderCache.delete(t);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;return!1===e.has(t)&&e.set(t,new Set),e.get(t)}_getShaderStage(t){const e=this.shaderCache;if(!1===e.has(t)){const n=new Fr;e.set(t,n)}return e.get(t)}}class Fr{constructor(){this.id=Nr++,this.usedTimes=0}}function Ur(t,e,n,i,r,s,a){const l=new se,c=new Or,h=[],u=r.isWebGL2,d=r.logarithmicDepthBuffer,p=r.floatVertexTextures,m=r.maxVertexUniforms,f=r.vertexTextures;let g=r.precision;const v={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};return{getParameters:function(s,l,h,y,x){const _=y.fog,w=x.geometry,b=s.isMeshStandardMaterial?y.environment:null,M=(s.isMeshStandardMaterial?n:e).get(s.envMap||b),S=!M||M.mapping!==o&&307!==M.mapping?null:M.image.height,T=v[s.type],E=x.isSkinnedMesh?function(t){const e=t.skeleton.bones;if(p)return 1024;{const t=m,n=Math.floor((t-20)/4),i=Math.min(n,e.length);return i<e.length?(console.warn("THREE.WebGLRenderer: Skeleton has "+e.length+" bones. This GPU supports "+i+"."),0):i}}(x):0;null!==s.precision&&(g=r.getMaxPrecision(s.precision),g!==s.precision&&console.warn("THREE.WebGLProgram.getParameters:",s.precision,"not supported, using",g,"instead."));const A=w.morphAttributes.position||w.morphAttributes.normal||w.morphAttributes.color,P=void 0!==A?A.length:0;let R,C,L,D,N=0;if(void 0!==w.morphAttributes.position&&(N=1),void 0!==w.morphAttributes.normal&&(N=2),void 0!==w.morphAttributes.color&&(N=3),T){const t=Fn[T];R=t.vertexShader,C=t.fragmentShader}else R=s.vertexShader,C=s.fragmentShader,c.update(s),L=c.getVertexShaderID(s),D=c.getFragmentShaderID(s);const O=t.getRenderTarget(),F=s.alphaTest>0,U=s.clearcoat>0;return{isWebGL2:u,shaderID:T,shaderName:s.type,vertexShader:R,fragmentShader:C,defines:s.defines,customVertexShaderID:L,customFragmentShaderID:D,isRawShaderMaterial:!0===s.isRawShaderMaterial,glslVersion:s.glslVersion,precision:g,instancing:!0===x.isInstancedMesh,instancingColor:!0===x.isInstancedMesh&&null!==x.instanceColor,supportsVertexTextures:f,outputEncoding:null===O?t.outputEncoding:!0===O.isXRRenderTarget?O.texture.encoding:I,map:!!s.map,matcap:!!s.matcap,envMap:!!M,envMapMode:M&&M.mapping,envMapCubeUVHeight:S,lightMap:!!s.lightMap,aoMap:!!s.aoMap,emissiveMap:!!s.emissiveMap,bumpMap:!!s.bumpMap,normalMap:!!s.normalMap,objectSpaceNormalMap:1===s.normalMapType,tangentSpaceNormalMap:0===s.normalMapType,decodeVideoTexture:!!s.map&&!0===s.map.isVideoTexture&&s.map.encoding===z,clearcoat:U,clearcoatMap:U&&!!s.clearcoatMap,clearcoatRoughnessMap:U&&!!s.clearcoatRoughnessMap,clearcoatNormalMap:U&&!!s.clearcoatNormalMap,displacementMap:!!s.displacementMap,roughnessMap:!!s.roughnessMap,metalnessMap:!!s.metalnessMap,specularMap:!!s.specularMap,specularIntensityMap:!!s.specularIntensityMap,specularColorMap:!!s.specularColorMap,opaque:!1===s.transparent&&1===s.blending,alphaMap:!!s.alphaMap,alphaTest:F,gradientMap:!!s.gradientMap,sheen:s.sheen>0,sheenColorMap:!!s.sheenColorMap,sheenRoughnessMap:!!s.sheenRoughnessMap,transmission:s.transmission>0,transmissionMap:!!s.transmissionMap,thicknessMap:!!s.thicknessMap,combine:s.combine,vertexTangents:!!s.normalMap&&!!w.attributes.tangent,vertexColors:s.vertexColors,vertexAlphas:!0===s.vertexColors&&!!w.attributes.color&&4===w.attributes.color.itemSize,vertexUvs:!!(s.map||s.bumpMap||s.normalMap||s.specularMap||s.alphaMap||s.emissiveMap||s.roughnessMap||s.metalnessMap||s.clearcoatMap||s.clearcoatRoughnessMap||s.clearcoatNormalMap||s.displacementMap||s.transmissionMap||s.thicknessMap||s.specularIntensityMap||s.specularColorMap||s.sheenColorMap||s.sheenRoughnessMap),uvsVertexOnly:!(s.map||s.bumpMap||s.normalMap||s.specularMap||s.alphaMap||s.emissiveMap||s.roughnessMap||s.metalnessMap||s.clearcoatNormalMap||s.transmission>0||s.transmissionMap||s.thicknessMap||s.specularIntensityMap||s.specularColorMap||s.sheen>0||s.sheenColorMap||s.sheenRoughnessMap||!s.displacementMap),fog:!!_,useFog:s.fog,fogExp2:_&&_.isFogExp2,flatShading:!!s.flatShading,sizeAttenuation:s.sizeAttenuation,logarithmicDepthBuffer:d,skinning:!0===x.isSkinnedMesh&&E>0,maxBones:E,useVertexTexture:p,morphTargets:void 0!==w.morphAttributes.position,morphNormals:void 0!==w.morphAttributes.normal,morphColors:void 0!==w.morphAttributes.color,morphTargetsCount:P,morphTextureStride:N,numDirLights:l.directional.length,numPointLights:l.point.length,numSpotLights:l.spot.length,numRectAreaLights:l.rectArea.length,numHemiLights:l.hemi.length,numDirLightShadows:l.directionalShadowMap.length,numPointLightShadows:l.pointShadowMap.length,numSpotLightShadows:l.spotShadowMap.length,numClippingPlanes:a.numPlanes,numClipIntersection:a.numIntersection,dithering:s.dithering,shadowMapEnabled:t.shadowMap.enabled&&h.length>0,shadowMapType:t.shadowMap.type,toneMapping:s.toneMapped?t.toneMapping:0,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:s.premultipliedAlpha,doubleSided:2===s.side,flipSided:1===s.side,depthPacking:void 0!==s.depthPacking&&s.depthPacking,index0AttributeName:s.index0AttributeName,extensionDerivatives:s.extensions&&s.extensions.derivatives,extensionFragDepth:s.extensions&&s.extensions.fragDepth,extensionDrawBuffers:s.extensions&&s.extensions.drawBuffers,extensionShaderTextureLOD:s.extensions&&s.extensions.shaderTextureLOD,rendererExtensionFragDepth:u||i.has("EXT_frag_depth"),rendererExtensionDrawBuffers:u||i.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:u||i.has("EXT_shader_texture_lod"),customProgramCacheKey:s.customProgramCacheKey()}},getProgramCacheKey:function(e){const n=[];if(e.shaderID?n.push(e.shaderID):(n.push(e.customVertexShaderID),n.push(e.customFragmentShaderID)),void 0!==e.defines)for(const t in e.defines)n.push(t),n.push(e.defines[t]);return!1===e.isRawShaderMaterial&&(function(t,e){t.push(e.precision),t.push(e.outputEncoding),t.push(e.envMapMode),t.push(e.envMapCubeUVHeight),t.push(e.combine),t.push(e.vertexUvs),t.push(e.fogExp2),t.push(e.sizeAttenuation),t.push(e.maxBones),t.push(e.morphTargetsCount),t.push(e.morphAttributeCount),t.push(e.numDirLights),t.push(e.numPointLights),t.push(e.numSpotLights),t.push(e.numHemiLights),t.push(e.numRectAreaLights),t.push(e.numDirLightShadows),t.push(e.numPointLightShadows),t.push(e.numSpotLightShadows),t.push(e.shadowMapType),t.push(e.toneMapping),t.push(e.numClippingPlanes),t.push(e.numClipIntersection)}(n,e),function(t,e){l.disableAll(),e.isWebGL2&&l.enable(0),e.supportsVertexTextures&&l.enable(1),e.instancing&&l.enable(2),e.instancingColor&&l.enable(3),e.map&&l.enable(4),e.matcap&&l.enable(5),e.envMap&&l.enable(6),e.lightMap&&l.enable(7),e.aoMap&&l.enable(8),e.emissiveMap&&l.enable(9),e.bumpMap&&l.enable(10),e.normalMap&&l.enable(11),e.objectSpaceNormalMap&&l.enable(12),e.tangentSpaceNormalMap&&l.enable(13),e.clearcoat&&l.enable(14),e.clearcoatMap&&l.enable(15),e.clearcoatRoughnessMap&&l.enable(16),e.clearcoatNormalMap&&l.enable(17),e.displacementMap&&l.enable(18),e.specularMap&&l.enable(19),e.roughnessMap&&l.enable(20),e.metalnessMap&&l.enable(21),e.gradientMap&&l.enable(22),e.alphaMap&&l.enable(23),e.alphaTest&&l.enable(24),e.vertexColors&&l.enable(25),e.vertexAlphas&&l.enable(26),e.vertexUvs&&l.enable(27),e.vertexTangents&&l.enable(28),e.uvsVertexOnly&&l.enable(29),e.fog&&l.enable(30),t.push(l.mask),l.disableAll(),e.useFog&&l.enable(0),e.flatShading&&l.enable(1),e.logarithmicDepthBuffer&&l.enable(2),e.skinning&&l.enable(3),e.useVertexTexture&&l.enable(4),e.morphTargets&&l.enable(5),e.morphNormals&&l.enable(6),e.morphColors&&l.enable(7),e.premultipliedAlpha&&l.enable(8),e.shadowMapEnabled&&l.enable(9),e.physicallyCorrectLights&&l.enable(10),e.doubleSided&&l.enable(11),e.flipSided&&l.enable(12),e.depthPacking&&l.enable(13),e.dithering&&l.enable(14),e.specularIntensityMap&&l.enable(15),e.specularColorMap&&l.enable(16),e.transmission&&l.enable(17),e.transmissionMap&&l.enable(18),e.thicknessMap&&l.enable(19),e.sheen&&l.enable(20),e.sheenColorMap&&l.enable(21),e.sheenRoughnessMap&&l.enable(22),e.decodeVideoTexture&&l.enable(23),e.opaque&&l.enable(24),t.push(l.mask)}(n,e),n.push(t.outputEncoding)),n.push(e.customProgramCacheKey),n.join()},getUniforms:function(t){const e=v[t.type];let n;if(e){const t=Fn[e];n=vn.clone(t.uniforms)}else n=t.uniforms;return n},acquireProgram:function(e,n){let i;for(let t=0,e=h.length;t<e;t++){const e=h[t];if(e.cacheKey===n){i=e,++i.usedTimes;break}}return void 0===i&&(i=new zr(t,n,e,s),h.push(i)),i},releaseProgram:function(t){if(0==--t.usedTimes){const e=h.indexOf(t);h[e]=h[h.length-1],h.pop(),t.destroy()}},releaseShaderCache:function(t){c.remove(t)},programs:h,dispose:function(){c.dispose()}}}function Br(){let t=new WeakMap;return{get:function(e){let n=t.get(e);return void 0===n&&(n={},t.set(e,n)),n},remove:function(e){t.delete(e)},update:function(e,n,i){t.get(e)[n]=i},dispose:function(){t=new WeakMap}}}function Hr(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.material.id!==e.material.id?t.material.id-e.material.id:t.z!==e.z?t.z-e.z:t.id-e.id}function Gr(t,e){return t.groupOrder!==e.groupOrder?t.groupOrder-e.groupOrder:t.renderOrder!==e.renderOrder?t.renderOrder-e.renderOrder:t.z!==e.z?e.z-t.z:t.id-e.id}function kr(){const t=[];let e=0;const n=[],i=[],r=[];function s(n,i,r,s,a,o){let l=t[e];return void 0===l?(l={id:n.id,object:n,geometry:i,material:r,groupOrder:s,renderOrder:n.renderOrder,z:a,group:o},t[e]=l):(l.id=n.id,l.object=n,l.geometry=i,l.material=r,l.groupOrder=s,l.renderOrder=n.renderOrder,l.z=a,l.group=o),e++,l}return{opaque:n,transmissive:i,transparent:r,init:function(){e=0,n.length=0,i.length=0,r.length=0},push:function(t,e,a,o,l,c){const h=s(t,e,a,o,l,c);a.transmission>0?i.push(h):!0===a.transparent?r.push(h):n.push(h)},unshift:function(t,e,a,o,l,c){const h=s(t,e,a,o,l,c);a.transmission>0?i.unshift(h):!0===a.transparent?r.unshift(h):n.unshift(h)},finish:function(){for(let n=e,i=t.length;n<i;n++){const e=t[n];if(null===e.id)break;e.id=null,e.object=null,e.geometry=null,e.material=null,e.group=null}},sort:function(t,e){n.length>1&&n.sort(t||Hr),i.length>1&&i.sort(e||Gr),r.length>1&&r.sort(e||Gr)}}}function Vr(){let t=new WeakMap;return{get:function(e,n){let i;return!1===t.has(e)?(i=new kr,t.set(e,[i])):n>=t.get(e).length?(i=new kr,t.get(e).push(i)):i=t.get(e)[n],i},dispose:function(){t=new WeakMap}}}function Wr(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case"DirectionalLight":n={direction:new vt,color:new st};break;case"SpotLight":n={position:new vt,direction:new vt,color:new st,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new vt,color:new st,distance:0,decay:0};break;case"HemisphereLight":n={direction:new vt,skyColor:new st,groundColor:new st};break;case"RectAreaLight":n={color:new st,position:new vt,halfWidth:new vt,halfHeight:new vt}}return t[e.id]=n,n}}}let jr=0;function qr(t,e){return(e.castShadow?1:0)-(t.castShadow?1:0)}function Xr(t,e){const n=new Wr,i=function(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case"DirectionalLight":case"SpotLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Z};break;case"PointLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Z,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=n,n}}}(),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let t=0;t<9;t++)r.probe.push(new vt);const s=new vt,a=new Yt,o=new Yt;return{setup:function(s,a){let o=0,l=0,c=0;for(let t=0;t<9;t++)r.probe[t].set(0,0,0);let h=0,u=0,d=0,p=0,m=0,f=0,g=0,v=0;s.sort(qr);const y=!0!==a?Math.PI:1;for(let t=0,e=s.length;t<e;t++){const e=s[t],a=e.color,x=e.intensity,_=e.distance,w=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight)o+=a.r*x*y,l+=a.g*x*y,c+=a.b*x*y;else if(e.isLightProbe)for(let t=0;t<9;t++)r.probe[t].addScaledVector(e.sh.coefficients[t],x);else if(e.isDirectionalLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*y),e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,r.directionalShadow[h]=n,r.directionalShadowMap[h]=w,r.directionalShadowMatrix[h]=e.shadow.matrix,f++}r.directional[h]=t,h++}else if(e.isSpotLight){const t=n.get(e);if(t.position.setFromMatrixPosition(e.matrixWorld),t.color.copy(a).multiplyScalar(x*y),t.distance=_,t.coneCos=Math.cos(e.angle),t.penumbraCos=Math.cos(e.angle*(1-e.penumbra)),t.decay=e.decay,e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,r.spotShadow[d]=n,r.spotShadowMap[d]=w,r.spotShadowMatrix[d]=e.shadow.matrix,v++}r.spot[d]=t,d++}else if(e.isRectAreaLight){const t=n.get(e);t.color.copy(a).multiplyScalar(x),t.halfWidth.set(.5*e.width,0,0),t.halfHeight.set(0,.5*e.height,0),r.rectArea[p]=t,p++}else if(e.isPointLight){const t=n.get(e);if(t.color.copy(e.color).multiplyScalar(e.intensity*y),t.distance=e.distance,t.decay=e.decay,e.castShadow){const t=e.shadow,n=i.get(e);n.shadowBias=t.bias,n.shadowNormalBias=t.normalBias,n.shadowRadius=t.radius,n.shadowMapSize=t.mapSize,n.shadowCameraNear=t.camera.near,n.shadowCameraFar=t.camera.far,r.pointShadow[u]=n,r.pointShadowMap[u]=w,r.pointShadowMatrix[u]=e.shadow.matrix,g++}r.point[u]=t,u++}else if(e.isHemisphereLight){const t=n.get(e);t.skyColor.copy(e.color).multiplyScalar(x*y),t.groundColor.copy(e.groundColor).multiplyScalar(x*y),r.hemi[m]=t,m++}}p>0&&(e.isWebGL2||!0===t.has("OES_texture_float_linear")?(r.rectAreaLTC1=On.LTC_FLOAT_1,r.rectAreaLTC2=On.LTC_FLOAT_2):!0===t.has("OES_texture_half_float_linear")?(r.rectAreaLTC1=On.LTC_HALF_1,r.rectAreaLTC2=On.LTC_HALF_2):console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")),r.ambient[0]=o,r.ambient[1]=l,r.ambient[2]=c;const x=r.hash;x.directionalLength===h&&x.pointLength===u&&x.spotLength===d&&x.rectAreaLength===p&&x.hemiLength===m&&x.numDirectionalShadows===f&&x.numPointShadows===g&&x.numSpotShadows===v||(r.directional.length=h,r.spot.length=d,r.rectArea.length=p,r.point.length=u,r.hemi.length=m,r.directionalShadow.length=f,r.directionalShadowMap.length=f,r.pointShadow.length=g,r.pointShadowMap.length=g,r.spotShadow.length=v,r.spotShadowMap.length=v,r.directionalShadowMatrix.length=f,r.pointShadowMatrix.length=g,r.spotShadowMatrix.length=v,x.directionalLength=h,x.pointLength=u,x.spotLength=d,x.rectAreaLength=p,x.hemiLength=m,x.numDirectionalShadows=f,x.numPointShadows=g,x.numSpotShadows=v,r.version=jr++)},setupView:function(t,e){let n=0,i=0,l=0,c=0,h=0;const u=e.matrixWorldInverse;for(let e=0,d=t.length;e<d;e++){const d=t[e];if(d.isDirectionalLight){const t=r.directional[n];t.direction.setFromMatrixPosition(d.matrixWorld),s.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(s),t.direction.transformDirection(u),n++}else if(d.isSpotLight){const t=r.spot[l];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),t.direction.setFromMatrixPosition(d.matrixWorld),s.setFromMatrixPosition(d.target.matrixWorld),t.direction.sub(s),t.direction.transformDirection(u),l++}else if(d.isRectAreaLight){const t=r.rectArea[c];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),o.identity(),a.copy(d.matrixWorld),a.premultiply(u),o.extractRotation(a),t.halfWidth.set(.5*d.width,0,0),t.halfHeight.set(0,.5*d.height,0),t.halfWidth.applyMatrix4(o),t.halfHeight.applyMatrix4(o),c++}else if(d.isPointLight){const t=r.point[i];t.position.setFromMatrixPosition(d.matrixWorld),t.position.applyMatrix4(u),i++}else if(d.isHemisphereLight){const t=r.hemi[h];t.direction.setFromMatrixPosition(d.matrixWorld),t.direction.transformDirection(u),t.direction.normalize(),h++}}},state:r}}function Yr(t,e){const n=new Xr(t,e),i=[],r=[];return{init:function(){i.length=0,r.length=0},state:{lightsArray:i,shadowsArray:r,lights:n},setupLights:function(t){n.setup(i,t)},setupLightsView:function(t){n.setupView(i,t)},pushLight:function(t){i.push(t)},pushShadow:function(t){r.push(t)}}}function Zr(t,e){let n=new WeakMap;return{get:function(i,r=0){let s;return!1===n.has(i)?(s=new Yr(t,e),n.set(i,[s])):r>=n.get(i).length?(s=new Yr(t,e),n.get(i).push(s)):s=n.get(i)[r],s},dispose:function(){n=new WeakMap}}}class Jr extends De{constructor(t){super(),this.type="MeshDepthMaterial",this.depthPacking=3200,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.depthPacking=t.depthPacking,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this}}Jr.prototype.isMeshDepthMaterial=!0;class Kr extends De{constructor(t){super(),this.type="MeshDistanceMaterial",this.referencePosition=new vt,this.nearDistance=1,this.farDistance=1e3,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.fog=!1,this.setValues(t)}copy(t){return super.copy(t),this.referencePosition.copy(t.referencePosition),this.nearDistance=t.nearDistance,this.farDistance=t.farDistance,this.map=t.map,this.alphaMap=t.alphaMap,this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this}}function Qr(t,e,n){let i=new Ln;const r=new Z,s=new Z,a=new dt,o=new Jr({depthPacking:3201}),l=new Kr,c={},h=n.maxTextureSize,p={0:1,1:0,2:2},m=new yn({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Z},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),f=m.clone();f.defines.HORIZONTAL_PASS=1;const g=new Xe;g.setAttribute("position",new Oe(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const v=new dn(g,m),y=this;function x(n,i){const r=e.update(v);m.defines.VSM_SAMPLES!==n.blurSamples&&(m.defines.VSM_SAMPLES=n.blurSamples,f.defines.VSM_SAMPLES=n.blurSamples,m.needsUpdate=!0,f.needsUpdate=!0),m.uniforms.shadow_pass.value=n.map.texture,m.uniforms.resolution.value=n.mapSize,m.uniforms.radius.value=n.radius,t.setRenderTarget(n.mapPass),t.clear(),t.renderBufferDirect(i,null,r,m,v,null),f.uniforms.shadow_pass.value=n.mapPass.texture,f.uniforms.resolution.value=n.mapSize,f.uniforms.radius.value=n.radius,t.setRenderTarget(n.map),t.clear(),t.renderBufferDirect(i,null,r,f,v,null)}function w(e,n,i,r,s,a){let h=null;const u=!0===i.isPointLight?e.customDistanceMaterial:e.customDepthMaterial;if(h=void 0!==u?u:!0===i.isPointLight?l:o,t.localClippingEnabled&&!0===n.clipShadows&&0!==n.clippingPlanes.length||n.displacementMap&&0!==n.displacementScale||n.alphaMap&&n.alphaTest>0){const t=h.uuid,e=n.uuid;let i=c[t];void 0===i&&(i={},c[t]=i);let r=i[e];void 0===r&&(r=h.clone(),i[e]=r),h=r}return h.visible=n.visible,h.wireframe=n.wireframe,h.side=3===a?null!==n.shadowSide?n.shadowSide:n.side:null!==n.shadowSide?n.shadowSide:p[n.side],h.alphaMap=n.alphaMap,h.alphaTest=n.alphaTest,h.clipShadows=n.clipShadows,h.clippingPlanes=n.clippingPlanes,h.clipIntersection=n.clipIntersection,h.displacementMap=n.displacementMap,h.displacementScale=n.displacementScale,h.displacementBias=n.displacementBias,h.wireframeLinewidth=n.wireframeLinewidth,h.linewidth=n.linewidth,!0===i.isPointLight&&!0===h.isMeshDistanceMaterial&&(h.referencePosition.setFromMatrixPosition(i.matrixWorld),h.nearDistance=r,h.farDistance=s),h}function b(n,r,s,a,o){if(!1===n.visible)return;if(n.layers.test(r.layers)&&(n.isMesh||n.isLine||n.isPoints)&&(n.castShadow||n.receiveShadow&&3===o)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(s.matrixWorldInverse,n.matrixWorld);const i=e.update(n),r=n.material;if(Array.isArray(r)){const e=i.groups;for(let l=0,c=e.length;l<c;l++){const c=e[l],h=r[c.materialIndex];if(h&&h.visible){const e=w(n,h,a,s.near,s.far,o);t.renderBufferDirect(s,null,i,e,n,c)}}}else if(r.visible){const e=w(n,r,a,s.near,s.far,o);t.renderBufferDirect(s,null,i,e,n,null)}}const l=n.children;for(let t=0,e=l.length;t<e;t++)b(l[t],r,s,a,o)}this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=1,this.render=function(e,n,o){if(!1===y.enabled)return;if(!1===y.autoUpdate&&!1===y.needsUpdate)return;if(0===e.length)return;const l=t.getRenderTarget(),c=t.getActiveCubeFace(),p=t.getActiveMipmapLevel(),m=t.state;m.setBlending(0),m.buffers.color.setClear(1,1,1,1),m.buffers.depth.setTest(!0),m.setScissorTest(!1);for(let l=0,c=e.length;l<c;l++){const c=e[l],p=c.shadow;if(void 0===p){console.warn("THREE.WebGLShadowMap:",c,"has no shadow.");continue}if(!1===p.autoUpdate&&!1===p.needsUpdate)continue;r.copy(p.mapSize);const f=p.getFrameExtents();if(r.multiply(f),s.copy(p.mapSize),(r.x>h||r.y>h)&&(r.x>h&&(s.x=Math.floor(h/f.x),r.x=s.x*f.x,p.mapSize.x=s.x),r.y>h&&(s.y=Math.floor(h/f.y),r.y=s.y*f.y,p.mapSize.y=s.y)),null===p.map&&!p.isPointLightShadow&&3===this.type){const t={minFilter:d,magFilter:d,format:_};p.map=new pt(r.x,r.y,t),p.map.texture.name=c.name+".shadowMap",p.mapPass=new pt(r.x,r.y,t),p.camera.updateProjectionMatrix()}if(null===p.map){const t={minFilter:u,magFilter:u,format:_};p.map=new pt(r.x,r.y,t),p.map.texture.name=c.name+".shadowMap",p.camera.updateProjectionMatrix()}t.setRenderTarget(p.map),t.clear();const g=p.getViewportCount();for(let t=0;t<g;t++){const e=p.getViewport(t);a.set(s.x*e.x,s.y*e.y,s.x*e.z,s.y*e.w),m.viewport(a),p.updateMatrices(c,t),i=p.getFrustum(),b(n,o,p.camera,c,this.type)}p.isPointLightShadow||3!==this.type||x(p,o),p.needsUpdate=!1}y.needsUpdate=!1,t.setRenderTarget(l,c,p)}}function $r(t,s,a){const o=a.isWebGL2,l=new function(){let e=!1;const n=new dt;let i=null;const r=new dt(0,0,0,0);return{setMask:function(n){i===n||e||(t.colorMask(n,n,n,n),i=n)},setLocked:function(t){e=t},setClear:function(e,i,s,a,o){!0===o&&(e*=a,i*=a,s*=a),n.set(e,i,s,a),!1===r.equals(n)&&(t.clearColor(e,i,s,a),r.copy(n))},reset:function(){e=!1,i=null,r.set(-1,0,0,0)}}},c=new function(){let e=!1,n=null,i=null,r=null;return{setTest:function(t){t?k(2929):V(2929)},setMask:function(i){n===i||e||(t.depthMask(i),n=i)},setFunc:function(e){if(i!==e){if(e)switch(e){case 0:t.depthFunc(512);break;case 1:t.depthFunc(519);break;case 2:t.depthFunc(513);break;case 3:default:t.depthFunc(515);break;case 4:t.depthFunc(514);break;case 5:t.depthFunc(518);break;case 6:t.depthFunc(516);break;case 7:t.depthFunc(517)}else t.depthFunc(515);i=e}},setLocked:function(t){e=t},setClear:function(e){r!==e&&(t.clearDepth(e),r=e)},reset:function(){e=!1,n=null,i=null,r=null}}},h=new function(){let e=!1,n=null,i=null,r=null,s=null,a=null,o=null,l=null,c=null;return{setTest:function(t){e||(t?k(2960):V(2960))},setMask:function(i){n===i||e||(t.stencilMask(i),n=i)},setFunc:function(e,n,a){i===e&&r===n&&s===a||(t.stencilFunc(e,n,a),i=e,r=n,s=a)},setOp:function(e,n,i){a===e&&o===n&&l===i||(t.stencilOp(e,n,i),a=e,o=n,l=i)},setLocked:function(t){e=t},setClear:function(e){c!==e&&(t.clearStencil(e),c=e)},reset:function(){e=!1,n=null,i=null,r=null,s=null,a=null,o=null,l=null,c=null}}};let u={},d={},p=new WeakMap,m=[],f=null,g=!1,v=null,y=null,x=null,_=null,w=null,b=null,M=null,S=!1,T=null,E=null,A=null,P=null,R=null;const C=t.getParameter(35661);let L=!1,D=0;const I=t.getParameter(7938);-1!==I.indexOf("WebGL")?(D=parseFloat(/^WebGL (\d)/.exec(I)[1]),L=D>=1):-1!==I.indexOf("OpenGL ES")&&(D=parseFloat(/^OpenGL ES (\d)/.exec(I)[1]),L=D>=2);let z=null,N={};const O=t.getParameter(3088),F=t.getParameter(2978),U=(new dt).fromArray(O),B=(new dt).fromArray(F);function H(e,n,i){const r=new Uint8Array(4),s=t.createTexture();t.bindTexture(e,s),t.texParameteri(e,10241,9728),t.texParameteri(e,10240,9728);for(let e=0;e<i;e++)t.texImage2D(n+e,0,6408,1,1,0,6408,5121,r);return s}const G={};function k(e){!0!==u[e]&&(t.enable(e),u[e]=!0)}function V(e){!1!==u[e]&&(t.disable(e),u[e]=!1)}G[3553]=H(3553,3553,1),G[34067]=H(34067,34069,6),l.setClear(0,0,0,1),c.setClear(1),h.setClear(0),k(2929),c.setFunc(3),X(!1),Y(1),k(2884),q(0);const W={[e]:32774,101:32778,102:32779};if(o)W[103]=32775,W[104]=32776;else{const t=s.get("EXT_blend_minmax");null!==t&&(W[103]=t.MIN_EXT,W[104]=t.MAX_EXT)}const j={200:0,[n]:1,202:768,[i]:770,210:776,208:774,206:772,203:769,[r]:771,209:775,207:773};function q(n,i,r,s,a,o,l,c){if(0!==n){if(!1===g&&(k(3042),g=!0),5===n)a=a||i,o=o||r,l=l||s,i===y&&a===w||(t.blendEquationSeparate(W[i],W[a]),y=i,w=a),r===x&&s===_&&o===b&&l===M||(t.blendFuncSeparate(j[r],j[s],j[o],j[l]),x=r,_=s,b=o,M=l),v=n,S=null;else if(n!==v||c!==S){if(y===e&&w===e||(t.blendEquation(32774),y=e,w=e),c)switch(n){case 1:t.blendFuncSeparate(1,771,1,771);break;case 2:t.blendFunc(1,1);break;case 3:t.blendFuncSeparate(0,769,0,1);break;case 4:t.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",n)}else switch(n){case 1:t.blendFuncSeparate(770,771,1,771);break;case 2:t.blendFunc(770,1);break;case 3:t.blendFuncSeparate(0,769,0,1);break;case 4:t.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",n)}x=null,_=null,b=null,M=null,v=n,S=c}}else!0===g&&(V(3042),g=!1)}function X(e){T!==e&&(e?t.frontFace(2304):t.frontFace(2305),T=e)}function Y(e){0!==e?(k(2884),e!==E&&(1===e?t.cullFace(1029):2===e?t.cullFace(1028):t.cullFace(1032))):V(2884),E=e}function Z(e,n,i){e?(k(32823),P===n&&R===i||(t.polygonOffset(n,i),P=n,R=i)):V(32823)}function J(e){void 0===e&&(e=33984+C-1),z!==e&&(t.activeTexture(e),z=e)}return{buffers:{color:l,depth:c,stencil:h},enable:k,disable:V,bindFramebuffer:function(e,n){return d[e]!==n&&(t.bindFramebuffer(e,n),d[e]=n,o&&(36009===e&&(d[36160]=n),36160===e&&(d[36009]=n)),!0)},drawBuffers:function(e,n){let i=m,r=!1;if(e)if(i=p.get(n),void 0===i&&(i=[],p.set(n,i)),e.isWebGLMultipleRenderTargets){const t=e.texture;if(i.length!==t.length||36064!==i[0]){for(let e=0,n=t.length;e<n;e++)i[e]=36064+e;i.length=t.length,r=!0}}else 36064!==i[0]&&(i[0]=36064,r=!0);else 1029!==i[0]&&(i[0]=1029,r=!0);r&&(a.isWebGL2?t.drawBuffers(i):s.get("WEBGL_draw_buffers").drawBuffersWEBGL(i))},useProgram:function(e){return f!==e&&(t.useProgram(e),f=e,!0)},setBlending:q,setMaterial:function(t,e){2===t.side?V(2884):k(2884);let n=1===t.side;e&&(n=!n),X(n),1===t.blending&&!1===t.transparent?q(0):q(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha),c.setFunc(t.depthFunc),c.setTest(t.depthTest),c.setMask(t.depthWrite),l.setMask(t.colorWrite);const i=t.stencilWrite;h.setTest(i),i&&(h.setMask(t.stencilWriteMask),h.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask),h.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)),Z(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits),!0===t.alphaToCoverage?k(32926):V(32926)},setFlipSided:X,setCullFace:Y,setLineWidth:function(e){e!==A&&(L&&t.lineWidth(e),A=e)},setPolygonOffset:Z,setScissorTest:function(t){t?k(3089):V(3089)},activeTexture:J,bindTexture:function(e,n){null===z&&J();let i=N[z];void 0===i&&(i={type:void 0,texture:void 0},N[z]=i),i.type===e&&i.texture===n||(t.bindTexture(e,n||G[e]),i.type=e,i.texture=n)},unbindTexture:function(){const e=N[z];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texStorage2D:function(){try{t.texStorage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texStorage3D:function(){try{t.texStorage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage2D:function(){try{t.texSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage3D:function(){try{t.texSubImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage2D:function(){try{t.compressedTexSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===U.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),U.copy(e))},viewport:function(e){!1===B.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),B.copy(e))},reset:function(){t.disable(3042),t.disable(2884),t.disable(2929),t.disable(32823),t.disable(3089),t.disable(2960),t.disable(32926),t.blendEquation(32774),t.blendFunc(1,0),t.blendFuncSeparate(1,0,1,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(513),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(519,0,4294967295),t.stencilOp(7680,7680,7680),t.clearStencil(0),t.cullFace(1029),t.frontFace(2305),t.polygonOffset(0,0),t.activeTexture(33984),t.bindFramebuffer(36160,null),!0===o&&(t.bindFramebuffer(36009,null),t.bindFramebuffer(36008,null)),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),u={},z=null,N={},d={},p=new WeakMap,m=[],f=null,g=!1,v=null,y=null,x=null,_=null,w=null,b=null,M=null,S=!1,T=null,E=null,A=null,P=null,R=null,U.set(0,0,t.canvas.width,t.canvas.height),B.set(0,0,t.canvas.width,t.canvas.height),l.reset(),c.reset(),h.reset()}}}function ts(t,e,n,i,r,s,a){const o=r.isWebGL2,M=r.maxTextures,S=r.maxCubemapSize,T=r.maxTextureSize,E=r.maxSamples,A=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,P=new WeakMap;let R;const C=new WeakMap;let L=!1;try{L="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(t){}function D(t,e){return L?new OffscreenCanvas(t,e):Q("canvas")}function N(t,e,n,i){let r=1;if((t.width>i||t.height>i)&&(r=i/Math.max(t.width,t.height)),r<1||!0===e){if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&t instanceof ImageBitmap){const i=e?Y:Math.floor,s=i(r*t.width),a=i(r*t.height);void 0===R&&(R=D(s,a));const o=n?D(s,a):R;return o.width=s,o.height=a,o.getContext("2d").drawImage(t,0,0,s,a),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+t.width+"x"+t.height+") to ("+s+"x"+a+")."),o}return"data"in t&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+t.width+"x"+t.height+")."),t}return t}function O(t){return X(t.width)&&X(t.height)}function F(t,e){return t.generateMipmaps&&e&&t.minFilter!==u&&t.minFilter!==d}function U(e){t.generateMipmap(e)}function H(n,i,r,s,a=!1){if(!1===o)return i;if(null!==n){if(void 0!==t[n])return t[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let l=i;return 6403===i&&(5126===r&&(l=33326),5131===r&&(l=33325),5121===r&&(l=33321)),33319===i&&(5126===r&&(l=33328),5131===r&&(l=33327),5121===r&&(l=33323)),6408===i&&(5126===r&&(l=34836),5131===r&&(l=34842),5121===r&&(l=s===z&&!1===a?35907:32856),32819===r&&(l=32854),32820===r&&(l=32855)),33325!==l&&33326!==l&&33327!==l&&33328!==l&&34842!==l&&34836!==l||e.get("EXT_color_buffer_float"),l}function G(t,e,n){return!0===F(t,n)||t.isFramebufferTexture&&t.minFilter!==u&&t.minFilter!==d?Math.log2(Math.max(e.width,e.height))+1:void 0!==t.mipmaps&&t.mipmaps.length>0?t.mipmaps.length:t.isCompressedTexture&&Array.isArray(t.image)?e.mipmaps.length:1}function k(t){return t===u||1004===t||1005===t?9728:9729}function V(t){const e=t.target;e.removeEventListener("dispose",V),function(t){const e=i.get(t);if(void 0===e.__webglInit)return;const n=t.source,r=C.get(n);if(r){const i=r[e.__cacheKey];i.usedTimes--,0===i.usedTimes&&j(t),0===Object.keys(r).length&&C.delete(n)}i.remove(t)}(e),e.isVideoTexture&&P.delete(e)}function W(e){const n=e.target;n.removeEventListener("dispose",W),function(e){const n=e.texture,r=i.get(e),s=i.get(n);if(void 0!==s.__webglTexture&&(t.deleteTexture(s.__webglTexture),a.memory.textures--),e.depthTexture&&e.depthTexture.dispose(),e.isWebGLCubeRenderTarget)for(let e=0;e<6;e++)t.deleteFramebuffer(r.__webglFramebuffer[e]),r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer[e]);else t.deleteFramebuffer(r.__webglFramebuffer),r.__webglDepthbuffer&&t.deleteRenderbuffer(r.__webglDepthbuffer),r.__webglMultisampledFramebuffer&&t.deleteFramebuffer(r.__webglMultisampledFramebuffer),r.__webglColorRenderbuffer&&t.deleteRenderbuffer(r.__webglColorRenderbuffer),r.__webglDepthRenderbuffer&&t.deleteRenderbuffer(r.__webglDepthRenderbuffer);if(e.isWebGLMultipleRenderTargets)for(let e=0,r=n.length;e<r;e++){const r=i.get(n[e]);r.__webglTexture&&(t.deleteTexture(r.__webglTexture),a.memory.textures--),i.remove(n[e])}i.remove(n),i.remove(e)}(n)}function j(e){const n=i.get(e);t.deleteTexture(n.__webglTexture);const r=e.source;delete C.get(r)[n.__cacheKey],a.memory.textures--}let q=0;function Z(t,e){const r=i.get(t);if(t.isVideoTexture&&function(t){const e=a.render.frame;P.get(t)!==e&&(P.set(t,e),t.update())}(t),!1===t.isRenderTargetTexture&&t.version>0&&r.__version!==t.version){const n=t.image;if(null===n)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(!1!==n.complete)return void et(r,t,e);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.activeTexture(33984+e),n.bindTexture(3553,r.__webglTexture)}const J={[l]:10497,[c]:33071,[h]:33648},K={[u]:9728,1004:9984,1005:9986,[d]:9729,1007:9985,[p]:9987};function $(n,s,a){if(a?(t.texParameteri(n,10242,J[s.wrapS]),t.texParameteri(n,10243,J[s.wrapT]),32879!==n&&35866!==n||t.texParameteri(n,32882,J[s.wrapR]),t.texParameteri(n,10240,K[s.magFilter]),t.texParameteri(n,10241,K[s.minFilter])):(t.texParameteri(n,10242,33071),t.texParameteri(n,10243,33071),32879!==n&&35866!==n||t.texParameteri(n,32882,33071),s.wrapS===c&&s.wrapT===c||console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping."),t.texParameteri(n,10240,k(s.magFilter)),t.texParameteri(n,10241,k(s.minFilter)),s.minFilter!==u&&s.minFilter!==d&&console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")),!0===e.has("EXT_texture_filter_anisotropic")){const a=e.get("EXT_texture_filter_anisotropic");if(s.type===v&&!1===e.has("OES_texture_float_linear"))return;if(!1===o&&s.type===y&&!1===e.has("OES_texture_half_float_linear"))return;(s.anisotropy>1||i.get(s).__currentAnisotropy)&&(t.texParameterf(n,a.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(s.anisotropy,r.getMaxAnisotropy())),i.get(s).__currentAnisotropy=s.anisotropy)}}function tt(e,n){let i=!1;void 0===e.__webglInit&&(e.__webglInit=!0,n.addEventListener("dispose",V));const r=n.source;let s=C.get(r);void 0===s&&(s={},C.set(r,s));const o=function(t){const e=[];return e.push(t.wrapS),e.push(t.wrapT),e.push(t.magFilter),e.push(t.minFilter),e.push(t.anisotropy),e.push(t.internalFormat),e.push(t.format),e.push(t.type),e.push(t.generateMipmaps),e.push(t.premultiplyAlpha),e.push(t.flipY),e.push(t.unpackAlignment),e.push(t.encoding),e.join()}(n);if(o!==e.__cacheKey){void 0===s[o]&&(s[o]={texture:t.createTexture(),usedTimes:0},a.memory.textures++,i=!0),s[o].usedTimes++;const r=s[e.__cacheKey];void 0!==r&&(s[e.__cacheKey].usedTimes--,0===r.usedTimes&&j(n)),e.__cacheKey=o,e.__webglTexture=s[o].texture}return i}function et(e,i,r){let a=3553;i.isDataArrayTexture&&(a=35866),i.isData3DTexture&&(a=32879);const l=tt(e,i),h=i.source;if(n.activeTexture(33984+r),n.bindTexture(a,e.__webglTexture),h.version!==h.__currentVersion||!0===l){t.pixelStorei(37440,i.flipY),t.pixelStorei(37441,i.premultiplyAlpha),t.pixelStorei(3317,i.unpackAlignment),t.pixelStorei(37443,0);const r=function(t){return!o&&(t.wrapS!==c||t.wrapT!==c||t.minFilter!==u&&t.minFilter!==d)}(i)&&!1===O(i.image);let l=N(i.image,r,!1,T);l=lt(i,l);const p=O(l)||o,m=s.convert(i.format,i.encoding);let y,M=s.convert(i.type),S=H(i.internalFormat,m,M,i.encoding,i.isVideoTexture);$(a,i,p);const E=i.mipmaps,A=o&&!0!==i.isVideoTexture,P=void 0===e.__version,R=G(i,l,p);if(i.isDepthTexture)S=6402,o?S=i.type===v?36012:i.type===g?33190:i.type===x?35056:33189:i.type===v&&console.error("WebGLRenderer: Floating point depth texture requires WebGL2."),i.format===w&&6402===S&&i.type!==f&&i.type!==g&&(console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture."),i.type=f,M=s.convert(i.type)),i.format===b&&6402===S&&(S=34041,i.type!==x&&(console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture."),i.type=x,M=s.convert(i.type))),A&&P?n.texStorage2D(3553,1,S,l.width,l.height):n.texImage2D(3553,0,S,l.width,l.height,0,m,M,null);else if(i.isDataTexture)if(E.length>0&&p){A&&P&&n.texStorage2D(3553,R,S,E[0].width,E[0].height);for(let t=0,e=E.length;t<e;t++)y=E[t],A?n.texSubImage2D(3553,t,0,0,y.width,y.height,m,M,y.data):n.texImage2D(3553,t,S,y.width,y.height,0,m,M,y.data);i.generateMipmaps=!1}else A?(P&&n.texStorage2D(3553,R,S,l.width,l.height),n.texSubImage2D(3553,0,0,0,l.width,l.height,m,M,l.data)):n.texImage2D(3553,0,S,l.width,l.height,0,m,M,l.data);else if(i.isCompressedTexture){A&&P&&n.texStorage2D(3553,R,S,E[0].width,E[0].height);for(let t=0,e=E.length;t<e;t++)y=E[t],i.format!==_?null!==m?A?n.compressedTexSubImage2D(3553,t,0,0,y.width,y.height,m,y.data):n.compressedTexImage2D(3553,t,S,y.width,y.height,0,y.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):A?n.texSubImage2D(3553,t,0,0,y.width,y.height,m,M,y.data):n.texImage2D(3553,t,S,y.width,y.height,0,m,M,y.data)}else if(i.isDataArrayTexture)A?(P&&n.texStorage3D(35866,R,S,l.width,l.height,l.depth),n.texSubImage3D(35866,0,0,0,0,l.width,l.height,l.depth,m,M,l.data)):n.texImage3D(35866,0,S,l.width,l.height,l.depth,0,m,M,l.data);else if(i.isData3DTexture)A?(P&&n.texStorage3D(32879,R,S,l.width,l.height,l.depth),n.texSubImage3D(32879,0,0,0,0,l.width,l.height,l.depth,m,M,l.data)):n.texImage3D(32879,0,S,l.width,l.height,l.depth,0,m,M,l.data);else if(i.isFramebufferTexture)A&&P?n.texStorage2D(3553,R,S,l.width,l.height):n.texImage2D(3553,0,S,l.width,l.height,0,m,M,null);else if(E.length>0&&p){A&&P&&n.texStorage2D(3553,R,S,E[0].width,E[0].height);for(let t=0,e=E.length;t<e;t++)y=E[t],A?n.texSubImage2D(3553,t,0,0,m,M,y):n.texImage2D(3553,t,S,m,M,y);i.generateMipmaps=!1}else A?(P&&n.texStorage2D(3553,R,S,l.width,l.height),n.texSubImage2D(3553,0,0,0,m,M,l)):n.texImage2D(3553,0,S,m,M,l);F(i,p)&&U(a),h.__currentVersion=h.version,i.onUpdate&&i.onUpdate(i)}e.__version=i.version}function nt(e,r,a,o,l){const c=s.convert(a.format,a.encoding),h=s.convert(a.type),u=H(a.internalFormat,c,h,a.encoding);i.get(r).__hasExternalTextures||(32879===l||35866===l?n.texImage3D(l,0,u,r.width,r.height,r.depth,0,c,h,null):n.texImage2D(l,0,u,r.width,r.height,0,c,h,null)),n.bindFramebuffer(36160,e),at(r)?A.framebufferTexture2DMultisampleEXT(36160,o,l,i.get(a).__webglTexture,0,st(r)):t.framebufferTexture2D(36160,o,l,i.get(a).__webglTexture,0),n.bindFramebuffer(36160,null)}function it(e,n,i){if(t.bindRenderbuffer(36161,e),n.depthBuffer&&!n.stencilBuffer){let r=33189;if(i||at(n)){const e=n.depthTexture;e&&e.isDepthTexture&&(e.type===v?r=36012:e.type===g&&(r=33190));const i=st(n);at(n)?A.renderbufferStorageMultisampleEXT(36161,i,r,n.width,n.height):t.renderbufferStorageMultisample(36161,i,r,n.width,n.height)}else t.renderbufferStorage(36161,r,n.width,n.height);t.framebufferRenderbuffer(36160,36096,36161,e)}else if(n.depthBuffer&&n.stencilBuffer){const r=st(n);i&&!1===at(n)?t.renderbufferStorageMultisample(36161,r,35056,n.width,n.height):at(n)?A.renderbufferStorageMultisampleEXT(36161,r,35056,n.width,n.height):t.renderbufferStorage(36161,34041,n.width,n.height),t.framebufferRenderbuffer(36160,33306,36161,e)}else{const e=!0===n.isWebGLMultipleRenderTargets?n.texture[0]:n.texture,r=s.convert(e.format,e.encoding),a=s.convert(e.type),o=H(e.internalFormat,r,a,e.encoding),l=st(n);i&&!1===at(n)?t.renderbufferStorageMultisample(36161,l,o,n.width,n.height):at(n)?A.renderbufferStorageMultisampleEXT(36161,l,o,n.width,n.height):t.renderbufferStorage(36161,o,n.width,n.height)}t.bindRenderbuffer(36161,null)}function rt(e){const r=i.get(e),s=!0===e.isWebGLCubeRenderTarget;if(e.depthTexture&&!r.__autoAllocateDepthBuffer){if(s)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,r){if(r&&r.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(36160,e),!r.depthTexture||!r.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");i.get(r.depthTexture).__webglTexture&&r.depthTexture.image.width===r.width&&r.depthTexture.image.height===r.height||(r.depthTexture.image.width=r.width,r.depthTexture.image.height=r.height,r.depthTexture.needsUpdate=!0),Z(r.depthTexture,0);const s=i.get(r.depthTexture).__webglTexture,a=st(r);if(r.depthTexture.format===w)at(r)?A.framebufferTexture2DMultisampleEXT(36160,36096,3553,s,0,a):t.framebufferTexture2D(36160,36096,3553,s,0);else{if(r.depthTexture.format!==b)throw new Error("Unknown depthTexture format");at(r)?A.framebufferTexture2DMultisampleEXT(36160,33306,3553,s,0,a):t.framebufferTexture2D(36160,33306,3553,s,0)}}(r.__webglFramebuffer,e)}else if(s){r.__webglDepthbuffer=[];for(let i=0;i<6;i++)n.bindFramebuffer(36160,r.__webglFramebuffer[i]),r.__webglDepthbuffer[i]=t.createRenderbuffer(),it(r.__webglDepthbuffer[i],e,!1)}else n.bindFramebuffer(36160,r.__webglFramebuffer),r.__webglDepthbuffer=t.createRenderbuffer(),it(r.__webglDepthbuffer,e,!1);n.bindFramebuffer(36160,null)}function st(t){return Math.min(E,t.samples)}function at(t){const n=i.get(t);return o&&t.samples>0&&!0===e.has("WEBGL_multisampled_render_to_texture")&&!1!==n.__useRenderToTexture}function lt(t,n){const i=t.encoding,r=t.format,s=t.type;return!0===t.isCompressedTexture||!0===t.isVideoTexture||t.format===B||i!==I&&(i===z?!1===o?!0===e.has("EXT_sRGB")&&r===_?(t.format=B,t.minFilter=d,t.generateMipmaps=!1):n=ot.sRGBToLinear(n):r===_&&s===m||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture encoding:",i)),n}this.allocateTextureUnit=function(){const t=q;return t>=M&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+M),q+=1,t},this.resetTextureUnits=function(){q=0},this.setTexture2D=Z,this.setTexture2DArray=function(t,e){const r=i.get(t);t.version>0&&r.__version!==t.version?et(r,t,e):(n.activeTexture(33984+e),n.bindTexture(35866,r.__webglTexture))},this.setTexture3D=function(t,e){const r=i.get(t);t.version>0&&r.__version!==t.version?et(r,t,e):(n.activeTexture(33984+e),n.bindTexture(32879,r.__webglTexture))},this.setTextureCube=function(e,r){const a=i.get(e);e.version>0&&a.__version!==e.version?function(e,i,r){if(6!==i.image.length)return;const a=tt(e,i),l=i.source;if(n.activeTexture(33984+r),n.bindTexture(34067,e.__webglTexture),l.version!==l.__currentVersion||!0===a){t.pixelStorei(37440,i.flipY),t.pixelStorei(37441,i.premultiplyAlpha),t.pixelStorei(3317,i.unpackAlignment),t.pixelStorei(37443,0);const r=i.isCompressedTexture||i.image[0].isCompressedTexture,a=i.image[0]&&i.image[0].isDataTexture,c=[];for(let t=0;t<6;t++)c[t]=r||a?a?i.image[t].image:i.image[t]:N(i.image[t],!1,!0,S),c[t]=lt(i,c[t]);const h=c[0],u=O(h)||o,d=s.convert(i.format,i.encoding),p=s.convert(i.type),m=H(i.internalFormat,d,p,i.encoding),f=o&&!0!==i.isVideoTexture,g=void 0===e.__version;let v,y=G(i,h,u);if($(34067,i,u),r){f&&g&&n.texStorage2D(34067,y,m,h.width,h.height);for(let t=0;t<6;t++){v=c[t].mipmaps;for(let e=0;e<v.length;e++){const r=v[e];i.format!==_?null!==d?f?n.compressedTexSubImage2D(34069+t,e,0,0,r.width,r.height,d,r.data):n.compressedTexImage2D(34069+t,e,m,r.width,r.height,0,r.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):f?n.texSubImage2D(34069+t,e,0,0,r.width,r.height,d,p,r.data):n.texImage2D(34069+t,e,m,r.width,r.height,0,d,p,r.data)}}}else{v=i.mipmaps,f&&g&&(v.length>0&&y++,n.texStorage2D(34067,y,m,c[0].width,c[0].height));for(let t=0;t<6;t++)if(a){f?n.texSubImage2D(34069+t,0,0,0,c[t].width,c[t].height,d,p,c[t].data):n.texImage2D(34069+t,0,m,c[t].width,c[t].height,0,d,p,c[t].data);for(let e=0;e<v.length;e++){const i=v[e].image[t].image;f?n.texSubImage2D(34069+t,e+1,0,0,i.width,i.height,d,p,i.data):n.texImage2D(34069+t,e+1,m,i.width,i.height,0,d,p,i.data)}}else{f?n.texSubImage2D(34069+t,0,0,0,d,p,c[t]):n.texImage2D(34069+t,0,m,d,p,c[t]);for(let e=0;e<v.length;e++){const i=v[e];f?n.texSubImage2D(34069+t,e+1,0,0,d,p,i.image[t]):n.texImage2D(34069+t,e+1,m,d,p,i.image[t])}}}F(i,u)&&U(34067),l.__currentVersion=l.version,i.onUpdate&&i.onUpdate(i)}e.__version=i.version}(a,e,r):(n.activeTexture(33984+r),n.bindTexture(34067,a.__webglTexture))},this.rebindTextures=function(t,e,n){const r=i.get(t);void 0!==e&&nt(r.__webglFramebuffer,t,t.texture,36064,3553),void 0!==n&&rt(t)},this.setupRenderTarget=function(e){const l=e.texture,c=i.get(e),h=i.get(l);e.addEventListener("dispose",W),!0!==e.isWebGLMultipleRenderTargets&&(void 0===h.__webglTexture&&(h.__webglTexture=t.createTexture()),h.__version=l.version,a.memory.textures++);const u=!0===e.isWebGLCubeRenderTarget,d=!0===e.isWebGLMultipleRenderTargets,p=O(e)||o;if(u){c.__webglFramebuffer=[];for(let e=0;e<6;e++)c.__webglFramebuffer[e]=t.createFramebuffer()}else if(c.__webglFramebuffer=t.createFramebuffer(),d)if(r.drawBuffers){const n=e.texture;for(let e=0,r=n.length;e<r;e++){const r=i.get(n[e]);void 0===r.__webglTexture&&(r.__webglTexture=t.createTexture(),a.memory.textures++)}}else console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.");else if(o&&e.samples>0&&!1===at(e)){c.__webglMultisampledFramebuffer=t.createFramebuffer(),c.__webglColorRenderbuffer=t.createRenderbuffer(),t.bindRenderbuffer(36161,c.__webglColorRenderbuffer);const i=s.convert(l.format,l.encoding),r=s.convert(l.type),a=H(l.internalFormat,i,r,l.encoding),o=st(e);t.renderbufferStorageMultisample(36161,o,a,e.width,e.height),n.bindFramebuffer(36160,c.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(36160,36064,36161,c.__webglColorRenderbuffer),t.bindRenderbuffer(36161,null),e.depthBuffer&&(c.__webglDepthRenderbuffer=t.createRenderbuffer(),it(c.__webglDepthRenderbuffer,e,!0)),n.bindFramebuffer(36160,null)}if(u){n.bindTexture(34067,h.__webglTexture),$(34067,l,p);for(let t=0;t<6;t++)nt(c.__webglFramebuffer[t],e,l,36064,34069+t);F(l,p)&&U(34067),n.unbindTexture()}else if(d){const t=e.texture;for(let r=0,s=t.length;r<s;r++){const s=t[r],a=i.get(s);n.bindTexture(3553,a.__webglTexture),$(3553,s,p),nt(c.__webglFramebuffer,e,s,36064+r,3553),F(s,p)&&U(3553)}n.unbindTexture()}else{let t=3553;(e.isWebGL3DRenderTarget||e.isWebGLArrayRenderTarget)&&(o?t=e.isWebGL3DRenderTarget?32879:35866:console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")),n.bindTexture(t,h.__webglTexture),$(t,l,p),nt(c.__webglFramebuffer,e,l,36064,t),F(l,p)&&U(t),n.unbindTexture()}e.depthBuffer&&rt(e)},this.updateRenderTargetMipmap=function(t){const e=O(t)||o,r=!0===t.isWebGLMultipleRenderTargets?t.texture:[t.texture];for(let s=0,a=r.length;s<a;s++){const a=r[s];if(F(a,e)){const e=t.isWebGLCubeRenderTarget?34067:3553,r=i.get(a).__webglTexture;n.bindTexture(e,r),U(e),n.unbindTexture()}}},this.updateMultisampleRenderTarget=function(e){if(o&&e.samples>0&&!1===at(e)){const r=e.width,s=e.height;let a=16384;const o=[36064],l=e.stencilBuffer?33306:36096;e.depthBuffer&&o.push(l);const c=i.get(e),h=void 0!==c.__ignoreDepthValues&&c.__ignoreDepthValues;!1===h&&(e.depthBuffer&&(a|=256),e.stencilBuffer&&(a|=1024)),n.bindFramebuffer(36008,c.__webglMultisampledFramebuffer),n.bindFramebuffer(36009,c.__webglFramebuffer),!0===h&&(t.invalidateFramebuffer(36008,[l]),t.invalidateFramebuffer(36009,[l])),t.blitFramebuffer(0,0,r,s,0,0,r,s,a,9728),t.invalidateFramebuffer(36008,o),n.bindFramebuffer(36008,null),n.bindFramebuffer(36009,c.__webglMultisampledFramebuffer)}},this.setupDepthRenderbuffer=rt,this.setupFrameBufferTexture=nt,this.useMultisampledRTT=at}function es(t,e,n){const i=n.isWebGL2;return{convert:function(t,n=null){let r;if(t===m)return 5121;if(1017===t)return 32819;if(1018===t)return 32820;if(1010===t)return 5120;if(1011===t)return 5122;if(t===f)return 5123;if(1013===t)return 5124;if(t===g)return 5125;if(t===v)return 5126;if(t===y)return i?5131:(r=e.get("OES_texture_half_float"),null!==r?r.HALF_FLOAT_OES:null);if(1021===t)return 6406;if(t===_)return 6408;if(1024===t)return 6409;if(1025===t)return 6410;if(t===w)return 6402;if(t===b)return 34041;if(1028===t)return 6403;if(1022===t)return console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228"),6408;if(t===B)return r=e.get("EXT_sRGB"),null!==r?r.SRGB_ALPHA_EXT:null;if(1029===t)return 36244;if(1030===t)return 33319;if(1031===t)return 33320;if(1033===t)return 36249;if(t===M||t===S||t===T||t===E)if(n===z){if(r=e.get("WEBGL_compressed_texture_s3tc_srgb"),null===r)return null;if(t===M)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(t===S)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(t===T)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(t===E)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(r=e.get("WEBGL_compressed_texture_s3tc"),null===r)return null;if(t===M)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===S)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===T)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===E)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(35840===t||35841===t||35842===t||35843===t){if(r=e.get("WEBGL_compressed_texture_pvrtc"),null===r)return null;if(35840===t)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(35841===t)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(35842===t)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(35843===t)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(36196===t)return r=e.get("WEBGL_compressed_texture_etc1"),null!==r?r.COMPRESSED_RGB_ETC1_WEBGL:null;if(37492===t||37496===t){if(r=e.get("WEBGL_compressed_texture_etc"),null===r)return null;if(37492===t)return n===z?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(37496===t)return n===z?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}if(37808===t||37809===t||37810===t||37811===t||37812===t||37813===t||37814===t||37815===t||37816===t||37817===t||37818===t||37819===t||37820===t||37821===t){if(r=e.get("WEBGL_compressed_texture_astc"),null===r)return null;if(37808===t)return n===z?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(37809===t)return n===z?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(37810===t)return n===z?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(37811===t)return n===z?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(37812===t)return n===z?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(37813===t)return n===z?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(37814===t)return n===z?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(37815===t)return n===z?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(37816===t)return n===z?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(37817===t)return n===z?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(37818===t)return n===z?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(37819===t)return n===z?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(37820===t)return n===z?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(37821===t)return n===z?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}if(36492===t){if(r=e.get("EXT_texture_compression_bptc"),null===r)return null;if(36492===t)return n===z?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT}return t===x?i?34042:(r=e.get("WEBGL_depth_texture"),null!==r?r.UNSIGNED_INT_24_8_WEBGL:null):void 0}}}Kr.prototype.isMeshDistanceMaterial=!0;class ns extends _n{constructor(t=[]){super(),this.cameras=t}}ns.prototype.isArrayCamera=!0;class is extends xe{constructor(){super(),this.type="Group"}}is.prototype.isGroup=!0;const rs={type:"move"};class ss{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new is,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new is,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new vt,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new vt),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new is,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new vt,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new vt),this._grip}dispatchEvent(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(t,e,n){let i=null,r=null,s=null;const a=this._targetRay,o=this._grip,l=this._hand;if(t&&"visible-blurred"!==e.session.visibilityState)if(null!==a&&(i=e.getPose(t.targetRaySpace,n),null!==i&&(a.matrix.fromArray(i.transform.matrix),a.matrix.decompose(a.position,a.rotation,a.scale),i.linearVelocity?(a.hasLinearVelocity=!0,a.linearVelocity.copy(i.linearVelocity)):a.hasLinearVelocity=!1,i.angularVelocity?(a.hasAngularVelocity=!0,a.angularVelocity.copy(i.angularVelocity)):a.hasAngularVelocity=!1,this.dispatchEvent(rs))),l&&t.hand){s=!0;for(const i of t.hand.values()){const t=e.getJointPose(i,n);if(void 0===l.joints[i.jointName]){const t=new is;t.matrixAutoUpdate=!1,t.visible=!1,l.joints[i.jointName]=t,l.add(t)}const r=l.joints[i.jointName];null!==t&&(r.matrix.fromArray(t.transform.matrix),r.matrix.decompose(r.position,r.rotation,r.scale),r.jointRadius=t.radius),r.visible=null!==t}const i=l.joints["index-finger-tip"],r=l.joints["thumb-tip"],a=i.position.distanceTo(r.position),o=.02,c=.005;l.inputState.pinching&&a>o+c?(l.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!l.inputState.pinching&&a<=o-c&&(l.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else null!==o&&t.gripSpace&&(r=e.getPose(t.gripSpace,n),null!==r&&(o.matrix.fromArray(r.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),r.linearVelocity?(o.hasLinearVelocity=!0,o.linearVelocity.copy(r.linearVelocity)):o.hasLinearVelocity=!1,r.angularVelocity?(o.hasAngularVelocity=!0,o.angularVelocity.copy(r.angularVelocity)):o.hasAngularVelocity=!1));return null!==a&&(a.visible=null!==i),null!==o&&(o.visible=null!==r),null!==l&&(l.visible=null!==s),this}}class as extends ut{constructor(t,e,n,i,r,s,a,o,l,c){if((c=void 0!==c?c:w)!==w&&c!==b)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&c===w&&(n=f),void 0===n&&c===b&&(n=x),super(null,i,r,s,a,o,c,n,l),this.image={width:t,height:e},this.magFilter=void 0!==a?a:u,this.minFilter=void 0!==o?o:u,this.flipY=!1,this.generateMipmaps=!1}}as.prototype.isDepthTexture=!0;class os extends H{constructor(t,e){super();const n=this;let i=null,r=1,s=null,a="local-floor",o=null,l=null,c=null,h=null,u=null;const d=e.getContextAttributes();let p=null,g=null;const v=[],y=new Map,M=new _n;M.layers.enable(1),M.viewport=new dt;const S=new _n;S.layers.enable(2),S.viewport=new dt;const T=[M,S],E=new ns;E.layers.enable(1),E.layers.enable(2);let A=null,P=null;function R(t){const e=y.get(t.inputSource);e&&e.dispatchEvent({type:t.type,data:t.inputSource})}function C(){y.forEach((function(t,e){t.disconnect(e)})),y.clear(),A=null,P=null,t.setRenderTarget(p),h=null,c=null,l=null,i=null,g=null,F.stop(),n.isPresenting=!1,n.dispatchEvent({type:"sessionend"})}function L(t){const e=i.inputSources;for(let t=0;t<v.length;t++)y.set(e[t],v[t]);for(let e=0;e<t.removed.length;e++){const n=t.removed[e],i=y.get(n);i&&(i.dispatchEvent({type:"disconnected",data:n}),y.delete(n))}for(let e=0;e<t.added.length;e++){const n=t.added[e],i=y.get(n);i&&i.dispatchEvent({type:"connected",data:n})}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(t){let e=v[t];return void 0===e&&(e=new ss,v[t]=e),e.getTargetRaySpace()},this.getControllerGrip=function(t){let e=v[t];return void 0===e&&(e=new ss,v[t]=e),e.getGripSpace()},this.getHand=function(t){let e=v[t];return void 0===e&&(e=new ss,v[t]=e),e.getHandSpace()},this.setFramebufferScaleFactor=function(t){r=t,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(t){a=t,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return s},this.getBaseLayer=function(){return null!==c?c:h},this.getBinding=function(){return l},this.getFrame=function(){return u},this.getSession=function(){return i},this.setSession=async function(o){if(i=o,null!==i){if(p=t.getRenderTarget(),i.addEventListener("select",R),i.addEventListener("selectstart",R),i.addEventListener("selectend",R),i.addEventListener("squeeze",R),i.addEventListener("squeezestart",R),i.addEventListener("squeezeend",R),i.addEventListener("end",C),i.addEventListener("inputsourceschange",L),!0!==d.xrCompatible&&await e.makeXRCompatible(),void 0===i.renderState.layers||!1===t.capabilities.isWebGL2){const n={antialias:void 0!==i.renderState.layers||d.antialias,alpha:d.alpha,depth:d.depth,stencil:d.stencil,framebufferScaleFactor:r};h=new XRWebGLLayer(i,e,n),i.updateRenderState({baseLayer:h}),g=new pt(h.framebufferWidth,h.framebufferHeight,{format:_,type:m,encoding:t.outputEncoding})}else{let n=null,s=null,a=null;d.depth&&(a=d.stencil?35056:33190,n=d.stencil?b:w,s=d.stencil?x:f);const o={colorFormat:t.outputEncoding===z?35907:32856,depthFormat:a,scaleFactor:r};l=new XRWebGLBinding(i,e),c=l.createProjectionLayer(o),i.updateRenderState({layers:[c]}),g=new pt(c.textureWidth,c.textureHeight,{format:_,type:m,depthTexture:new as(c.textureWidth,c.textureHeight,s,void 0,void 0,void 0,void 0,void 0,void 0,n),stencilBuffer:d.stencil,encoding:t.outputEncoding,samples:d.antialias?4:0}),t.properties.get(g).__ignoreDepthValues=c.ignoreDepthValues}g.isXRRenderTarget=!0,this.setFoveation(1),s=await i.requestReferenceSpace(a),F.setContext(i),F.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}};const D=new vt,I=new vt;function N(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.updateCamera=function(t){if(null===i)return;E.near=S.near=M.near=t.near,E.far=S.far=M.far=t.far,A===E.near&&P===E.far||(i.updateRenderState({depthNear:E.near,depthFar:E.far}),A=E.near,P=E.far);const e=t.parent,n=E.cameras;N(E,e);for(let t=0;t<n.length;t++)N(n[t],e);E.matrixWorld.decompose(E.position,E.quaternion,E.scale),t.position.copy(E.position),t.quaternion.copy(E.quaternion),t.scale.copy(E.scale),t.matrix.copy(E.matrix),t.matrixWorld.copy(E.matrixWorld);const r=t.children;for(let t=0,e=r.length;t<e;t++)r[t].updateMatrixWorld(!0);2===n.length?function(t,e,n){D.setFromMatrixPosition(e.matrixWorld),I.setFromMatrixPosition(n.matrixWorld);const i=D.distanceTo(I),r=e.projectionMatrix.elements,s=n.projectionMatrix.elements,a=r[14]/(r[10]-1),o=r[14]/(r[10]+1),l=(r[9]+1)/r[5],c=(r[9]-1)/r[5],h=(r[8]-1)/r[0],u=(s[8]+1)/s[0],d=a*h,p=a*u,m=i/(-h+u),f=m*-h;e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(f),t.translateZ(m),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert();const g=a+m,v=o+m,y=d-f,x=p+(i-f),_=l*o/v*g,w=c*o/v*g;t.projectionMatrix.makePerspective(y,x,_,w,g,v)}(E,M,S):E.projectionMatrix.copy(M.projectionMatrix)},this.getCamera=function(){return E},this.getFoveation=function(){return null!==c?c.fixedFoveation:null!==h?h.fixedFoveation:void 0},this.setFoveation=function(t){null!==c&&(c.fixedFoveation=t),null!==h&&void 0!==h.fixedFoveation&&(h.fixedFoveation=t)};let O=null;const F=new Dn;F.setAnimationLoop((function(e,n){if(o=n.getViewerPose(s),u=n,null!==o){const e=o.views;null!==h&&(t.setRenderTargetFramebuffer(g,h.framebuffer),t.setRenderTarget(g));let n=!1;e.length!==E.cameras.length&&(E.cameras.length=0,n=!0);for(let i=0;i<e.length;i++){const r=e[i];let s=null;if(null!==h)s=h.getViewport(r);else{const e=l.getViewSubImage(c,r);s=e.viewport,0===i&&(t.setRenderTargetTextures(g,e.colorTexture,c.ignoreDepthValues?void 0:e.depthStencilTexture),t.setRenderTarget(g))}const a=T[i];a.matrix.fromArray(r.transform.matrix),a.projectionMatrix.fromArray(r.projectionMatrix),a.viewport.set(s.x,s.y,s.width,s.height),0===i&&E.matrix.copy(a.matrix),!0===n&&E.cameras.push(a)}}const r=i.inputSources;for(let t=0;t<v.length;t++){const e=v[t],i=r[t];e.update(i,n,s)}O&&O(e,n),u=null})),this.setAnimationLoop=function(t){O=t},this.dispose=function(){}}}function ls(t){function e(e,n){e.opacity.value=n.opacity,n.color&&e.diffuse.value.copy(n.color),n.emissive&&e.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity),n.map&&(e.map.value=n.map),n.alphaMap&&(e.alphaMap.value=n.alphaMap),n.specularMap&&(e.specularMap.value=n.specularMap),n.alphaTest>0&&(e.alphaTest.value=n.alphaTest);const i=t.get(n).envMap;let r,s;i&&(e.envMap.value=i,e.flipEnvMap.value=i.isCubeTexture&&!1===i.isRenderTargetTexture?-1:1,e.reflectivity.value=n.reflectivity,e.ior.value=n.ior,e.refractionRatio.value=n.refractionRatio),n.lightMap&&(e.lightMap.value=n.lightMap,e.lightMapIntensity.value=n.lightMapIntensity),n.aoMap&&(e.aoMap.value=n.aoMap,e.aoMapIntensity.value=n.aoMapIntensity),n.map?r=n.map:n.specularMap?r=n.specularMap:n.displacementMap?r=n.displacementMap:n.normalMap?r=n.normalMap:n.bumpMap?r=n.bumpMap:n.roughnessMap?r=n.roughnessMap:n.metalnessMap?r=n.metalnessMap:n.alphaMap?r=n.alphaMap:n.emissiveMap?r=n.emissiveMap:n.clearcoatMap?r=n.clearcoatMap:n.clearcoatNormalMap?r=n.clearcoatNormalMap:n.clearcoatRoughnessMap?r=n.clearcoatRoughnessMap:n.specularIntensityMap?r=n.specularIntensityMap:n.specularColorMap?r=n.specularColorMap:n.transmissionMap?r=n.transmissionMap:n.thicknessMap?r=n.thicknessMap:n.sheenColorMap?r=n.sheenColorMap:n.sheenRoughnessMap&&(r=n.sheenRoughnessMap),void 0!==r&&(r.isWebGLRenderTarget&&(r=r.texture),!0===r.matrixAutoUpdate&&r.updateMatrix(),e.uvTransform.value.copy(r.matrix)),n.aoMap?s=n.aoMap:n.lightMap&&(s=n.lightMap),void 0!==s&&(s.isWebGLRenderTarget&&(s=s.texture),!0===s.matrixAutoUpdate&&s.updateMatrix(),e.uv2Transform.value.copy(s.matrix))}function n(e,n){e.roughness.value=n.roughness,e.metalness.value=n.metalness,n.roughnessMap&&(e.roughnessMap.value=n.roughnessMap),n.metalnessMap&&(e.metalnessMap.value=n.metalnessMap),n.emissiveMap&&(e.emissiveMap.value=n.emissiveMap),n.bumpMap&&(e.bumpMap.value=n.bumpMap,e.bumpScale.value=n.bumpScale,1===n.side&&(e.bumpScale.value*=-1)),n.normalMap&&(e.normalMap.value=n.normalMap,e.normalScale.value.copy(n.normalScale),1===n.side&&e.normalScale.value.negate()),n.displacementMap&&(e.displacementMap.value=n.displacementMap,e.displacementScale.value=n.displacementScale,e.displacementBias.value=n.displacementBias),t.get(n).envMap&&(e.envMapIntensity.value=n.envMapIntensity)}return{refreshFogUniforms:function(t,e){t.fogColor.value.copy(e.color),e.isFog?(t.fogNear.value=e.near,t.fogFar.value=e.far):e.isFogExp2&&(t.fogDensity.value=e.density)},refreshMaterialUniforms:function(t,i,r,s,a){i.isMeshBasicMaterial?e(t,i):i.isMeshLambertMaterial?(e(t,i),function(t,e){e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap)}(t,i)):i.isMeshToonMaterial?(e(t,i),function(t,e){e.gradientMap&&(t.gradientMap.value=e.gradientMap),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,i)):i.isMeshPhongMaterial?(e(t,i),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4),e.emissiveMap&&(t.emissiveMap.value=e.emissiveMap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,i)):i.isMeshStandardMaterial?(e(t,i),i.isMeshPhysicalMaterial?function(t,e,i){n(t,e),t.ior.value=e.ior,e.sheen>0&&(t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen),t.sheenRoughness.value=e.sheenRoughness,e.sheenColorMap&&(t.sheenColorMap.value=e.sheenColorMap),e.sheenRoughnessMap&&(t.sheenRoughnessMap.value=e.sheenRoughnessMap)),e.clearcoat>0&&(t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap),e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap),e.clearcoatNormalMap&&(t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),t.clearcoatNormalMap.value=e.clearcoatNormalMap,1===e.side&&t.clearcoatNormalScale.value.negate())),e.transmission>0&&(t.transmission.value=e.transmission,t.transmissionSamplerMap.value=i.texture,t.transmissionSamplerSize.value.set(i.width,i.height),e.transmissionMap&&(t.transmissionMap.value=e.transmissionMap),t.thickness.value=e.thickness,e.thicknessMap&&(t.thicknessMap.value=e.thicknessMap),t.attenuationDistance.value=e.attenuationDistance,t.attenuationColor.value.copy(e.attenuationColor)),t.specularIntensity.value=e.specularIntensity,t.specularColor.value.copy(e.specularColor),e.specularIntensityMap&&(t.specularIntensityMap.value=e.specularIntensityMap),e.specularColorMap&&(t.specularColorMap.value=e.specularColorMap)}(t,i,a):n(t,i)):i.isMeshMatcapMaterial?(e(t,i),function(t,e){e.matcap&&(t.matcap.value=e.matcap),e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,i)):i.isMeshDepthMaterial?(e(t,i),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,i)):i.isMeshDistanceMaterial?(e(t,i),function(t,e){e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias),t.referencePosition.value.copy(e.referencePosition),t.nearDistance.value=e.nearDistance,t.farDistance.value=e.farDistance}(t,i)):i.isMeshNormalMaterial?(e(t,i),function(t,e){e.bumpMap&&(t.bumpMap.value=e.bumpMap,t.bumpScale.value=e.bumpScale,1===e.side&&(t.bumpScale.value*=-1)),e.normalMap&&(t.normalMap.value=e.normalMap,t.normalScale.value.copy(e.normalScale),1===e.side&&t.normalScale.value.negate()),e.displacementMap&&(t.displacementMap.value=e.displacementMap,t.displacementScale.value=e.displacementScale,t.displacementBias.value=e.displacementBias)}(t,i)):i.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity}(t,i),i.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(t,i)):i.isPointsMaterial?function(t,e,n,i){let r;t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*n,t.scale.value=.5*i,e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.alphaTest>0&&(t.alphaTest.value=e.alphaTest),e.map?r=e.map:e.alphaMap&&(r=e.alphaMap),void 0!==r&&(!0===r.matrixAutoUpdate&&r.updateMatrix(),t.uvTransform.value.copy(r.matrix))}(t,i,r,s):i.isSpriteMaterial?function(t,e){let n;t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map),e.alphaMap&&(t.alphaMap.value=e.alphaMap),e.alphaTest>0&&(t.alphaTest.value=e.alphaTest),e.map?n=e.map:e.alphaMap&&(n=e.alphaMap),void 0!==n&&(!0===n.matrixAutoUpdate&&n.updateMatrix(),t.uvTransform.value.copy(n.matrix))}(t,i):i.isShadowMaterial?(t.color.value.copy(i.color),t.opacity.value=i.opacity):i.isShaderMaterial&&(i.uniformsNeedUpdate=!1)}}}function cs(t={}){const e=void 0!==t.canvas?t.canvas:function(){const t=Q("canvas");return t.style.display="block",t}(),n=void 0!==t.context?t.context:null,i=void 0===t.depth||t.depth,r=void 0===t.stencil||t.stencil,s=void 0!==t.antialias&&t.antialias,a=void 0===t.premultipliedAlpha||t.premultipliedAlpha,o=void 0!==t.preserveDrawingBuffer&&t.preserveDrawingBuffer,l=void 0!==t.powerPreference?t.powerPreference:"default",c=void 0!==t.failIfMajorPerformanceCaveat&&t.failIfMajorPerformanceCaveat;let h;h=void 0!==t.context?n.getContextAttributes().alpha:void 0!==t.alpha&&t.alpha;let u=null,d=null;const f=[],g=[];this.domElement=e,this.debug={checkShaderErrors:!0},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this.outputEncoding=I,this.physicallyCorrectLights=!1,this.toneMapping=0,this.toneMappingExposure=1;const x=this;let w=!1,b=0,M=0,S=null,T=-1,E=null;const A=new dt,P=new dt;let R=null,C=e.width,L=e.height,D=1,z=null,N=null;const O=new dt(0,0,C,L),F=new dt(0,0,C,L);let U=!1;const B=new Ln;let H=!1,G=!1,k=null;const V=new Yt,W=new Z,j=new vt,q={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};function X(){return null===S?D:1}let J,K,$,tt,et,nt,it,rt,st,at,ot,lt,ct,ht,ut,mt,ft,gt,yt,xt,_t,wt,bt,Mt=n;function St(t,n){for(let i=0;i<t.length;i++){const r=t[i],s=e.getContext(r,n);if(null!==s)return s}return null}try{const t={alpha:!0,depth:i,stencil:r,antialias:s,premultipliedAlpha:a,preserveDrawingBuffer:o,powerPreference:l,failIfMajorPerformanceCaveat:c};if("setAttribute"in e&&e.setAttribute("data-engine","three.js r138"),e.addEventListener("webglcontextlost",At,!1),e.addEventListener("webglcontextrestored",Pt,!1),null===Mt){const e=["webgl2","webgl","experimental-webgl"];if(!0===x.isWebGL1Renderer&&e.shift(),Mt=St(e,t),null===Mt)throw St(e)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}void 0===Mt.getShaderPrecisionFormat&&(Mt.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}})}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function Tt(){J=new ri(Mt),K=new Gn(Mt,J,t),J.init(K),wt=new es(Mt,J,K),$=new $r(Mt,J,K),tt=new oi(Mt),et=new Br,nt=new ts(Mt,J,$,et,K,wt,tt),it=new Vn(x),rt=new ii(x),st=new In(Mt,K),bt=new Bn(Mt,J,st,K),at=new si(Mt,st,tt,bt),ot=new di(Mt,at,st,tt),yt=new ui(Mt,K,nt),mt=new kn(et),lt=new Ur(x,it,rt,J,K,bt,mt),ct=new ls(et),ht=new Vr,ut=new Zr(J,K),gt=new Un(x,it,$,ot,h,a),ft=new Qr(x,ot,K),xt=new Hn(Mt,J,tt,K),_t=new ai(Mt,J,tt,K),tt.programs=lt.programs,x.capabilities=K,x.extensions=J,x.properties=et,x.renderLists=ht,x.shadowMap=ft,x.state=$,x.info=tt}Tt();const Et=new os(x,Mt);function At(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),w=!0}function Pt(){console.log("THREE.WebGLRenderer: Context Restored."),w=!1;const t=tt.autoReset,e=ft.enabled,n=ft.autoUpdate,i=ft.needsUpdate,r=ft.type;Tt(),tt.autoReset=t,ft.enabled=e,ft.autoUpdate=n,ft.needsUpdate=i,ft.type=r}function Rt(t){const e=t.target;e.removeEventListener("dispose",Rt),function(t){(function(t){const e=et.get(t).programs;void 0!==e&&(e.forEach((function(t){lt.releaseProgram(t)})),t.isShaderMaterial&&lt.releaseShaderCache(t))})(t),et.remove(t)}(e)}this.xr=Et,this.getContext=function(){return Mt},this.getContextAttributes=function(){return Mt.getContextAttributes()},this.forceContextLoss=function(){const t=J.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){const t=J.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return D},this.setPixelRatio=function(t){void 0!==t&&(D=t,this.setSize(C,L,!1))},this.getSize=function(t){return t.set(C,L)},this.setSize=function(t,n,i){Et.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(C=t,L=n,e.width=Math.floor(t*D),e.height=Math.floor(n*D),!1!==i&&(e.style.width=t+"px",e.style.height=n+"px"),this.setViewport(0,0,t,n))},this.getDrawingBufferSize=function(t){return t.set(C*D,L*D).floor()},this.setDrawingBufferSize=function(t,n,i){C=t,L=n,D=i,e.width=Math.floor(t*i),e.height=Math.floor(n*i),this.setViewport(0,0,t,n)},this.getCurrentViewport=function(t){return t.copy(A)},this.getViewport=function(t){return t.copy(O)},this.setViewport=function(t,e,n,i){t.isVector4?O.set(t.x,t.y,t.z,t.w):O.set(t,e,n,i),$.viewport(A.copy(O).multiplyScalar(D).floor())},this.getScissor=function(t){return t.copy(F)},this.setScissor=function(t,e,n,i){t.isVector4?F.set(t.x,t.y,t.z,t.w):F.set(t,e,n,i),$.scissor(P.copy(F).multiplyScalar(D).floor())},this.getScissorTest=function(){return U},this.setScissorTest=function(t){$.setScissorTest(U=t)},this.setOpaqueSort=function(t){z=t},this.setTransparentSort=function(t){N=t},this.getClearColor=function(t){return t.copy(gt.getClearColor())},this.setClearColor=function(){gt.setClearColor.apply(gt,arguments)},this.getClearAlpha=function(){return gt.getClearAlpha()},this.setClearAlpha=function(){gt.setClearAlpha.apply(gt,arguments)},this.clear=function(t=!0,e=!0,n=!0){let i=0;t&&(i|=16384),e&&(i|=256),n&&(i|=1024),Mt.clear(i)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){e.removeEventListener("webglcontextlost",At,!1),e.removeEventListener("webglcontextrestored",Pt,!1),ht.dispose(),ut.dispose(),et.dispose(),it.dispose(),rt.dispose(),ot.dispose(),bt.dispose(),lt.dispose(),Et.dispose(),Et.removeEventListener("sessionstart",Lt),Et.removeEventListener("sessionend",Dt),k&&(k.dispose(),k=null),It.stop()},this.renderBufferDirect=function(t,e,n,i,r,s){null===e&&(e=q);const a=r.isMesh&&r.matrixWorld.determinant()<0,o=function(t,e,n,i,r){!0!==e.isScene&&(e=q),nt.resetTextureUnits();const s=e.fog,a=i.isMeshStandardMaterial?e.environment:null,o=null===S?x.outputEncoding:!0===S.isXRRenderTarget?S.texture.encoding:I,l=(i.isMeshStandardMaterial?rt:it).get(i.envMap||a),c=!0===i.vertexColors&&!!n.attributes.color&&4===n.attributes.color.itemSize,h=!!i.normalMap&&!!n.attributes.tangent,u=!!n.morphAttributes.position,p=!!n.morphAttributes.normal,m=!!n.morphAttributes.color,f=i.toneMapped?x.toneMapping:0,g=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color,v=void 0!==g?g.length:0,y=et.get(i),_=d.state.lights;if(!0===H&&(!0===G||t!==E)){const e=t===E&&i.id===T;mt.setState(i,t,e)}let w=!1;i.version===y.__version?y.needsLights&&y.lightsStateVersion!==_.state.version||y.outputEncoding!==o||r.isInstancedMesh&&!1===y.instancing?w=!0:r.isInstancedMesh||!0!==y.instancing?r.isSkinnedMesh&&!1===y.skinning?w=!0:r.isSkinnedMesh||!0!==y.skinning?y.envMap!==l||i.fog&&y.fog!==s?w=!0:void 0===y.numClippingPlanes||y.numClippingPlanes===mt.numPlanes&&y.numIntersection===mt.numIntersection?(y.vertexAlphas!==c||y.vertexTangents!==h||y.morphTargets!==u||y.morphNormals!==p||y.morphColors!==m||y.toneMapping!==f||!0===K.isWebGL2&&y.morphTargetsCount!==v)&&(w=!0):w=!0:w=!0:w=!0:(w=!0,y.__version=i.version);let b=y.currentProgram;!0===w&&(b=Ut(i,e,r));let M=!1,A=!1,P=!1;const R=b.getUniforms(),C=y.uniforms;if($.useProgram(b.program)&&(M=!0,A=!0,P=!0),i.id!==T&&(T=i.id,A=!0),M||E!==t){if(R.setValue(Mt,"projectionMatrix",t.projectionMatrix),K.logarithmicDepthBuffer&&R.setValue(Mt,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),E!==t&&(E=t,A=!0,P=!0),i.isShaderMaterial||i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshStandardMaterial||i.envMap){const e=R.map.cameraPosition;void 0!==e&&e.setValue(Mt,j.setFromMatrixPosition(t.matrixWorld))}(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial)&&R.setValue(Mt,"isOrthographic",!0===t.isOrthographicCamera),(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial||i.isShadowMaterial||r.isSkinnedMesh)&&R.setValue(Mt,"viewMatrix",t.matrixWorldInverse)}if(r.isSkinnedMesh){R.setOptional(Mt,r,"bindMatrix"),R.setOptional(Mt,r,"bindMatrixInverse");const t=r.skeleton;t&&(K.floatVertexTextures?(null===t.boneTexture&&t.computeBoneTexture(),R.setValue(Mt,"boneTexture",t.boneTexture,nt),R.setValue(Mt,"boneTextureSize",t.boneTextureSize)):R.setOptional(Mt,t,"boneMatrices"))}const z=n.morphAttributes;var N,O;return(void 0!==z.position||void 0!==z.normal||void 0!==z.color&&!0===K.isWebGL2)&&yt.update(r,n,i,b),(A||y.receiveShadow!==r.receiveShadow)&&(y.receiveShadow=r.receiveShadow,R.setValue(Mt,"receiveShadow",r.receiveShadow)),A&&(R.setValue(Mt,"toneMappingExposure",x.toneMappingExposure),y.needsLights&&(O=P,(N=C).ambientLightColor.needsUpdate=O,N.lightProbe.needsUpdate=O,N.directionalLights.needsUpdate=O,N.directionalLightShadows.needsUpdate=O,N.pointLights.needsUpdate=O,N.pointLightShadows.needsUpdate=O,N.spotLights.needsUpdate=O,N.spotLightShadows.needsUpdate=O,N.rectAreaLights.needsUpdate=O,N.hemisphereLights.needsUpdate=O),s&&i.fog&&ct.refreshFogUniforms(C,s),ct.refreshMaterialUniforms(C,i,D,L,k),gr.upload(Mt,y.uniformsList,C,nt)),i.isShaderMaterial&&!0===i.uniformsNeedUpdate&&(gr.upload(Mt,y.uniformsList,C,nt),i.uniformsNeedUpdate=!1),i.isSpriteMaterial&&R.setValue(Mt,"center",r.center),R.setValue(Mt,"modelViewMatrix",r.modelViewMatrix),R.setValue(Mt,"normalMatrix",r.normalMatrix),R.setValue(Mt,"modelMatrix",r.matrixWorld),b}(t,e,n,i,r);$.setMaterial(i,a);let l=n.index;const c=n.attributes.position;if(null===l){if(void 0===c||0===c.count)return}else if(0===l.count)return;let h,u=1;!0===i.wireframe&&(l=at.getWireframeAttribute(n),u=2),bt.setup(r,i,o,n,l);let p=xt;null!==l&&(h=st.get(l),p=_t,p.setIndex(h));const m=null!==l?l.count:c.count,f=n.drawRange.start*u,g=n.drawRange.count*u,v=null!==s?s.start*u:0,y=null!==s?s.count*u:1/0,_=Math.max(f,v),w=Math.min(m,f+g,v+y)-1,b=Math.max(0,w-_+1);if(0!==b){if(r.isMesh)!0===i.wireframe?($.setLineWidth(i.wireframeLinewidth*X()),p.setMode(1)):p.setMode(4);else if(r.isLine){let t=i.linewidth;void 0===t&&(t=1),$.setLineWidth(t*X()),r.isLineSegments?p.setMode(1):r.isLineLoop?p.setMode(2):p.setMode(3)}else r.isPoints?p.setMode(0):r.isSprite&&p.setMode(4);if(r.isInstancedMesh)p.renderInstances(_,b,r.count);else if(n.isInstancedBufferGeometry){const t=Math.min(n.instanceCount,n._maxInstanceCount);p.renderInstances(_,b,t)}else p.render(_,b)}},this.compile=function(t,e){d=ut.get(t),d.init(),g.push(d),t.traverseVisible((function(t){t.isLight&&t.layers.test(e.layers)&&(d.pushLight(t),t.castShadow&&d.pushShadow(t))})),d.setupLights(x.physicallyCorrectLights),t.traverse((function(e){const n=e.material;if(n)if(Array.isArray(n))for(let i=0;i<n.length;i++)Ut(n[i],t,e);else Ut(n,t,e)})),g.pop(),d=null};let Ct=null;function Lt(){It.stop()}function Dt(){It.start()}const It=new Dn;function zt(t,e,n,i){if(!1===t.visible)return;if(t.layers.test(e.layers))if(t.isGroup)n=t.renderOrder;else if(t.isLOD)!0===t.autoUpdate&&t.update(e);else if(t.isLight)d.pushLight(t),t.castShadow&&d.pushShadow(t);else if(t.isSprite){if(!t.frustumCulled||B.intersectsSprite(t)){i&&j.setFromMatrixPosition(t.matrixWorld).applyMatrix4(V);const e=ot.update(t),r=t.material;r.visible&&u.push(t,e,r,n,j.z,null)}}else if((t.isMesh||t.isLine||t.isPoints)&&(t.isSkinnedMesh&&t.skeleton.frame!==tt.render.frame&&(t.skeleton.update(),t.skeleton.frame=tt.render.frame),!t.frustumCulled||B.intersectsObject(t))){i&&j.setFromMatrixPosition(t.matrixWorld).applyMatrix4(V);const e=ot.update(t),r=t.material;if(Array.isArray(r)){const i=e.groups;for(let s=0,a=i.length;s<a;s++){const a=i[s],o=r[a.materialIndex];o&&o.visible&&u.push(t,e,o,n,j.z,a)}}else r.visible&&u.push(t,e,r,n,j.z,null)}const r=t.children;for(let t=0,s=r.length;t<s;t++)zt(r[t],e,n,i)}function Nt(t,e,n,i){const r=t.opaque,a=t.transmissive,o=t.transparent;d.setupLightsView(n),a.length>0&&function(t,e,n){const i=K.isWebGL2;null===k&&(k=new pt(1,1,{generateMipmaps:!0,type:null!==wt.convert(y)?y:m,minFilter:p,samples:i&&!0===s?4:0})),x.getDrawingBufferSize(W),i?k.setSize(W.x,W.y):k.setSize(Y(W.x),Y(W.y));const r=x.getRenderTarget();x.setRenderTarget(k),x.clear();const a=x.toneMapping;x.toneMapping=0,Ot(t,e,n),x.toneMapping=a,nt.updateMultisampleRenderTarget(k),nt.updateRenderTargetMipmap(k),x.setRenderTarget(r)}(r,e,n),i&&$.viewport(A.copy(i)),r.length>0&&Ot(r,e,n),a.length>0&&Ot(a,e,n),o.length>0&&Ot(o,e,n),$.buffers.depth.setTest(!0),$.buffers.depth.setMask(!0),$.buffers.color.setMask(!0),$.setPolygonOffset(!1)}function Ot(t,e,n){const i=!0===e.isScene?e.overrideMaterial:null;for(let r=0,s=t.length;r<s;r++){const s=t[r],a=s.object,o=s.geometry,l=null===i?s.material:i,c=s.group;a.layers.test(n.layers)&&Ft(a,e,n,o,l,c)}}function Ft(t,e,n,i,r,s){t.onBeforeRender(x,e,n,i,r,s),t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld),t.normalMatrix.getNormalMatrix(t.modelViewMatrix),r.onBeforeRender(x,e,n,i,t,s),!0===r.transparent&&2===r.side?(r.side=1,r.needsUpdate=!0,x.renderBufferDirect(n,e,i,r,t,s),r.side=0,r.needsUpdate=!0,x.renderBufferDirect(n,e,i,r,t,s),r.side=2):x.renderBufferDirect(n,e,i,r,t,s),t.onAfterRender(x,e,n,i,r,s)}function Ut(t,e,n){!0!==e.isScene&&(e=q);const i=et.get(t),r=d.state.lights,s=d.state.shadowsArray,a=r.state.version,o=lt.getParameters(t,r.state,s,e,n),l=lt.getProgramCacheKey(o);let c=i.programs;i.environment=t.isMeshStandardMaterial?e.environment:null,i.fog=e.fog,i.envMap=(t.isMeshStandardMaterial?rt:it).get(t.envMap||i.environment),void 0===c&&(t.addEventListener("dispose",Rt),c=new Map,i.programs=c);let h=c.get(l);if(void 0!==h){if(i.currentProgram===h&&i.lightsStateVersion===a)return Bt(t,o),h}else o.uniforms=lt.getUniforms(t),t.onBuild(n,o,x),t.onBeforeCompile(o,x),h=lt.acquireProgram(o,l),c.set(l,h),i.uniforms=o.uniforms;const u=i.uniforms;(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(u.clippingPlanes=mt.uniform),Bt(t,o),i.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),i.lightsStateVersion=a,i.needsLights&&(u.ambientLightColor.value=r.state.ambient,u.lightProbe.value=r.state.probe,u.directionalLights.value=r.state.directional,u.directionalLightShadows.value=r.state.directionalShadow,u.spotLights.value=r.state.spot,u.spotLightShadows.value=r.state.spotShadow,u.rectAreaLights.value=r.state.rectArea,u.ltc_1.value=r.state.rectAreaLTC1,u.ltc_2.value=r.state.rectAreaLTC2,u.pointLights.value=r.state.point,u.pointLightShadows.value=r.state.pointShadow,u.hemisphereLights.value=r.state.hemi,u.directionalShadowMap.value=r.state.directionalShadowMap,u.directionalShadowMatrix.value=r.state.directionalShadowMatrix,u.spotShadowMap.value=r.state.spotShadowMap,u.spotShadowMatrix.value=r.state.spotShadowMatrix,u.pointShadowMap.value=r.state.pointShadowMap,u.pointShadowMatrix.value=r.state.pointShadowMatrix);const p=h.getUniforms(),m=gr.seqWithValue(p.seq,u);return i.currentProgram=h,i.uniformsList=m,h}function Bt(t,e){const n=et.get(t);n.outputEncoding=e.outputEncoding,n.instancing=e.instancing,n.skinning=e.skinning,n.morphTargets=e.morphTargets,n.morphNormals=e.morphNormals,n.morphColors=e.morphColors,n.morphTargetsCount=e.morphTargetsCount,n.numClippingPlanes=e.numClippingPlanes,n.numIntersection=e.numClipIntersection,n.vertexAlphas=e.vertexAlphas,n.vertexTangents=e.vertexTangents,n.toneMapping=e.toneMapping}It.setAnimationLoop((function(t){Ct&&Ct(t)})),"undefined"!=typeof window&&It.setContext(window),this.setAnimationLoop=function(t){Ct=t,Et.setAnimationLoop(t),null===t?It.stop():It.start()},Et.addEventListener("sessionstart",Lt),Et.addEventListener("sessionend",Dt),this.render=function(t,e){if(void 0!==e&&!0!==e.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===w)return;!0===t.autoUpdate&&t.updateMatrixWorld(),null===e.parent&&e.updateMatrixWorld(),!0===Et.enabled&&!0===Et.isPresenting&&(!0===Et.cameraAutoUpdate&&Et.updateCamera(e),e=Et.getCamera()),!0===t.isScene&&t.onBeforeRender(x,t,e,S),d=ut.get(t,g.length),d.init(),g.push(d),V.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),B.setFromProjectionMatrix(V),G=this.localClippingEnabled,H=mt.init(this.clippingPlanes,G,e),u=ht.get(t,f.length),u.init(),f.push(u),zt(t,e,0,x.sortObjects),u.finish(),!0===x.sortObjects&&u.sort(z,N),!0===H&&mt.beginShadows();const n=d.state.shadowsArray;if(ft.render(n,t,e),!0===H&&mt.endShadows(),!0===this.info.autoReset&&this.info.reset(),gt.render(u,t),d.setupLights(x.physicallyCorrectLights),e.isArrayCamera){const n=e.cameras;for(let e=0,i=n.length;e<i;e++){const i=n[e];Nt(u,t,i,i.viewport)}}else Nt(u,t,e);null!==S&&(nt.updateMultisampleRenderTarget(S),nt.updateRenderTargetMipmap(S)),!0===t.isScene&&t.onAfterRender(x,t,e),bt.resetDefaultState(),T=-1,E=null,g.pop(),d=g.length>0?g[g.length-1]:null,f.pop(),u=f.length>0?f[f.length-1]:null},this.getActiveCubeFace=function(){return b},this.getActiveMipmapLevel=function(){return M},this.getRenderTarget=function(){return S},this.setRenderTargetTextures=function(t,e,n){et.get(t.texture).__webglTexture=e,et.get(t.depthTexture).__webglTexture=n;const i=et.get(t);i.__hasExternalTextures=!0,i.__hasExternalTextures&&(i.__autoAllocateDepthBuffer=void 0===n,i.__autoAllocateDepthBuffer||!0===J.has("WEBGL_multisampled_render_to_texture")&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),i.__useRenderToTexture=!1))},this.setRenderTargetFramebuffer=function(t,e){const n=et.get(t);n.__webglFramebuffer=e,n.__useDefaultFramebuffer=void 0===e},this.setRenderTarget=function(t,e=0,n=0){S=t,b=e,M=n;let i=!0;if(t){const e=et.get(t);void 0!==e.__useDefaultFramebuffer?($.bindFramebuffer(36160,null),i=!1):void 0===e.__webglFramebuffer?nt.setupRenderTarget(t):e.__hasExternalTextures&&nt.rebindTextures(t,et.get(t.texture).__webglTexture,et.get(t.depthTexture).__webglTexture)}let r=null,s=!1,a=!1;if(t){const n=t.texture;(n.isData3DTexture||n.isDataArrayTexture)&&(a=!0);const i=et.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(r=i[e],s=!0):r=K.isWebGL2&&t.samples>0&&!1===nt.useMultisampledRTT(t)?et.get(t).__webglMultisampledFramebuffer:i,A.copy(t.viewport),P.copy(t.scissor),R=t.scissorTest}else A.copy(O).multiplyScalar(D).floor(),P.copy(F).multiplyScalar(D).floor(),R=U;if($.bindFramebuffer(36160,r)&&K.drawBuffers&&i&&$.drawBuffers(t,r),$.viewport(A),$.scissor(P),$.setScissorTest(R),s){const i=et.get(t.texture);Mt.framebufferTexture2D(36160,36064,34069+e,i.__webglTexture,n)}else if(a){const i=et.get(t.texture),r=e||0;Mt.framebufferTextureLayer(36160,36064,i.__webglTexture,n||0,r)}T=-1},this.readRenderTargetPixels=function(t,e,n,i,r,s,a){if(!t||!t.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let o=et.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==a&&(o=o[a]),o){$.bindFramebuffer(36160,o);try{const a=t.texture,o=a.format,l=a.type;if(o!==_&&wt.convert(o)!==Mt.getParameter(35739))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");const c=l===y&&(J.has("EXT_color_buffer_half_float")||K.isWebGL2&&J.has("EXT_color_buffer_float"));if(!(l===m||wt.convert(l)===Mt.getParameter(35738)||l===v&&(K.isWebGL2||J.has("OES_texture_float")||J.has("WEBGL_color_buffer_float"))||c))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");36053===Mt.checkFramebufferStatus(36160)?e>=0&&e<=t.width-i&&n>=0&&n<=t.height-r&&Mt.readPixels(e,n,i,r,wt.convert(o),wt.convert(l),s):console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}finally{const t=null!==S?et.get(S).__webglFramebuffer:null;$.bindFramebuffer(36160,t)}}},this.copyFramebufferToTexture=function(t,e,n=0){if(!0!==e.isFramebufferTexture)return void console.error("THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.");const i=Math.pow(2,-n),r=Math.floor(e.image.width*i),s=Math.floor(e.image.height*i);nt.setTexture2D(e,0),Mt.copyTexSubImage2D(3553,n,0,0,t.x,t.y,r,s),$.unbindTexture()},this.copyTextureToTexture=function(t,e,n,i=0){const r=e.image.width,s=e.image.height,a=wt.convert(n.format),o=wt.convert(n.type);nt.setTexture2D(n,0),Mt.pixelStorei(37440,n.flipY),Mt.pixelStorei(37441,n.premultiplyAlpha),Mt.pixelStorei(3317,n.unpackAlignment),e.isDataTexture?Mt.texSubImage2D(3553,i,t.x,t.y,r,s,a,o,e.image.data):e.isCompressedTexture?Mt.compressedTexSubImage2D(3553,i,t.x,t.y,e.mipmaps[0].width,e.mipmaps[0].height,a,e.mipmaps[0].data):Mt.texSubImage2D(3553,i,t.x,t.y,a,o,e.image),0===i&&n.generateMipmaps&&Mt.generateMipmap(3553),$.unbindTexture()},this.copyTextureToTexture3D=function(t,e,n,i,r=0){if(x.isWebGL1Renderer)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");const s=t.max.x-t.min.x+1,a=t.max.y-t.min.y+1,o=t.max.z-t.min.z+1,l=wt.convert(i.format),c=wt.convert(i.type);let h;if(i.isData3DTexture)nt.setTexture3D(i,0),h=32879;else{if(!i.isDataArrayTexture)return void console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");nt.setTexture2DArray(i,0),h=35866}Mt.pixelStorei(37440,i.flipY),Mt.pixelStorei(37441,i.premultiplyAlpha),Mt.pixelStorei(3317,i.unpackAlignment);const u=Mt.getParameter(3314),d=Mt.getParameter(32878),p=Mt.getParameter(3316),m=Mt.getParameter(3315),f=Mt.getParameter(32877),g=n.isCompressedTexture?n.mipmaps[0]:n.image;Mt.pixelStorei(3314,g.width),Mt.pixelStorei(32878,g.height),Mt.pixelStorei(3316,t.min.x),Mt.pixelStorei(3315,t.min.y),Mt.pixelStorei(32877,t.min.z),n.isDataTexture||n.isData3DTexture?Mt.texSubImage3D(h,r,e.x,e.y,e.z,s,a,o,l,c,g.data):n.isCompressedTexture?(console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture."),Mt.compressedTexSubImage3D(h,r,e.x,e.y,e.z,s,a,o,l,g.data)):Mt.texSubImage3D(h,r,e.x,e.y,e.z,s,a,o,l,c,g),Mt.pixelStorei(3314,u),Mt.pixelStorei(32878,d),Mt.pixelStorei(3316,p),Mt.pixelStorei(3315,m),Mt.pixelStorei(32877,f),0===r&&i.generateMipmaps&&Mt.generateMipmap(h),$.unbindTexture()},this.initTexture=function(t){nt.setTexture2D(t,0),$.unbindTexture()},this.resetState=function(){b=0,M=0,S=null,$.reset(),bt.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}cs.prototype.isWebGLRenderer=!0,class extends cs{}.prototype.isWebGL1Renderer=!0;class hs{constructor(t,e=25e-5){this.name="",this.color=new st(t),this.density=e}clone(){return new hs(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}hs.prototype.isFogExp2=!0;class us{constructor(t,e=1,n=1e3){this.name="",this.color=new st(t),this.near=e,this.far=n}clone(){return new us(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}us.prototype.isFog=!0;class ds extends xe{constructor(){super(),this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.overrideMaterial=null,this.autoUpdate=!0,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(t,e){return super.copy(t,e),null!==t.background&&(this.background=t.background.clone()),null!==t.environment&&(this.environment=t.environment.clone()),null!==t.fog&&(this.fog=t.fog.clone()),null!==t.overrideMaterial&&(this.overrideMaterial=t.overrideMaterial.clone()),this.autoUpdate=t.autoUpdate,this.matrixAutoUpdate=t.matrixAutoUpdate,this}toJSON(t){const e=super.toJSON(t);return null!==this.fog&&(e.object.fog=this.fog.toJSON()),e}}ds.prototype.isScene=!0;class ps{constructor(t,e){this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=O,this.updateRange={offset:0,count:-1},this.version=0,this.uuid=W()}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,n){t*=this.stride,n*=e.stride;for(let i=0,r=this.stride;i<r;i++)this.array[t+i]=e.array[n+i];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=W()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),n=new this.constructor(e,this.stride);return n.setUsage(this.usage),n}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return void 0===t.arrayBuffers&&(t.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=W()),void 0===t.arrayBuffers[this.array.buffer._uuid]&&(t.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}ps.prototype.isInterleavedBuffer=!0;const ms=new vt;class fs{constructor(t,e,n,i=!1){this.name="",this.data=t,this.itemSize=e,this.offset=n,this.normalized=!0===i}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,n=this.data.count;e<n;e++)ms.x=this.getX(e),ms.y=this.getY(e),ms.z=this.getZ(e),ms.applyMatrix4(t),this.setXYZ(e,ms.x,ms.y,ms.z);return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++)ms.x=this.getX(e),ms.y=this.getY(e),ms.z=this.getZ(e),ms.applyNormalMatrix(t),this.setXYZ(e,ms.x,ms.y,ms.z);return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++)ms.x=this.getX(e),ms.y=this.getY(e),ms.z=this.getZ(e),ms.transformDirection(t),this.setXYZ(e,ms.x,ms.y,ms.z);return this}setX(t,e){return this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){return this.data.array[t*this.data.stride+this.offset]}getY(t){return this.data.array[t*this.data.stride+this.offset+1]}getZ(t){return this.data.array[t*this.data.stride+this.offset+2]}getW(t){return this.data.array[t*this.data.stride+this.offset+3]}setXY(t,e,n){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this}setXYZ(t,e,n,i){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this}setXYZW(t,e,n,i,r){return t=t*this.data.stride+this.offset,this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=i,this.data.array[t+3]=r,this}clone(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[n+e])}return new Oe(new this.array.constructor(t),this.itemSize,this.normalized)}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new fs(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(void 0===t){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++)t.push(this.data.array[n+e])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}return void 0===t.interleavedBuffers&&(t.interleavedBuffers={}),void 0===t.interleavedBuffers[this.data.uuid]&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}fs.prototype.isInterleavedBufferAttribute=!0;class gs extends De{constructor(t){super(),this.type="SpriteMaterial",this.color=new st(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.rotation=t.rotation,this.sizeAttenuation=t.sizeAttenuation,this}}let vs;gs.prototype.isSpriteMaterial=!0;const ys=new vt,xs=new vt,_s=new vt,ws=new Z,bs=new Z,Ms=new Yt,Ss=new vt,Ts=new vt,Es=new vt,As=new Z,Ps=new Z,Rs=new Z;function Cs(t,e,n,i,r,s){ws.subVectors(t,n).addScalar(.5).multiply(i),void 0!==r?(bs.x=s*ws.x-r*ws.y,bs.y=r*ws.x+s*ws.y):bs.copy(ws),t.copy(e),t.x+=bs.x,t.y+=bs.y,t.applyMatrix4(Ms)}(class extends xe{constructor(t){if(super(),this.type="Sprite",void 0===vs){vs=new Xe;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),e=new ps(t,5);vs.setIndex([0,1,2,0,2,3]),vs.setAttribute("position",new fs(e,3,0,!1)),vs.setAttribute("uv",new fs(e,2,3,!1))}this.geometry=vs,this.material=void 0!==t?t:new gs,this.center=new Z(.5,.5)}raycast(t,e){null===t.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),xs.setFromMatrixScale(this.matrixWorld),Ms.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),_s.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&xs.multiplyScalar(-_s.z);const n=this.material.rotation;let i,r;0!==n&&(r=Math.cos(n),i=Math.sin(n));const s=this.center;Cs(Ss.set(-.5,-.5,0),_s,s,xs,i,r),Cs(Ts.set(.5,-.5,0),_s,s,xs,i,r),Cs(Es.set(.5,.5,0),_s,s,xs,i,r),As.set(0,0),Ps.set(1,0),Rs.set(1,1);let a=t.ray.intersectTriangle(Ss,Ts,Es,!1,ys);if(null===a&&(Cs(Ts.set(-.5,.5,0),_s,s,xs,i,r),Ps.set(0,1),a=t.ray.intersectTriangle(Ss,Es,Ts,!1,ys),null===a))return;const o=t.ray.origin.distanceTo(ys);o<t.near||o>t.far||e.push({distance:o,point:ys.clone(),uv:Ce.getUV(ys,Ss,Ts,Es,As,Ps,Rs,new Z),face:null,object:this})}copy(t){return super.copy(t),void 0!==t.center&&this.center.copy(t.center),this.material=t.material,this}}).prototype.isSprite=!0;const Ls=new vt,Ds=new dt,Is=new dt,zs=new vt,Ns=new Yt;class Os extends dn{constructor(t,e){super(t,e),this.type="SkinnedMesh",this.bindMode="attached",this.bindMatrix=new Yt,this.bindMatrixInverse=new Yt}copy(t){return super.copy(t),this.bindMode=t.bindMode,this.bindMatrix.copy(t.bindMatrix),this.bindMatrixInverse.copy(t.bindMatrixInverse),this.skeleton=t.skeleton,this}bind(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new dt,e=this.geometry.attributes.skinWeight;for(let n=0,i=e.count;n<i;n++){t.x=e.getX(n),t.y=e.getY(n),t.z=e.getZ(n),t.w=e.getW(n);const i=1/t.manhattanLength();i!==1/0?t.multiplyScalar(i):t.set(1,0,0,0),e.setXYZW(n,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t),"attached"===this.bindMode?this.bindMatrixInverse.copy(this.matrixWorld).invert():"detached"===this.bindMode?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}boneTransform(t,e){const n=this.skeleton,i=this.geometry;Ds.fromBufferAttribute(i.attributes.skinIndex,t),Is.fromBufferAttribute(i.attributes.skinWeight,t),Ls.copy(e).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let t=0;t<4;t++){const i=Is.getComponent(t);if(0!==i){const r=Ds.getComponent(t);Ns.multiplyMatrices(n.bones[r].matrixWorld,n.boneInverses[r]),e.addScaledVector(zs.copy(Ls).applyMatrix4(Ns),i)}}return e.applyMatrix4(this.bindMatrixInverse)}}Os.prototype.isSkinnedMesh=!0;(class extends xe{constructor(){super(),this.type="Bone"}}).prototype.isBone=!0;(class extends ut{constructor(t=null,e=1,n=1,i,r,s,a,o,l=1003,c=1003,h,u){super(null,s,a,o,l,c,i,r,h,u),this.image={data:t,width:e,height:n},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}).prototype.isDataTexture=!0;class Fs extends Oe{constructor(t,e,n,i=1){"number"==typeof n&&(i=n,n=!1,console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")),super(t,e,n),this.meshPerAttribute=i}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}toJSON(){const t=super.toJSON();return t.meshPerAttribute=this.meshPerAttribute,t.isInstancedBufferAttribute=!0,t}}Fs.prototype.isInstancedBufferAttribute=!0;const Us=new Yt,Bs=new Yt,Hs=[],Gs=new dn;(class extends dn{constructor(t,e,n){super(t,e),this.instanceMatrix=new Fs(new Float32Array(16*n),16),this.instanceColor=null,this.count=n,this.frustumCulled=!1}copy(t){return super.copy(t),this.instanceMatrix.copy(t.instanceMatrix),null!==t.instanceColor&&(this.instanceColor=t.instanceColor.clone()),this.count=t.count,this}getColorAt(t,e){e.fromArray(this.instanceColor.array,3*t)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,16*t)}raycast(t,e){const n=this.matrixWorld,i=this.count;if(Gs.geometry=this.geometry,Gs.material=this.material,void 0!==Gs.material)for(let r=0;r<i;r++){this.getMatrixAt(r,Us),Bs.multiplyMatrices(n,Us),Gs.matrixWorld=Bs,Gs.raycast(t,Hs);for(let t=0,n=Hs.length;t<n;t++){const n=Hs[t];n.instanceId=r,n.object=this,e.push(n)}Hs.length=0}}setColorAt(t,e){null===this.instanceColor&&(this.instanceColor=new Fs(new Float32Array(3*this.instanceMatrix.count),3)),e.toArray(this.instanceColor.array,3*t)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,16*t)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}).prototype.isInstancedMesh=!0;class ks extends De{constructor(t){super(),this.type="LineBasicMaterial",this.color=new st(16777215),this.linewidth=1,this.linecap="round",this.linejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.linewidth=t.linewidth,this.linecap=t.linecap,this.linejoin=t.linejoin,this}}ks.prototype.isLineBasicMaterial=!0;const Vs=new vt,Ws=new vt,js=new Yt,qs=new Xt,Xs=new Bt;class Ys extends xe{constructor(t=new Xe,e=new ks){super(),this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,n=[0];for(let t=1,i=e.count;t<i;t++)Vs.fromBufferAttribute(e,t-1),Ws.fromBufferAttribute(e,t),n[t]=n[t-1],n[t]+=Vs.distanceTo(Ws);t.setAttribute("lineDistance",new Be(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else t.isGeometry&&console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,r=t.params.Line.threshold,s=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),Xs.copy(n.boundingSphere),Xs.applyMatrix4(i),Xs.radius+=r,!1===t.ray.intersectsSphere(Xs))return;js.copy(i).invert(),qs.copy(t.ray).applyMatrix4(js);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a,l=new vt,c=new vt,h=new vt,u=new vt,d=this.isLineSegments?2:1;if(n.isBufferGeometry){const i=n.index,r=n.attributes.position;if(null!==i)for(let n=Math.max(0,s.start),a=Math.min(i.count,s.start+s.count)-1;n<a;n+=d){const s=i.getX(n),a=i.getX(n+1);if(l.fromBufferAttribute(r,s),c.fromBufferAttribute(r,a),qs.distanceSqToSegment(l,c,u,h)>o)continue;u.applyMatrix4(this.matrixWorld);const d=t.ray.origin.distanceTo(u);d<t.near||d>t.far||e.push({distance:d,point:h.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}else for(let n=Math.max(0,s.start),i=Math.min(r.count,s.start+s.count)-1;n<i;n+=d){if(l.fromBufferAttribute(r,n),c.fromBufferAttribute(r,n+1),qs.distanceSqToSegment(l,c,u,h)>o)continue;u.applyMatrix4(this.matrixWorld);const i=t.ray.origin.distanceTo(u);i<t.near||i>t.far||e.push({distance:i,point:h.clone().applyMatrix4(this.matrixWorld),index:n,face:null,faceIndex:null,object:this})}}else n.isGeometry&&console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}Ys.prototype.isLine=!0;const Zs=new vt,Js=new vt;class Ks extends Ys{constructor(t,e){super(t,e),this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry)if(null===t.index){const e=t.attributes.position,n=[];for(let t=0,i=e.count;t<i;t+=2)Zs.fromBufferAttribute(e,t),Js.fromBufferAttribute(e,t+1),n[t]=0===t?0:n[t-1],n[t+1]=n[t]+Zs.distanceTo(Js);t.setAttribute("lineDistance",new Be(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");else t.isGeometry&&console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.");return this}}Ks.prototype.isLineSegments=!0;(class extends Ys{constructor(t,e){super(t,e),this.type="LineLoop"}}).prototype.isLineLoop=!0;class Qs extends De{constructor(t){super(),this.type="PointsMaterial",this.color=new st(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.alphaMap=t.alphaMap,this.size=t.size,this.sizeAttenuation=t.sizeAttenuation,this}}Qs.prototype.isPointsMaterial=!0;const $s=new Yt,ta=new Xt,ea=new Bt,na=new vt;class ia extends xe{constructor(t=new Xe,e=new Qs){super(),this.type="Points",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(t){return super.copy(t),this.material=t.material,this.geometry=t.geometry,this}raycast(t,e){const n=this.geometry,i=this.matrixWorld,r=t.params.Points.threshold,s=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),ea.copy(n.boundingSphere),ea.applyMatrix4(i),ea.radius+=r,!1===t.ray.intersectsSphere(ea))return;$s.copy(i).invert(),ta.copy(t.ray).applyMatrix4($s);const a=r/((this.scale.x+this.scale.y+this.scale.z)/3),o=a*a;if(n.isBufferGeometry){const r=n.index,a=n.attributes.position;if(null!==r)for(let n=Math.max(0,s.start),l=Math.min(r.count,s.start+s.count);n<l;n++){const s=r.getX(n);na.fromBufferAttribute(a,s),ra(na,s,o,i,t,e,this)}else for(let n=Math.max(0,s.start),r=Math.min(a.count,s.start+s.count);n<r;n++)na.fromBufferAttribute(a,n),ra(na,n,o,i,t,e,this)}else console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes,n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(void 0!==t){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;void 0!==e&&e.length>0&&console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}function ra(t,e,n,i,r,s,a){const o=ta.distanceSqToPoint(t);if(o<n){const n=new vt;ta.closestPointToPoint(t,n),n.applyMatrix4(i);const l=r.ray.origin.distanceTo(n);if(l<r.near||l>r.far)return;s.push({distance:l,distanceToRay:Math.sqrt(o),point:n,index:e,face:null,object:a})}}ia.prototype.isPoints=!0;class sa extends ut{constructor(t,e,n,i,r,s,a,o,l){super(t,e,n,i,r,s,a,o,l),this.minFilter=void 0!==s?s:d,this.magFilter=void 0!==r?r:d,this.generateMipmaps=!1;const c=this;"requestVideoFrameCallback"in t&&t.requestVideoFrameCallback((function e(){c.needsUpdate=!0,t.requestVideoFrameCallback(e)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;!1=="requestVideoFrameCallback"in t&&t.readyState>=t.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}sa.prototype.isVideoTexture=!0,class extends ut{constructor(t,e,n){super({width:t,height:e}),this.format=n,this.magFilter=u,this.minFilter=u,this.generateMipmaps=!1,this.needsUpdate=!0}}.prototype.isFramebufferTexture=!0;(class extends ut{constructor(t,e,n,i,r,s,a,o,l,c,h,u){super(null,s,a,o,l,c,i,r,h,u),this.image={width:e,height:n},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}).prototype.isCompressedTexture=!0,class extends ut{constructor(t,e,n,i,r,s,a,o,l){super(t,e,n,i,r,s,a,o,l),this.needsUpdate=!0}}.prototype.isCanvasTexture=!0;class aa extends Xe{constructor(t=1,e=8,n=0,i=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:i},e=Math.max(3,e);const r=[],s=[],a=[],o=[],l=new vt,c=new Z;s.push(0,0,0),a.push(0,0,1),o.push(.5,.5);for(let r=0,h=3;r<=e;r++,h+=3){const u=n+r/e*i;l.x=t*Math.cos(u),l.y=t*Math.sin(u),s.push(l.x,l.y,l.z),a.push(0,0,1),c.x=(s[h]/t+1)/2,c.y=(s[h+1]/t+1)/2,o.push(c.x,c.y)}for(let t=1;t<=e;t++)r.push(t,t+1,0);this.setIndex(r),this.setAttribute("position",new Be(s,3)),this.setAttribute("normal",new Be(a,3)),this.setAttribute("uv",new Be(o,2))}static fromJSON(t){return new aa(t.radius,t.segments,t.thetaStart,t.thetaLength)}}class oa extends Xe{constructor(t=1,e=1,n=1,i=8,r=1,s=!1,a=0,o=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:i,heightSegments:r,openEnded:s,thetaStart:a,thetaLength:o};const l=this;i=Math.floor(i),r=Math.floor(r);const c=[],h=[],u=[],d=[];let p=0;const m=[],f=n/2;let g=0;function v(n){const r=p,s=new Z,m=new vt;let v=0;const y=!0===n?t:e,x=!0===n?1:-1;for(let t=1;t<=i;t++)h.push(0,f*x,0),u.push(0,x,0),d.push(.5,.5),p++;const _=p;for(let t=0;t<=i;t++){const e=t/i*o+a,n=Math.cos(e),r=Math.sin(e);m.x=y*r,m.y=f*x,m.z=y*n,h.push(m.x,m.y,m.z),u.push(0,x,0),s.x=.5*n+.5,s.y=.5*r*x+.5,d.push(s.x,s.y),p++}for(let t=0;t<i;t++){const e=r+t,i=_+t;!0===n?c.push(i,i+1,e):c.push(i+1,i,e),v+=3}l.addGroup(g,v,!0===n?1:2),g+=v}!function(){const s=new vt,v=new vt;let y=0;const x=(e-t)/n;for(let l=0;l<=r;l++){const c=[],g=l/r,y=g*(e-t)+t;for(let t=0;t<=i;t++){const e=t/i,r=e*o+a,l=Math.sin(r),m=Math.cos(r);v.x=y*l,v.y=-g*n+f,v.z=y*m,h.push(v.x,v.y,v.z),s.set(l,x,m).normalize(),u.push(s.x,s.y,s.z),d.push(e,1-g),c.push(p++)}m.push(c)}for(let t=0;t<i;t++)for(let e=0;e<r;e++){const n=m[e][t],i=m[e+1][t],r=m[e+1][t+1],s=m[e][t+1];c.push(n,i,s),c.push(i,r,s),y+=6}l.addGroup(g,y,0),g+=y}(),!1===s&&(t>0&&v(!0),e>0&&v(!1)),this.setIndex(c),this.setAttribute("position",new Be(h,3)),this.setAttribute("normal",new Be(u,3)),this.setAttribute("uv",new Be(d,2))}static fromJSON(t){return new oa(t.radiusTop,t.radiusBottom,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}new vt,new vt,new vt,new Ce;class la{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(t,e){const n=this.getUtoTmapping(t);return this.getPoint(n,e)}getPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return e}getSpacedPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPointAt(n/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let n,i=this.getPoint(0),r=0;e.push(0);for(let s=1;s<=t;s++)n=this.getPoint(s/t),r+=n.distanceTo(i),e.push(r),i=n;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(t,e){const n=this.getLengths();let i=0;const r=n.length;let s;s=e||t*n[r-1];let a,o=0,l=r-1;for(;o<=l;)if(i=Math.floor(o+(l-o)/2),a=n[i]-s,a<0)o=i+1;else{if(!(a>0)){l=i;break}l=i-1}if(i=l,n[i]===s)return i/(r-1);const c=n[i];return(i+(s-c)/(n[i+1]-c))/(r-1)}getTangent(t,e){const n=1e-4;let i=t-n,r=t+n;i<0&&(i=0),r>1&&(r=1);const s=this.getPoint(i),a=this.getPoint(r),o=e||(s.isVector2?new Z:new vt);return o.copy(a).sub(s).normalize(),o}getTangentAt(t,e){const n=this.getUtoTmapping(t);return this.getTangent(n,e)}computeFrenetFrames(t,e){const n=new vt,i=[],r=[],s=[],a=new vt,o=new Yt;for(let e=0;e<=t;e++){const n=e/t;i[e]=this.getTangentAt(n,new vt)}r[0]=new vt,s[0]=new vt;let l=Number.MAX_VALUE;const c=Math.abs(i[0].x),h=Math.abs(i[0].y),u=Math.abs(i[0].z);c<=l&&(l=c,n.set(1,0,0)),h<=l&&(l=h,n.set(0,1,0)),u<=l&&n.set(0,0,1),a.crossVectors(i[0],n).normalize(),r[0].crossVectors(i[0],a),s[0].crossVectors(i[0],r[0]);for(let e=1;e<=t;e++){if(r[e]=r[e-1].clone(),s[e]=s[e-1].clone(),a.crossVectors(i[e-1],i[e]),a.length()>Number.EPSILON){a.normalize();const t=Math.acos(j(i[e-1].dot(i[e]),-1,1));r[e].applyMatrix4(o.makeRotationAxis(a,t))}s[e].crossVectors(i[e],r[e])}if(!0===e){let e=Math.acos(j(r[0].dot(r[t]),-1,1));e/=t,i[0].dot(a.crossVectors(r[0],r[t]))>0&&(e=-e);for(let n=1;n<=t;n++)r[n].applyMatrix4(o.makeRotationAxis(i[n],e*n)),s[n].crossVectors(i[n],r[n])}return{tangents:i,normals:r,binormals:s}}clone(){return(new this.constructor).copy(this)}copy(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}toJSON(){const t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};return t.arcLengthDivisions=this.arcLengthDivisions,t.type=this.type,t}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}class ca extends la{constructor(t=0,e=0,n=1,i=1,r=0,s=2*Math.PI,a=!1,o=0){super(),this.type="EllipseCurve",this.aX=t,this.aY=e,this.xRadius=n,this.yRadius=i,this.aStartAngle=r,this.aEndAngle=s,this.aClockwise=a,this.aRotation=o}getPoint(t,e){const n=e||new Z,i=2*Math.PI;let r=this.aEndAngle-this.aStartAngle;const s=Math.abs(r)<Number.EPSILON;for(;r<0;)r+=i;for(;r>i;)r-=i;r<Number.EPSILON&&(r=s?0:i),!0!==this.aClockwise||s||(r===i?r=-i:r-=i);const a=this.aStartAngle+t*r;let o=this.aX+this.xRadius*Math.cos(a),l=this.aY+this.yRadius*Math.sin(a);if(0!==this.aRotation){const t=Math.cos(this.aRotation),e=Math.sin(this.aRotation),n=o-this.aX,i=l-this.aY;o=n*t-i*e+this.aX,l=n*e+i*t+this.aY}return n.set(o,l)}copy(t){return super.copy(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}toJSON(){const t=super.toJSON();return t.aX=this.aX,t.aY=this.aY,t.xRadius=this.xRadius,t.yRadius=this.yRadius,t.aStartAngle=this.aStartAngle,t.aEndAngle=this.aEndAngle,t.aClockwise=this.aClockwise,t.aRotation=this.aRotation,t}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}ca.prototype.isEllipseCurve=!0;class ha extends ca{constructor(t,e,n,i,r,s){super(t,e,n,n,i,r,s),this.type="ArcCurve"}}function ua(){let t=0,e=0,n=0,i=0;function r(r,s,a,o){t=r,e=a,n=-3*r+3*s-2*a-o,i=2*r-2*s+a+o}return{initCatmullRom:function(t,e,n,i,s){r(e,n,s*(n-t),s*(i-e))},initNonuniformCatmullRom:function(t,e,n,i,s,a,o){let l=(e-t)/s-(n-t)/(s+a)+(n-e)/a,c=(n-e)/a-(i-e)/(a+o)+(i-n)/o;l*=a,c*=a,r(e,n,l,c)},calc:function(r){const s=r*r;return t+e*r+n*s+i*(s*r)}}}ha.prototype.isArcCurve=!0;const da=new vt,pa=new ua,ma=new ua,fa=new ua;class ga extends la{constructor(t=[],e=!1,n="centripetal",i=.5){super(),this.type="CatmullRomCurve3",this.points=t,this.closed=e,this.curveType=n,this.tension=i}getPoint(t,e=new vt){const n=e,i=this.points,r=i.length,s=(r-(this.closed?0:1))*t;let a,o,l=Math.floor(s),c=s-l;this.closed?l+=l>0?0:(Math.floor(Math.abs(l)/r)+1)*r:0===c&&l===r-1&&(l=r-2,c=1),this.closed||l>0?a=i[(l-1)%r]:(da.subVectors(i[0],i[1]).add(i[0]),a=da);const h=i[l%r],u=i[(l+1)%r];if(this.closed||l+2<r?o=i[(l+2)%r]:(da.subVectors(i[r-1],i[r-2]).add(i[r-1]),o=da),"centripetal"===this.curveType||"chordal"===this.curveType){const t="chordal"===this.curveType?.5:.25;let e=Math.pow(a.distanceToSquared(h),t),n=Math.pow(h.distanceToSquared(u),t),i=Math.pow(u.distanceToSquared(o),t);n<1e-4&&(n=1),e<1e-4&&(e=n),i<1e-4&&(i=n),pa.initNonuniformCatmullRom(a.x,h.x,u.x,o.x,e,n,i),ma.initNonuniformCatmullRom(a.y,h.y,u.y,o.y,e,n,i),fa.initNonuniformCatmullRom(a.z,h.z,u.z,o.z,e,n,i)}else"catmullrom"===this.curveType&&(pa.initCatmullRom(a.x,h.x,u.x,o.x,this.tension),ma.initCatmullRom(a.y,h.y,u.y,o.y,this.tension),fa.initCatmullRom(a.z,h.z,u.z,o.z,this.tension));return n.set(pa.calc(c),ma.calc(c),fa.calc(c)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push(n.clone())}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const n=this.points[e];t.points.push(n.toArray())}return t.closed=this.closed,t.curveType=this.curveType,t.tension=this.tension,t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new vt).fromArray(n))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}function va(t,e,n,i,r){const s=.5*(i-e),a=.5*(r-n),o=t*t;return(2*n-2*i+s+a)*(t*o)+(-3*n+3*i-2*s-a)*o+s*t+n}function ya(t,e,n,i){return function(t,e){const n=1-t;return n*n*e}(t,e)+function(t,e){return 2*(1-t)*t*e}(t,n)+function(t,e){return t*t*e}(t,i)}function xa(t,e,n,i,r){return function(t,e){const n=1-t;return n*n*n*e}(t,e)+function(t,e){const n=1-t;return 3*n*n*t*e}(t,n)+function(t,e){return 3*(1-t)*t*t*e}(t,i)+function(t,e){return t*t*t*e}(t,r)}ga.prototype.isCatmullRomCurve3=!0;class _a extends la{constructor(t=new Z,e=new Z,n=new Z,i=new Z){super(),this.type="CubicBezierCurve",this.v0=t,this.v1=e,this.v2=n,this.v3=i}getPoint(t,e=new Z){const n=e,i=this.v0,r=this.v1,s=this.v2,a=this.v3;return n.set(xa(t,i.x,r.x,s.x,a.x),xa(t,i.y,r.y,s.y,a.y)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}_a.prototype.isCubicBezierCurve=!0;class wa extends la{constructor(t=new vt,e=new vt,n=new vt,i=new vt){super(),this.type="CubicBezierCurve3",this.v0=t,this.v1=e,this.v2=n,this.v3=i}getPoint(t,e=new vt){const n=e,i=this.v0,r=this.v1,s=this.v2,a=this.v3;return n.set(xa(t,i.x,r.x,s.x,a.x),xa(t,i.y,r.y,s.y,a.y),xa(t,i.z,r.z,s.z,a.z)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this.v3.copy(t.v3),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t.v3=this.v3.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}wa.prototype.isCubicBezierCurve3=!0;class ba extends la{constructor(t=new Z,e=new Z){super(),this.type="LineCurve",this.v1=t,this.v2=e}getPoint(t,e=new Z){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e){const n=e||new Z;return n.copy(this.v2).sub(this.v1).normalize(),n}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}ba.prototype.isLineCurve=!0;class Ma extends la{constructor(t=new Z,e=new Z,n=new Z){super(),this.type="QuadraticBezierCurve",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new Z){const n=e,i=this.v0,r=this.v1,s=this.v2;return n.set(ya(t,i.x,r.x,s.x),ya(t,i.y,r.y,s.y)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}Ma.prototype.isQuadraticBezierCurve=!0;class Sa extends la{constructor(t=new vt,e=new vt,n=new vt){super(),this.type="QuadraticBezierCurve3",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new vt){const n=e,i=this.v0,r=this.v1,s=this.v2;return n.set(ya(t,i.x,r.x,s.x),ya(t,i.y,r.y,s.y),ya(t,i.z,r.z,s.z)),n}copy(t){return super.copy(t),this.v0.copy(t.v0),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v0=this.v0.toArray(),t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}Sa.prototype.isQuadraticBezierCurve3=!0;class Ta extends la{constructor(t=[]){super(),this.type="SplineCurve",this.points=t}getPoint(t,e=new Z){const n=e,i=this.points,r=(i.length-1)*t,s=Math.floor(r),a=r-s,o=i[0===s?s:s-1],l=i[s],c=i[s>i.length-2?i.length-1:s+1],h=i[s>i.length-3?i.length-1:s+2];return n.set(va(a,o.x,l.x,c.x,h.x),va(a,o.y,l.y,c.y,h.y)),n}copy(t){super.copy(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const n=this.points[e];t.points.push(n.toArray())}return t}fromJSON(t){super.fromJSON(t),this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new Z).fromArray(n))}return this}}Ta.prototype.isSplineCurve=!0;var Ea=Object.freeze({__proto__:null,ArcCurve:ha,CatmullRomCurve3:ga,CubicBezierCurve:_a,CubicBezierCurve3:wa,EllipseCurve:ca,LineCurve:ba,LineCurve3:class extends la{constructor(t=new vt,e=new vt){super(),this.type="LineCurve3",this.isLineCurve3=!0,this.v1=t,this.v2=e}getPoint(t,e=new vt){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(t,e){return this.getPoint(t,e)}copy(t){return super.copy(t),this.v1.copy(t.v1),this.v2.copy(t.v2),this}toJSON(){const t=super.toJSON();return t.v1=this.v1.toArray(),t.v2=this.v2.toArray(),t}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}},QuadraticBezierCurve:Ma,QuadraticBezierCurve3:Sa,SplineCurve:Ta});class Aa extends la{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);t.equals(e)||this.curves.push(new ba(e,t))}getPoint(t,e){const n=t*this.getLength(),i=this.getCurveLengths();let r=0;for(;r<i.length;){if(i[r]>=n){const t=i[r]-n,s=this.curves[r],a=s.getLength(),o=0===a?0:1-t/a;return s.getPointAt(o,e)}r++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let n=0,i=this.curves.length;n<i;n++)e+=this.curves[n].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let n;for(let i=0,r=this.curves;i<r.length;i++){const s=r[i],a=s.isEllipseCurve?2*t:s.isLineCurve||s.isLineCurve3?1:s.isSplineCurve?t*s.points.length:t,o=s.getPoints(a);for(let t=0;t<o.length;t++){const i=o[t];n&&n.equals(i)||(e.push(i),n=i)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(t){super.copy(t),this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push(n.clone())}return this.autoClose=t.autoClose,this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose,t.curves=[];for(let e=0,n=this.curves.length;e<n;e++){const n=this.curves[e];t.curves.push(n.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push((new Ea[n.type]).fromJSON(n))}return this}}class Pa extends Aa{constructor(t){super(),this.type="Path",this.currentPoint=new Z,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,n=t.length;e<n;e++)this.lineTo(t[e].x,t[e].y);return this}moveTo(t,e){return this.currentPoint.set(t,e),this}lineTo(t,e){const n=new ba(this.currentPoint.clone(),new Z(t,e));return this.curves.push(n),this.currentPoint.set(t,e),this}quadraticCurveTo(t,e,n,i){const r=new Ma(this.currentPoint.clone(),new Z(t,e),new Z(n,i));return this.curves.push(r),this.currentPoint.set(n,i),this}bezierCurveTo(t,e,n,i,r,s){const a=new _a(this.currentPoint.clone(),new Z(t,e),new Z(n,i),new Z(r,s));return this.curves.push(a),this.currentPoint.set(r,s),this}splineThru(t){const e=[this.currentPoint.clone()].concat(t),n=new Ta(e);return this.curves.push(n),this.currentPoint.copy(t[t.length-1]),this}arc(t,e,n,i,r,s){const a=this.currentPoint.x,o=this.currentPoint.y;return this.absarc(t+a,e+o,n,i,r,s),this}absarc(t,e,n,i,r,s){return this.absellipse(t,e,n,n,i,r,s),this}ellipse(t,e,n,i,r,s,a,o){const l=this.currentPoint.x,c=this.currentPoint.y;return this.absellipse(t+l,e+c,n,i,r,s,a,o),this}absellipse(t,e,n,i,r,s,a,o){const l=new ca(t,e,n,i,r,s,a,o);if(this.curves.length>0){const t=l.getPoint(0);t.equals(this.currentPoint)||this.lineTo(t.x,t.y)}this.curves.push(l);const c=l.getPoint(1);return this.currentPoint.copy(c),this}copy(t){return super.copy(t),this.currentPoint.copy(t.currentPoint),this}toJSON(){const t=super.toJSON();return t.currentPoint=this.currentPoint.toArray(),t}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}class Ra extends Pa{constructor(t){super(t),this.uuid=W(),this.type="Shape",this.holes=[]}getPointsHoles(t){const e=[];for(let n=0,i=this.holes.length;n<i;n++)e[n]=this.holes[n].getPoints(t);return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t),this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid,t.holes=[];for(let e=0,n=this.holes.length;e<n;e++){const n=this.holes[e];t.holes.push(n.toJSON())}return t}fromJSON(t){super.fromJSON(t),this.uuid=t.uuid,this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push((new Pa).fromJSON(n))}return this}}function Ca(t,e,n,i,r){let s,a;if(r===function(t,e,n,i){let r=0;for(let s=e,a=n-i;s<n;s+=i)r+=(t[a]-t[s])*(t[s+1]+t[a+1]),a=s;return r}(t,e,n,i)>0)for(s=e;s<n;s+=i)a=Ka(s,t[s],t[s+1],a);else for(s=n-i;s>=e;s-=i)a=Ka(s,t[s],t[s+1],a);return a&&ja(a,a.next)&&(Qa(a),a=a.next),a}function La(t,e){if(!t)return t;e||(e=t);let n,i=t;do{if(n=!1,i.steiner||!ja(i,i.next)&&0!==Wa(i.prev,i,i.next))i=i.next;else{if(Qa(i),i=e=i.prev,i===i.next)break;n=!0}}while(n||i!==e);return e}function Da(t,e,n,i,r,s,a){if(!t)return;!a&&s&&function(t,e,n,i){let r=t;do{null===r.z&&(r.z=Ha(r.x,r.y,e,n,i)),r.prevZ=r.prev,r.nextZ=r.next,r=r.next}while(r!==t);r.prevZ.nextZ=null,r.prevZ=null,function(t){let e,n,i,r,s,a,o,l,c=1;do{for(n=t,t=null,s=null,a=0;n;){for(a++,i=n,o=0,e=0;e<c&&(o++,i=i.nextZ,i);e++);for(l=c;o>0||l>0&&i;)0!==o&&(0===l||!i||n.z<=i.z)?(r=n,n=n.nextZ,o--):(r=i,i=i.nextZ,l--),s?s.nextZ=r:t=r,r.prevZ=s,s=r;n=i}s.nextZ=null,c*=2}while(a>1)}(r)}(t,i,r,s);let o,l,c=t;for(;t.prev!==t.next;)if(o=t.prev,l=t.next,s?za(t,i,r,s):Ia(t))e.push(o.i/n),e.push(t.i/n),e.push(l.i/n),Qa(t),t=l.next,c=l.next;else if((t=l)===c){a?1===a?Da(t=Na(La(t),e,n),e,n,i,r,s,2):2===a&&Oa(t,e,n,i,r,s):Da(La(t),e,n,i,r,s,1);break}}function Ia(t){const e=t.prev,n=t,i=t.next;if(Wa(e,n,i)>=0)return!1;let r=t.next.next;for(;r!==t.prev;){if(ka(e.x,e.y,n.x,n.y,i.x,i.y,r.x,r.y)&&Wa(r.prev,r,r.next)>=0)return!1;r=r.next}return!0}function za(t,e,n,i){const r=t.prev,s=t,a=t.next;if(Wa(r,s,a)>=0)return!1;const o=r.x<s.x?r.x<a.x?r.x:a.x:s.x<a.x?s.x:a.x,l=r.y<s.y?r.y<a.y?r.y:a.y:s.y<a.y?s.y:a.y,c=r.x>s.x?r.x>a.x?r.x:a.x:s.x>a.x?s.x:a.x,h=r.y>s.y?r.y>a.y?r.y:a.y:s.y>a.y?s.y:a.y,u=Ha(o,l,e,n,i),d=Ha(c,h,e,n,i);let p=t.prevZ,m=t.nextZ;for(;p&&p.z>=u&&m&&m.z<=d;){if(p!==t.prev&&p!==t.next&&ka(r.x,r.y,s.x,s.y,a.x,a.y,p.x,p.y)&&Wa(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,m!==t.prev&&m!==t.next&&ka(r.x,r.y,s.x,s.y,a.x,a.y,m.x,m.y)&&Wa(m.prev,m,m.next)>=0)return!1;m=m.nextZ}for(;p&&p.z>=u;){if(p!==t.prev&&p!==t.next&&ka(r.x,r.y,s.x,s.y,a.x,a.y,p.x,p.y)&&Wa(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;m&&m.z<=d;){if(m!==t.prev&&m!==t.next&&ka(r.x,r.y,s.x,s.y,a.x,a.y,m.x,m.y)&&Wa(m.prev,m,m.next)>=0)return!1;m=m.nextZ}return!0}function Na(t,e,n){let i=t;do{const r=i.prev,s=i.next.next;!ja(r,s)&&qa(r,i,i.next,s)&&Za(r,s)&&Za(s,r)&&(e.push(r.i/n),e.push(i.i/n),e.push(s.i/n),Qa(i),Qa(i.next),i=t=s),i=i.next}while(i!==t);return La(i)}function Oa(t,e,n,i,r,s){let a=t;do{let t=a.next.next;for(;t!==a.prev;){if(a.i!==t.i&&Va(a,t)){let o=Ja(a,t);return a=La(a,a.next),o=La(o,o.next),Da(a,e,n,i,r,s),void Da(o,e,n,i,r,s)}t=t.next}a=a.next}while(a!==t)}function Fa(t,e){return t.x-e.x}function Ua(t,e){if(e=function(t,e){let n=e;const i=t.x,r=t.y;let s,a=-1/0;do{if(r<=n.y&&r>=n.next.y&&n.next.y!==n.y){const t=n.x+(r-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(t<=i&&t>a){if(a=t,t===i){if(r===n.y)return n;if(r===n.next.y)return n.next}s=n.x<n.next.x?n:n.next}}n=n.next}while(n!==e);if(!s)return null;if(i===a)return s;const o=s,l=s.x,c=s.y;let h,u=1/0;n=s;do{i>=n.x&&n.x>=l&&i!==n.x&&ka(r<c?i:a,r,l,c,r<c?a:i,r,n.x,n.y)&&(h=Math.abs(r-n.y)/(i-n.x),Za(n,t)&&(h<u||h===u&&(n.x>s.x||n.x===s.x&&Ba(s,n)))&&(s=n,u=h)),n=n.next}while(n!==o);return s}(t,e),e){const n=Ja(e,t);La(e,e.next),La(n,n.next)}}function Ba(t,e){return Wa(t.prev,t,e.prev)<0&&Wa(e.next,t,t.next)<0}function Ha(t,e,n,i,r){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=32767*(t-n)*r)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=32767*(e-i)*r)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function Ga(t){let e=t,n=t;do{(e.x<n.x||e.x===n.x&&e.y<n.y)&&(n=e),e=e.next}while(e!==t);return n}function ka(t,e,n,i,r,s,a,o){return(r-a)*(e-o)-(t-a)*(s-o)>=0&&(t-a)*(i-o)-(n-a)*(e-o)>=0&&(n-a)*(s-o)-(r-a)*(i-o)>=0}function Va(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!function(t,e){let n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&qa(n,n.next,t,e))return!0;n=n.next}while(n!==t);return!1}(t,e)&&(Za(t,e)&&Za(e,t)&&function(t,e){let n=t,i=!1;const r=(t.x+e.x)/2,s=(t.y+e.y)/2;do{n.y>s!=n.next.y>s&&n.next.y!==n.y&&r<(n.next.x-n.x)*(s-n.y)/(n.next.y-n.y)+n.x&&(i=!i),n=n.next}while(n!==t);return i}(t,e)&&(Wa(t.prev,t,e.prev)||Wa(t,e.prev,e))||ja(t,e)&&Wa(t.prev,t,t.next)>0&&Wa(e.prev,e,e.next)>0)}function Wa(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function ja(t,e){return t.x===e.x&&t.y===e.y}function qa(t,e,n,i){const r=Ya(Wa(t,e,n)),s=Ya(Wa(t,e,i)),a=Ya(Wa(n,i,t)),o=Ya(Wa(n,i,e));return r!==s&&a!==o||!(0!==r||!Xa(t,n,e))||!(0!==s||!Xa(t,i,e))||!(0!==a||!Xa(n,t,i))||!(0!==o||!Xa(n,e,i))}function Xa(t,e,n){return e.x<=Math.max(t.x,n.x)&&e.x>=Math.min(t.x,n.x)&&e.y<=Math.max(t.y,n.y)&&e.y>=Math.min(t.y,n.y)}function Ya(t){return t>0?1:t<0?-1:0}function Za(t,e){return Wa(t.prev,t,t.next)<0?Wa(t,e,t.next)>=0&&Wa(t,t.prev,e)>=0:Wa(t,e,t.prev)<0||Wa(t,t.next,e)<0}function Ja(t,e){const n=new $a(t.i,t.x,t.y),i=new $a(e.i,e.x,e.y),r=t.next,s=e.prev;return t.next=e,e.prev=t,n.next=r,r.prev=n,i.next=n,n.prev=i,s.next=i,i.prev=s,i}function Ka(t,e,n,i){const r=new $a(t,e,n);return i?(r.next=i.next,r.prev=i,i.next.prev=r,i.next=r):(r.prev=r,r.next=r),r}function Qa(t){t.next.prev=t.prev,t.prev.next=t.next,t.prevZ&&(t.prevZ.nextZ=t.nextZ),t.nextZ&&(t.nextZ.prevZ=t.prevZ)}function $a(t,e,n){this.i=t,this.x=e,this.y=n,this.prev=null,this.next=null,this.z=null,this.prevZ=null,this.nextZ=null,this.steiner=!1}class to{static area(t){const e=t.length;let n=0;for(let i=e-1,r=0;r<e;i=r++)n+=t[i].x*t[r].y-t[r].x*t[i].y;return.5*n}static isClockWise(t){return to.area(t)<0}static triangulateShape(t,e){const n=[],i=[],r=[];eo(t),no(n,t);let s=t.length;e.forEach(eo);for(let t=0;t<e.length;t++)i.push(s),s+=e[t].length,no(n,e[t]);const a=function(t,e,n=2){const i=e&&e.length,r=i?e[0]*n:t.length;let s=Ca(t,0,r,n,!0);const a=[];if(!s||s.next===s.prev)return a;let o,l,c,h,u,d,p;if(i&&(s=function(t,e,n,i){const r=[];let s,a,o,l,c;for(s=0,a=e.length;s<a;s++)o=e[s]*i,l=s<a-1?e[s+1]*i:t.length,c=Ca(t,o,l,i,!1),c===c.next&&(c.steiner=!0),r.push(Ga(c));for(r.sort(Fa),s=0;s<r.length;s++)Ua(r[s],n),n=La(n,n.next);return n}(t,e,s,n)),t.length>80*n){o=c=t[0],l=h=t[1];for(let e=n;e<r;e+=n)u=t[e],d=t[e+1],u<o&&(o=u),d<l&&(l=d),u>c&&(c=u),d>h&&(h=d);p=Math.max(c-o,h-l),p=0!==p?1/p:0}return Da(s,a,n,o,l,p),a}(n,i);for(let t=0;t<a.length;t+=3)r.push(a.slice(t,t+3));return r}}function eo(t){const e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function no(t,e){for(let n=0;n<e.length;n++)t.push(e[n].x),t.push(e[n].y)}class io extends Xe{constructor(t=new Ra([new Z(.5,.5),new Z(-.5,.5),new Z(-.5,-.5),new Z(.5,-.5)]),e={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const n=this,i=[],r=[];for(let e=0,n=t.length;e<n;e++)s(t[e]);function s(t){const s=[],a=void 0!==e.curveSegments?e.curveSegments:12,o=void 0!==e.steps?e.steps:1;let l=void 0!==e.depth?e.depth:1,c=void 0===e.bevelEnabled||e.bevelEnabled,h=void 0!==e.bevelThickness?e.bevelThickness:.2,u=void 0!==e.bevelSize?e.bevelSize:h-.1,d=void 0!==e.bevelOffset?e.bevelOffset:0,p=void 0!==e.bevelSegments?e.bevelSegments:3;const m=e.extrudePath,f=void 0!==e.UVGenerator?e.UVGenerator:ro;void 0!==e.amount&&(console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth."),l=e.amount);let g,v,y,x,_,w=!1;m&&(g=m.getSpacedPoints(o),w=!0,c=!1,v=m.computeFrenetFrames(o,!1),y=new vt,x=new vt,_=new vt),c||(p=0,h=0,u=0,d=0);const b=t.extractPoints(a);let M=b.shape;const S=b.holes;if(!to.isClockWise(M)){M=M.reverse();for(let t=0,e=S.length;t<e;t++){const e=S[t];to.isClockWise(e)&&(S[t]=e.reverse())}}const T=to.triangulateShape(M,S),E=M;for(let t=0,e=S.length;t<e;t++){const e=S[t];M=M.concat(e)}function A(t,e,n){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),e.clone().multiplyScalar(n).add(t)}const P=M.length,R=T.length;function C(t,e,n){let i,r,s;const a=t.x-e.x,o=t.y-e.y,l=n.x-t.x,c=n.y-t.y,h=a*a+o*o,u=a*c-o*l;if(Math.abs(u)>Number.EPSILON){const u=Math.sqrt(h),d=Math.sqrt(l*l+c*c),p=e.x-o/u,m=e.y+a/u,f=((n.x-c/d-p)*c-(n.y+l/d-m)*l)/(a*c-o*l);i=p+a*f-t.x,r=m+o*f-t.y;const g=i*i+r*r;if(g<=2)return new Z(i,r);s=Math.sqrt(g/2)}else{let t=!1;a>Number.EPSILON?l>Number.EPSILON&&(t=!0):a<-Number.EPSILON?l<-Number.EPSILON&&(t=!0):Math.sign(o)===Math.sign(c)&&(t=!0),t?(i=-o,r=a,s=Math.sqrt(h)):(i=a,r=o,s=Math.sqrt(h/2))}return new Z(i/s,r/s)}const L=[];for(let t=0,e=E.length,n=e-1,i=t+1;t<e;t++,n++,i++)n===e&&(n=0),i===e&&(i=0),L[t]=C(E[t],E[n],E[i]);const D=[];let I,z=L.concat();for(let t=0,e=S.length;t<e;t++){const e=S[t];I=[];for(let t=0,n=e.length,i=n-1,r=t+1;t<n;t++,i++,r++)i===n&&(i=0),r===n&&(r=0),I[t]=C(e[t],e[i],e[r]);D.push(I),z=z.concat(I)}for(let t=0;t<p;t++){const e=t/p,n=h*Math.cos(e*Math.PI/2),i=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=E.length;t<e;t++){const e=A(E[t],L[t],i);F(e.x,e.y,-n)}for(let t=0,e=S.length;t<e;t++){const e=S[t];I=D[t];for(let t=0,r=e.length;t<r;t++){const r=A(e[t],I[t],i);F(r.x,r.y,-n)}}}const N=u+d;for(let t=0;t<P;t++){const e=c?A(M[t],z[t],N):M[t];w?(x.copy(v.normals[0]).multiplyScalar(e.x),y.copy(v.binormals[0]).multiplyScalar(e.y),_.copy(g[0]).add(x).add(y),F(_.x,_.y,_.z)):F(e.x,e.y,0)}for(let t=1;t<=o;t++)for(let e=0;e<P;e++){const n=c?A(M[e],z[e],N):M[e];w?(x.copy(v.normals[t]).multiplyScalar(n.x),y.copy(v.binormals[t]).multiplyScalar(n.y),_.copy(g[t]).add(x).add(y),F(_.x,_.y,_.z)):F(n.x,n.y,l/o*t)}for(let t=p-1;t>=0;t--){const e=t/p,n=h*Math.cos(e*Math.PI/2),i=u*Math.sin(e*Math.PI/2)+d;for(let t=0,e=E.length;t<e;t++){const e=A(E[t],L[t],i);F(e.x,e.y,l+n)}for(let t=0,e=S.length;t<e;t++){const e=S[t];I=D[t];for(let t=0,r=e.length;t<r;t++){const r=A(e[t],I[t],i);w?F(r.x,r.y+g[o-1].y,g[o-1].x+n):F(r.x,r.y,l+n)}}}function O(t,e){let n=t.length;for(;--n>=0;){const i=n;let r=n-1;r<0&&(r=t.length-1);for(let t=0,n=o+2*p;t<n;t++){const n=P*t,s=P*(t+1);B(e+i+n,e+r+n,e+r+s,e+i+s)}}}function F(t,e,n){s.push(t),s.push(e),s.push(n)}function U(t,e,r){H(t),H(e),H(r);const s=i.length/3,a=f.generateTopUV(n,i,s-3,s-2,s-1);G(a[0]),G(a[1]),G(a[2])}function B(t,e,r,s){H(t),H(e),H(s),H(e),H(r),H(s);const a=i.length/3,o=f.generateSideWallUV(n,i,a-6,a-3,a-2,a-1);G(o[0]),G(o[1]),G(o[3]),G(o[1]),G(o[2]),G(o[3])}function H(t){i.push(s[3*t+0]),i.push(s[3*t+1]),i.push(s[3*t+2])}function G(t){r.push(t.x),r.push(t.y)}!function(){const t=i.length/3;if(c){let t=0,e=P*t;for(let t=0;t<R;t++){const n=T[t];U(n[2]+e,n[1]+e,n[0]+e)}t=o+2*p,e=P*t;for(let t=0;t<R;t++){const n=T[t];U(n[0]+e,n[1]+e,n[2]+e)}}else{for(let t=0;t<R;t++){const e=T[t];U(e[2],e[1],e[0])}for(let t=0;t<R;t++){const e=T[t];U(e[0]+P*o,e[1]+P*o,e[2]+P*o)}}n.addGroup(t,i.length/3-t,0)}(),function(){const t=i.length/3;let e=0;O(E,e),e+=E.length;for(let t=0,n=S.length;t<n;t++){const n=S[t];O(n,e),e+=n.length}n.addGroup(t,i.length/3-t,1)}()}this.setAttribute("position",new Be(i,3)),this.setAttribute("uv",new Be(r,2)),this.computeVertexNormals()}toJSON(){const t=super.toJSON();return function(t,e,n){if(n.shapes=[],Array.isArray(t))for(let e=0,i=t.length;e<i;e++){const i=t[e];n.shapes.push(i.uuid)}else n.shapes.push(t.uuid);return void 0!==e.extrudePath&&(n.options.extrudePath=e.extrudePath.toJSON()),n}(this.parameters.shapes,this.parameters.options,t)}static fromJSON(t,e){const n=[];for(let i=0,r=t.shapes.length;i<r;i++){const r=e[t.shapes[i]];n.push(r)}const i=t.options.extrudePath;return void 0!==i&&(t.options.extrudePath=(new Ea[i.type]).fromJSON(i)),new io(n,t.options)}}const ro={generateTopUV:function(t,e,n,i,r){const s=e[3*n],a=e[3*n+1],o=e[3*i],l=e[3*i+1],c=e[3*r],h=e[3*r+1];return[new Z(s,a),new Z(o,l),new Z(c,h)]},generateSideWallUV:function(t,e,n,i,r,s){const a=e[3*n],o=e[3*n+1],l=e[3*n+2],c=e[3*i],h=e[3*i+1],u=e[3*i+2],d=e[3*r],p=e[3*r+1],m=e[3*r+2],f=e[3*s],g=e[3*s+1],v=e[3*s+2];return Math.abs(o-h)<Math.abs(a-c)?[new Z(a,1-l),new Z(c,1-u),new Z(d,1-m),new Z(f,1-v)]:[new Z(o,1-l),new Z(h,1-u),new Z(p,1-m),new Z(g,1-v)]}};class so extends Xe{constructor(t=.5,e=1,n=8,i=1,r=0,s=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:i,thetaStart:r,thetaLength:s},n=Math.max(3,n);const a=[],o=[],l=[],c=[];let h=t;const u=(e-t)/(i=Math.max(1,i)),d=new vt,p=new Z;for(let t=0;t<=i;t++){for(let t=0;t<=n;t++){const i=r+t/n*s;d.x=h*Math.cos(i),d.y=h*Math.sin(i),o.push(d.x,d.y,d.z),l.push(0,0,1),p.x=(d.x/e+1)/2,p.y=(d.y/e+1)/2,c.push(p.x,p.y)}h+=u}for(let t=0;t<i;t++){const e=t*(n+1);for(let t=0;t<n;t++){const i=t+e,r=i,s=i+n+1,o=i+n+2,l=i+1;a.push(r,s,l),a.push(s,o,l)}}this.setIndex(a),this.setAttribute("position",new Be(o,3)),this.setAttribute("normal",new Be(l,3)),this.setAttribute("uv",new Be(c,2))}static fromJSON(t){return new so(t.innerRadius,t.outerRadius,t.thetaSegments,t.phiSegments,t.thetaStart,t.thetaLength)}}class ao extends Xe{constructor(t=new Ra([new Z(0,.5),new Z(-.5,-.5),new Z(.5,-.5)]),e=12){super(),this.type="ShapeGeometry",this.parameters={shapes:t,curveSegments:e};const n=[],i=[],r=[],s=[];let a=0,o=0;if(!1===Array.isArray(t))l(t);else for(let e=0;e<t.length;e++)l(t[e]),this.addGroup(a,o,e),a+=o,o=0;function l(t){const a=i.length/3,l=t.extractPoints(e);let c=l.shape;const h=l.holes;!1===to.isClockWise(c)&&(c=c.reverse());for(let t=0,e=h.length;t<e;t++){const e=h[t];!0===to.isClockWise(e)&&(h[t]=e.reverse())}const u=to.triangulateShape(c,h);for(let t=0,e=h.length;t<e;t++){const e=h[t];c=c.concat(e)}for(let t=0,e=c.length;t<e;t++){const e=c[t];i.push(e.x,e.y,0),r.push(0,0,1),s.push(e.x,e.y)}for(let t=0,e=u.length;t<e;t++){const e=u[t],i=e[0]+a,r=e[1]+a,s=e[2]+a;n.push(i,r,s),o+=3}}this.setIndex(n),this.setAttribute("position",new Be(i,3)),this.setAttribute("normal",new Be(r,3)),this.setAttribute("uv",new Be(s,2))}toJSON(){const t=super.toJSON();return function(t,e){if(e.shapes=[],Array.isArray(t))for(let n=0,i=t.length;n<i;n++){const i=t[n];e.shapes.push(i.uuid)}else e.shapes.push(t.uuid);return e}(this.parameters.shapes,t)}static fromJSON(t,e){const n=[];for(let i=0,r=t.shapes.length;i<r;i++){const r=e[t.shapes[i]];n.push(r)}return new ao(n,t.curveSegments)}}class oo extends Xe{constructor(t=1,e=32,n=16,i=0,r=2*Math.PI,s=0,a=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:r,thetaStart:s,thetaLength:a},e=Math.max(3,Math.floor(e)),n=Math.max(2,Math.floor(n));const o=Math.min(s+a,Math.PI);let l=0;const c=[],h=new vt,u=new vt,d=[],p=[],m=[],f=[];for(let d=0;d<=n;d++){const g=[],v=d/n;let y=0;0==d&&0==s?y=.5/e:d==n&&o==Math.PI&&(y=-.5/e);for(let n=0;n<=e;n++){const o=n/e;h.x=-t*Math.cos(i+o*r)*Math.sin(s+v*a),h.y=t*Math.cos(s+v*a),h.z=t*Math.sin(i+o*r)*Math.sin(s+v*a),p.push(h.x,h.y,h.z),u.copy(h).normalize(),m.push(u.x,u.y,u.z),f.push(o+y,1-v),g.push(l++)}c.push(g)}for(let t=0;t<n;t++)for(let i=0;i<e;i++){const e=c[t][i+1],r=c[t][i],a=c[t+1][i],l=c[t+1][i+1];(0!==t||s>0)&&d.push(e,r,l),(t!==n-1||o<Math.PI)&&d.push(r,a,l)}this.setIndex(d),this.setAttribute("position",new Be(p,3)),this.setAttribute("normal",new Be(m,3)),this.setAttribute("uv",new Be(f,2))}static fromJSON(t){return new oo(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class lo extends De{constructor(t){super(),this.type="ShadowMaterial",this.color=new st(0),this.transparent=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this}}lo.prototype.isShadowMaterial=!0;class co extends yn{constructor(t){super(t),this.type="RawShaderMaterial"}}co.prototype.isRawShaderMaterial=!0;class ho extends De{constructor(t){super(),this.defines={STANDARD:""},this.type="MeshStandardMaterial",this.color=new st(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new st(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Z(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapIntensity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={STANDARD:""},this.color.copy(t.color),this.roughness=t.roughness,this.metalness=t.metalness,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.roughnessMap=t.roughnessMap,this.metalnessMap=t.metalnessMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapIntensity=t.envMapIntensity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this}}ho.prototype.isMeshStandardMaterial=!0;class uo extends ho{constructor(t){super(),this.defines={STANDARD:"",PHYSICAL:""},this.type="MeshPhysicalMaterial",this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new Z(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return j(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.sheenColor=new st(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=0,this.attenuationColor=new st(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new st(1,1,1),this.specularColorMap=null,this._sheen=0,this._clearcoat=0,this._transmission=0,this.setValues(t)}get sheen(){return this._sheen}set sheen(t){this._sheen>0!=t>0&&this.version++,this._sheen=t}get clearcoat(){return this._clearcoat}set clearcoat(t){this._clearcoat>0!=t>0&&this.version++,this._clearcoat=t}get transmission(){return this._transmission}set transmission(t){this._transmission>0!=t>0&&this.version++,this._transmission=t}copy(t){return super.copy(t),this.defines={STANDARD:"",PHYSICAL:""},this.clearcoat=t.clearcoat,this.clearcoatMap=t.clearcoatMap,this.clearcoatRoughness=t.clearcoatRoughness,this.clearcoatRoughnessMap=t.clearcoatRoughnessMap,this.clearcoatNormalMap=t.clearcoatNormalMap,this.clearcoatNormalScale.copy(t.clearcoatNormalScale),this.ior=t.ior,this.sheen=t.sheen,this.sheenColor.copy(t.sheenColor),this.sheenColorMap=t.sheenColorMap,this.sheenRoughness=t.sheenRoughness,this.sheenRoughnessMap=t.sheenRoughnessMap,this.transmission=t.transmission,this.transmissionMap=t.transmissionMap,this.thickness=t.thickness,this.thicknessMap=t.thicknessMap,this.attenuationDistance=t.attenuationDistance,this.attenuationColor.copy(t.attenuationColor),this.specularIntensity=t.specularIntensity,this.specularIntensityMap=t.specularIntensityMap,this.specularColor.copy(t.specularColor),this.specularColorMap=t.specularColorMap,this}}uo.prototype.isMeshPhysicalMaterial=!0;class po extends De{constructor(t){super(),this.type="MeshPhongMaterial",this.color=new st(16777215),this.specular=new st(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new st(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Z(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.specular.copy(t.specular),this.shininess=t.shininess,this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.flatShading=t.flatShading,this}}po.prototype.isMeshPhongMaterial=!0;class mo extends De{constructor(t){super(),this.defines={TOON:""},this.type="MeshToonMaterial",this.color=new st(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new st(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Z(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.gradientMap=t.gradientMap,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}mo.prototype.isMeshToonMaterial=!0;class fo extends De{constructor(t){super(),this.type="MeshNormalMaterial",this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Z(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.flatShading=t.flatShading,this}}fo.prototype.isMeshNormalMaterial=!0;class go extends De{constructor(t){super(),this.type="MeshLambertMaterial",this.color=new st(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new st(0),this.emissiveIntensity=1,this.emissiveMap=null,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.emissive.copy(t.emissive),this.emissiveMap=t.emissiveMap,this.emissiveIntensity=t.emissiveIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this}}go.prototype.isMeshLambertMaterial=!0;class vo extends De{constructor(t){super(),this.defines={MATCAP:""},this.type="MeshMatcapMaterial",this.color=new st(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=0,this.normalScale=new Z(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.setValues(t)}copy(t){return super.copy(t),this.defines={MATCAP:""},this.color.copy(t.color),this.matcap=t.matcap,this.map=t.map,this.bumpMap=t.bumpMap,this.bumpScale=t.bumpScale,this.normalMap=t.normalMap,this.normalMapType=t.normalMapType,this.normalScale.copy(t.normalScale),this.displacementMap=t.displacementMap,this.displacementScale=t.displacementScale,this.displacementBias=t.displacementBias,this.alphaMap=t.alphaMap,this.flatShading=t.flatShading,this}}vo.prototype.isMeshMatcapMaterial=!0;class yo extends ks{constructor(t){super(),this.type="LineDashedMaterial",this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(t){return super.copy(t),this.scale=t.scale,this.dashSize=t.dashSize,this.gapSize=t.gapSize,this}}yo.prototype.isLineDashedMaterial=!0;const xo={ShadowMaterial:lo,SpriteMaterial:gs,RawShaderMaterial:co,ShaderMaterial:yn,PointsMaterial:Qs,MeshPhysicalMaterial:uo,MeshStandardMaterial:ho,MeshPhongMaterial:po,MeshToonMaterial:mo,MeshNormalMaterial:fo,MeshLambertMaterial:go,MeshDepthMaterial:Jr,MeshDistanceMaterial:Kr,MeshBasicMaterial:Ie,MeshMatcapMaterial:vo,LineDashedMaterial:yo,LineBasicMaterial:ks,Material:De};De.fromType=function(t){return new xo[t]};const _o={arraySlice:function(t,e,n){return _o.isTypedArray(t)?new t.constructor(t.subarray(e,void 0!==n?n:t.length)):t.slice(e,n)},convertArray:function(t,e,n){return!t||!n&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){const e=t.length,n=new Array(e);for(let t=0;t!==e;++t)n[t]=t;return n.sort((function(e,n){return t[e]-t[n]})),n},sortedArray:function(t,e,n){const i=t.length,r=new t.constructor(i);for(let s=0,a=0;a!==i;++s){const i=n[s]*e;for(let n=0;n!==e;++n)r[a++]=t[i+n]}return r},flattenJSON:function(t,e,n,i){let r=1,s=t[0];for(;void 0!==s&&void 0===s[i];)s=t[r++];if(void 0===s)return;let a=s[i];if(void 0!==a)if(Array.isArray(a))do{a=s[i],void 0!==a&&(e.push(s.time),n.push.apply(n,a)),s=t[r++]}while(void 0!==s);else if(void 0!==a.toArray)do{a=s[i],void 0!==a&&(e.push(s.time),a.toArray(n,n.length)),s=t[r++]}while(void 0!==s);else do{a=s[i],void 0!==a&&(e.push(s.time),n.push(a)),s=t[r++]}while(void 0!==s)},subclip:function(t,e,n,i,r=30){const s=t.clone();s.name=e;const a=[];for(let t=0;t<s.tracks.length;++t){const e=s.tracks[t],o=e.getValueSize(),l=[],c=[];for(let t=0;t<e.times.length;++t){const s=e.times[t]*r;if(!(s<n||s>=i)){l.push(e.times[t]);for(let n=0;n<o;++n)c.push(e.values[t*o+n])}}0!==l.length&&(e.times=_o.convertArray(l,e.times.constructor),e.values=_o.convertArray(c,e.values.constructor),a.push(e))}s.tracks=a;let o=1/0;for(let t=0;t<s.tracks.length;++t)o>s.tracks[t].times[0]&&(o=s.tracks[t].times[0]);for(let t=0;t<s.tracks.length;++t)s.tracks[t].shift(-1*o);return s.resetDuration(),s},makeClipAdditive:function(t,e=0,n=t,i=30){i<=0&&(i=30);const r=n.tracks.length,s=e/i;for(let e=0;e<r;++e){const i=n.tracks[e],r=i.ValueTypeName;if("bool"===r||"string"===r)continue;const a=t.tracks.find((function(t){return t.name===i.name&&t.ValueTypeName===r}));if(void 0===a)continue;let o=0;const l=i.getValueSize();i.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(o=l/3);let c=0;const h=a.getValueSize();a.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(c=h/3);const u=i.times.length-1;let d;if(s<=i.times[0]){const t=o,e=l-o;d=_o.arraySlice(i.values,t,e)}else if(s>=i.times[u]){const t=u*l+o,e=t+l-o;d=_o.arraySlice(i.values,t,e)}else{const t=i.createInterpolant(),e=o,n=l-o;t.evaluate(s),d=_o.arraySlice(t.resultBuffer,e,n)}"quaternion"===r&&(new gt).fromArray(d).normalize().conjugate().toArray(d);const p=a.times.length;for(let t=0;t<p;++t){const e=t*h+c;if("quaternion"===r)gt.multiplyQuaternionsFlat(a.values,e,d,0,a.values,e);else{const t=h-2*c;for(let n=0;n<t;++n)a.values[e+n]-=d[n]}}}return t.blendMode=2501,t}};class wo{constructor(t,e,n,i){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==i?i:new e.constructor(n),this.sampleValues=e,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let n=this._cachedIndex,i=e[n],r=e[n-1];t:{e:{let s;n:{i:if(!(t<i)){for(let s=n+2;;){if(void 0===i){if(t<r)break i;return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,t,r)}if(n===s)break;if(r=i,i=e[++n],t<i)break e}s=e.length;break n}if(t>=r)break t;{const a=e[1];t<a&&(n=2,r=a);for(let s=n-2;;){if(void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,i);if(n===s)break;if(i=r,r=e[--n-1],t>=r)break e}s=n,n=0}}for(;n<s;){const i=n+s>>>1;t<e[i]?s=i:n=i+1}if(i=e[n],r=e[n-1],void 0===r)return this._cachedIndex=0,this.beforeStart_(0,t,i);if(void 0===i)return n=e.length,this._cachedIndex=n,this.afterEnd_(n-1,r,t)}this._cachedIndex=n,this.intervalChanged_(n,r,i)}return this.interpolate_(n,r,t,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,n=this.sampleValues,i=this.valueSize,r=t*i;for(let t=0;t!==i;++t)e[t]=n[r+t];return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}wo.prototype.beforeStart_=wo.prototype.copySampleValue_,wo.prototype.afterEnd_=wo.prototype.copySampleValue_;class bo extends wo{constructor(t,e,n,i){super(t,e,n,i),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:C,endingEnd:C}}intervalChanged_(t,e,n){const i=this.parameterPositions;let r=t-2,s=t+1,a=i[r],o=i[s];if(void 0===a)switch(this.getSettings_().endingStart){case L:r=t,a=2*e-n;break;case D:r=i.length-2,a=e+i[r]-i[r+1];break;default:r=t,a=n}if(void 0===o)switch(this.getSettings_().endingEnd){case L:s=t,o=2*n-e;break;case D:s=1,o=n+i[1]-i[0];break;default:s=t-1,o=e}const l=.5*(n-e),c=this.valueSize;this._weightPrev=l/(e-a),this._weightNext=l/(o-n),this._offsetPrev=r*c,this._offsetNext=s*c}interpolate_(t,e,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,l=o-a,c=this._offsetPrev,h=this._offsetNext,u=this._weightPrev,d=this._weightNext,p=(n-e)/(i-e),m=p*p,f=m*p,g=-u*f+2*u*m-u*p,v=(1+u)*f+(-1.5-2*u)*m+(-.5+u)*p+1,y=(-1-d)*f+(1.5+d)*m+.5*p,x=d*f-d*m;for(let t=0;t!==a;++t)r[t]=g*s[c+t]+v*s[l+t]+y*s[o+t]+x*s[h+t];return r}}class Mo extends wo{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=t*a,l=o-a,c=(n-e)/(i-e),h=1-c;for(let t=0;t!==a;++t)r[t]=s[l+t]*h+s[o+t]*c;return r}}class So extends wo{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t){return this.copySampleValue_(t-1)}}class To{constructor(t,e,n,i){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=_o.convertArray(e,this.TimeBufferType),this.values=_o.convertArray(n,this.ValueBufferType),this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let n;if(e.toJSON!==this.toJSON)n=e.toJSON(t);else{n={name:t.name,times:_o.convertArray(t.times,Array),values:_o.convertArray(t.values,Array)};const e=t.getInterpolation();e!==t.DefaultInterpolation&&(n.interpolation=e)}return n.type=t.ValueTypeName,n}InterpolantFactoryMethodDiscrete(t){return new So(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new Mo(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new bo(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case A:e=this.InterpolantFactoryMethodDiscrete;break;case P:e=this.InterpolantFactoryMethodLinear;break;case R:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return A;case this.InterpolantFactoryMethodLinear:return P;case this.InterpolantFactoryMethodSmooth:return R}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let n=0,i=e.length;n!==i;++n)e[n]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let n=0,i=e.length;n!==i;++n)e[n]*=t}return this}trim(t,e){const n=this.times,i=n.length;let r=0,s=i-1;for(;r!==i&&n[r]<t;)++r;for(;-1!==s&&n[s]>e;)--s;if(++s,0!==r||s!==i){r>=s&&(s=Math.max(s,1),r=s-1);const t=this.getValueSize();this.times=_o.arraySlice(n,r,s),this.values=_o.arraySlice(this.values,r*t,s*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);const n=this.times,i=this.values,r=n.length;0===r&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);let s=null;for(let e=0;e!==r;e++){const i=n[e];if("number"==typeof i&&isNaN(i)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,i),t=!1;break}if(null!==s&&s>i){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,i,s),t=!1;break}s=i}if(void 0!==i&&_o.isTypedArray(i))for(let e=0,n=i.length;e!==n;++e){const n=i[e];if(isNaN(n)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,n),t=!1;break}}return t}optimize(){const t=_o.arraySlice(this.times),e=_o.arraySlice(this.values),n=this.getValueSize(),i=this.getInterpolation()===R,r=t.length-1;let s=1;for(let a=1;a<r;++a){let r=!1;const o=t[a];if(o!==t[a+1]&&(1!==a||o!==t[0]))if(i)r=!0;else{const t=a*n,i=t-n,s=t+n;for(let a=0;a!==n;++a){const n=e[t+a];if(n!==e[i+a]||n!==e[s+a]){r=!0;break}}}if(r){if(a!==s){t[s]=t[a];const i=a*n,r=s*n;for(let t=0;t!==n;++t)e[r+t]=e[i+t]}++s}}if(r>0){t[s]=t[r];for(let t=r*n,i=s*n,a=0;a!==n;++a)e[i+a]=e[t+a];++s}return s!==t.length?(this.times=_o.arraySlice(t,0,s),this.values=_o.arraySlice(e,0,s*n)):(this.times=t,this.values=e),this}clone(){const t=_o.arraySlice(this.times,0),e=_o.arraySlice(this.values,0),n=new(0,this.constructor)(this.name,t,e);return n.createInterpolant=this.createInterpolant,n}}To.prototype.TimeBufferType=Float32Array,To.prototype.ValueBufferType=Float32Array,To.prototype.DefaultInterpolation=P;class Eo extends To{}Eo.prototype.ValueTypeName="bool",Eo.prototype.ValueBufferType=Array,Eo.prototype.DefaultInterpolation=A,Eo.prototype.InterpolantFactoryMethodLinear=void 0,Eo.prototype.InterpolantFactoryMethodSmooth=void 0;class Ao extends To{}Ao.prototype.ValueTypeName="color";class Po extends To{}Po.prototype.ValueTypeName="number";class Ro extends wo{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,s=this.sampleValues,a=this.valueSize,o=(n-e)/(i-e);let l=t*a;for(let t=l+a;l!==t;l+=4)gt.slerpFlat(r,0,s,l-a,s,l,o);return r}}class Co extends To{InterpolantFactoryMethodLinear(t){return new Ro(this.times,this.values,this.getValueSize(),t)}}Co.prototype.ValueTypeName="quaternion",Co.prototype.DefaultInterpolation=P,Co.prototype.InterpolantFactoryMethodSmooth=void 0;class Lo extends To{}Lo.prototype.ValueTypeName="string",Lo.prototype.ValueBufferType=Array,Lo.prototype.DefaultInterpolation=A,Lo.prototype.InterpolantFactoryMethodLinear=void 0,Lo.prototype.InterpolantFactoryMethodSmooth=void 0;class Do extends To{}Do.prototype.ValueTypeName="vector";class Io{constructor(t,e=-1,n,i=2500){this.name=t,this.tracks=n,this.duration=e,this.blendMode=i,this.uuid=W(),this.duration<0&&this.resetDuration()}static parse(t){const e=[],n=t.tracks,i=1/(t.fps||1);for(let t=0,r=n.length;t!==r;++t)e.push(zo(n[t]).scale(i));const r=new this(t.name,t.duration,e,t.blendMode);return r.uuid=t.uuid,r}static toJSON(t){const e=[],n=t.tracks,i={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,i=n.length;t!==i;++t)e.push(To.toJSON(n[t]));return i}static CreateFromMorphTargetSequence(t,e,n,i){const r=e.length,s=[];for(let t=0;t<r;t++){let a=[],o=[];a.push((t+r-1)%r,t,(t+1)%r),o.push(0,1,0);const l=_o.getKeyframeOrder(a);a=_o.sortedArray(a,1,l),o=_o.sortedArray(o,1,l),i||0!==a[0]||(a.push(r),o.push(o[0])),s.push(new Po(".morphTargetInfluences["+e[t].name+"]",a,o).scale(1/n))}return new this(t,-1,s)}static findByName(t,e){let n=t;if(!Array.isArray(t)){const e=t;n=e.geometry&&e.geometry.animations||e.animations}for(let t=0;t<n.length;t++)if(n[t].name===e)return n[t];return null}static CreateClipsFromMorphTargetSequences(t,e,n){const i={},r=/^([\w-]*?)([\d]+)$/;for(let e=0,n=t.length;e<n;e++){const n=t[e],s=n.name.match(r);if(s&&s.length>1){const t=s[1];let e=i[t];e||(i[t]=e=[]),e.push(n)}}const s=[];for(const t in i)s.push(this.CreateFromMorphTargetSequence(t,i[t],e,n));return s}static parseAnimation(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(t,e,n,i,r){if(0!==n.length){const s=[],a=[];_o.flattenJSON(n,s,a,i),0!==s.length&&r.push(new t(e,s,a))}},i=[],r=t.name||"default",s=t.fps||30,a=t.blendMode;let o=t.length||-1;const l=t.hierarchy||[];for(let t=0;t<l.length;t++){const r=l[t].keys;if(r&&0!==r.length)if(r[0].morphTargets){const t={};let e;for(e=0;e<r.length;e++)if(r[e].morphTargets)for(let n=0;n<r[e].morphTargets.length;n++)t[r[e].morphTargets[n]]=-1;for(const n in t){const t=[],s=[];for(let i=0;i!==r[e].morphTargets.length;++i){const i=r[e];t.push(i.time),s.push(i.morphTarget===n?1:0)}i.push(new Po(".morphTargetInfluence["+n+"]",t,s))}o=t.length*s}else{const s=".bones["+e[t].name+"]";n(Do,s+".position",r,"pos",i),n(Co,s+".quaternion",r,"rot",i),n(Do,s+".scale",r,"scl",i)}}return 0===i.length?null:new this(r,o,i,a)}resetDuration(){let t=0;for(let e=0,n=this.tracks.length;e!==n;++e){const n=this.tracks[e];t=Math.max(t,n.times[n.times.length-1])}return this.duration=t,this}trim(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].trim(0,this.duration);return this}validate(){let t=!0;for(let e=0;e<this.tracks.length;e++)t=t&&this.tracks[e].validate();return t}optimize(){for(let t=0;t<this.tracks.length;t++)this.tracks[t].optimize();return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++)t.push(this.tracks[e].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function zo(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return Po;case"vector":case"vector2":case"vector3":case"vector4":return Do;case"color":return Ao;case"quaternion":return Co;case"bool":case"boolean":return Eo;case"string":return Lo}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){const e=[],n=[];_o.flattenJSON(t.keys,e,n,"value"),t.times=e,t.values=n}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}const No={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};const Oo=new class{constructor(t,e,n){const i=this;let r,s=!1,a=0,o=0;const l=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=n,this.itemStart=function(t){o++,!1===s&&void 0!==i.onStart&&i.onStart(t,a,o),s=!0},this.itemEnd=function(t){a++,void 0!==i.onProgress&&i.onProgress(t,a,o),a===o&&(s=!1,void 0!==i.onLoad&&i.onLoad())},this.itemError=function(t){void 0!==i.onError&&i.onError(t)},this.resolveURL=function(t){return r?r(t):t},this.setURLModifier=function(t){return r=t,this},this.addHandler=function(t,e){return l.push(t,e),this},this.removeHandler=function(t){const e=l.indexOf(t);return-1!==e&&l.splice(e,2),this},this.getHandler=function(t){for(let e=0,n=l.length;e<n;e+=2){const n=l[e],i=l[e+1];if(n.global&&(n.lastIndex=0),n.test(t))return i}return null}}};class Fo{constructor(t){this.manager=void 0!==t?t:Oo,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const n=this;return new Promise((function(i,r){n.load(t,i,e,r)}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(t){return this.path=t,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}const Uo={};class Bo extends Fo{constructor(t){super(t)}load(t,e,n,i){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=No.get(t);if(void 0!==r)return this.manager.itemStart(t),setTimeout((()=>{e&&e(r),this.manager.itemEnd(t)}),0),r;if(void 0!==Uo[t])return void Uo[t].push({onLoad:e,onProgress:n,onError:i});Uo[t]=[],Uo[t].push({onLoad:e,onProgress:n,onError:i});const s=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),a=this.mimeType,o=this.responseType;fetch(s).then((e=>{if(200===e.status||0===e.status){if(0===e.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),"undefined"==typeof ReadableStream||void 0===e.body||void 0===e.body.getReader)return e;const n=Uo[t],i=e.body.getReader(),r=e.headers.get("Content-Length"),s=r?parseInt(r):0,a=0!==s;let o=0;const l=new ReadableStream({start(t){!function e(){i.read().then((({done:i,value:r})=>{if(i)t.close();else{o+=r.byteLength;const i=new ProgressEvent("progress",{lengthComputable:a,loaded:o,total:s});for(let t=0,e=n.length;t<e;t++){const e=n[t];e.onProgress&&e.onProgress(i)}t.enqueue(r),e()}}))}()}});return new Response(l)}throw Error(`fetch for "${e.url}" responded with ${e.status}: ${e.statusText}`)})).then((t=>{switch(o){case"arraybuffer":return t.arrayBuffer();case"blob":return t.blob();case"document":return t.text().then((t=>(new DOMParser).parseFromString(t,a)));case"json":return t.json();default:if(void 0===a)return t.text();{const e=/charset="?([^;"\s]*)"?/i.exec(a),n=e&&e[1]?e[1].toLowerCase():void 0,i=new TextDecoder(n);return t.arrayBuffer().then((t=>i.decode(t)))}}})).then((e=>{No.add(t,e);const n=Uo[t];delete Uo[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];i.onLoad&&i.onLoad(e)}})).catch((e=>{const n=Uo[t];if(void 0===n)throw this.manager.itemError(t),e;delete Uo[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];i.onError&&i.onError(e)}this.manager.itemError(t)})).finally((()=>{this.manager.itemEnd(t)})),this.manager.itemStart(t)}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class Ho extends Fo{constructor(t){super(t)}load(t,e,n,i){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,s=No.get(t);if(void 0!==s)return r.manager.itemStart(t),setTimeout((function(){e&&e(s),r.manager.itemEnd(t)}),0),s;const a=Q("img");function o(){c(),No.add(t,this),e&&e(this),r.manager.itemEnd(t)}function l(e){c(),i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)}function c(){a.removeEventListener("load",o,!1),a.removeEventListener("error",l,!1)}return a.addEventListener("load",o,!1),a.addEventListener("error",l,!1),"data:"!==t.slice(0,5)&&void 0!==this.crossOrigin&&(a.crossOrigin=this.crossOrigin),r.manager.itemStart(t),a.src=t,a}}class Go extends Fo{constructor(t){super(t)}load(t,e,n,i){const r=new Mn,s=new Ho(this.manager);s.setCrossOrigin(this.crossOrigin),s.setPath(this.path);let a=0;function o(n){s.load(t[n],(function(t){r.images[n]=t,a++,6===a&&(r.needsUpdate=!0,e&&e(r))}),void 0,i)}for(let e=0;e<t.length;++e)o(e);return r}}class ko extends Fo{constructor(t){super(t)}load(t,e,n,i){const r=new ut,s=new Ho(this.manager);return s.setCrossOrigin(this.crossOrigin),s.setPath(this.path),s.load(t,(function(t){r.image=t,r.needsUpdate=!0,void 0!==e&&e(r)}),n,i),r}}class Vo extends xe{constructor(t,e=1){super(),this.type="Light",this.color=new st(t),this.intensity=e}dispose(){}copy(t){return super.copy(t),this.color.copy(t.color),this.intensity=t.intensity,this}toJSON(t){const e=super.toJSON(t);return e.object.color=this.color.getHex(),e.object.intensity=this.intensity,void 0!==this.groundColor&&(e.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(e.object.distance=this.distance),void 0!==this.angle&&(e.object.angle=this.angle),void 0!==this.decay&&(e.object.decay=this.decay),void 0!==this.penumbra&&(e.object.penumbra=this.penumbra),void 0!==this.shadow&&(e.object.shadow=this.shadow.toJSON()),e}}Vo.prototype.isLight=!0;(class extends Vo{constructor(t,e,n){super(t,n),this.type="HemisphereLight",this.position.copy(xe.DefaultUp),this.updateMatrix(),this.groundColor=new st(e)}copy(t){return Vo.prototype.copy.call(this,t),this.groundColor.copy(t.groundColor),this}}).prototype.isHemisphereLight=!0;const Wo=new Yt,jo=new vt,qo=new vt;class Xo{constructor(t){this.camera=t,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new Z(512,512),this.map=null,this.mapPass=null,this.matrix=new Yt,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Ln,this._frameExtents=new Z(1,1),this._viewportCount=1,this._viewports=[new dt(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;jo.setFromMatrixPosition(t.matrixWorld),e.position.copy(jo),qo.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(qo),e.updateMatrixWorld(),Wo.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Wo),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(e.projectionMatrix),n.multiply(e.matrixWorldInverse)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(t){return this.camera=t.camera.clone(),this.bias=t.bias,this.radius=t.radius,this.mapSize.copy(t.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};return 0!==this.bias&&(t.bias=this.bias),0!==this.normalBias&&(t.normalBias=this.normalBias),1!==this.radius&&(t.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(t.mapSize=this.mapSize.toArray()),t.camera=this.camera.toJSON(!1).object,delete t.camera.matrix,t}}class Yo extends Xo{constructor(){super(new _n(50,1,.5,500)),this.focus=1}updateMatrices(t){const e=this.camera,n=2*V*t.angle*this.focus,i=this.mapSize.width/this.mapSize.height,r=t.distance||e.far;n===e.fov&&i===e.aspect&&r===e.far||(e.fov=n,e.aspect=i,e.far=r,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(t){return super.copy(t),this.focus=t.focus,this}}Yo.prototype.isSpotLightShadow=!0;(class extends Vo{constructor(t,e,n=0,i=Math.PI/3,r=0,s=1){super(t,e),this.type="SpotLight",this.position.copy(xe.DefaultUp),this.updateMatrix(),this.target=new xe,this.distance=n,this.angle=i,this.penumbra=r,this.decay=s,this.shadow=new Yo}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.angle=t.angle,this.penumbra=t.penumbra,this.decay=t.decay,this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}).prototype.isSpotLight=!0;const Zo=new Yt,Jo=new vt,Ko=new vt;class Qo extends Xo{constructor(){super(new _n(90,1,.5,500)),this._frameExtents=new Z(4,2),this._viewportCount=6,this._viewports=[new dt(2,1,1,1),new dt(0,1,1,1),new dt(3,1,1,1),new dt(1,1,1,1),new dt(3,0,1,1),new dt(1,0,1,1)],this._cubeDirections=[new vt(1,0,0),new vt(-1,0,0),new vt(0,0,1),new vt(0,0,-1),new vt(0,1,0),new vt(0,-1,0)],this._cubeUps=[new vt(0,1,0),new vt(0,1,0),new vt(0,1,0),new vt(0,1,0),new vt(0,0,1),new vt(0,0,-1)]}updateMatrices(t,e=0){const n=this.camera,i=this.matrix,r=t.distance||n.far;r!==n.far&&(n.far=r,n.updateProjectionMatrix()),Jo.setFromMatrixPosition(t.matrixWorld),n.position.copy(Jo),Ko.copy(n.position),Ko.add(this._cubeDirections[e]),n.up.copy(this._cubeUps[e]),n.lookAt(Ko),n.updateMatrixWorld(),i.makeTranslation(-Jo.x,-Jo.y,-Jo.z),Zo.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Zo)}}Qo.prototype.isPointLightShadow=!0;(class extends Vo{constructor(t,e,n=0,i=1){super(t,e),this.type="PointLight",this.distance=n,this.decay=i,this.shadow=new Qo}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.distance=t.distance,this.decay=t.decay,this.shadow=t.shadow.clone(),this}}).prototype.isPointLight=!0;class $o extends Xo{constructor(){super(new Wn(-5,5,5,-5,.5,500))}}$o.prototype.isDirectionalLightShadow=!0;(class extends Vo{constructor(t,e){super(t,e),this.type="DirectionalLight",this.position.copy(xe.DefaultUp),this.updateMatrix(),this.target=new xe,this.shadow=new $o}dispose(){this.shadow.dispose()}copy(t){return super.copy(t),this.target=t.target.clone(),this.shadow=t.shadow.clone(),this}}).prototype.isDirectionalLight=!0;(class extends Vo{constructor(t,e){super(t,e),this.type="AmbientLight"}}).prototype.isAmbientLight=!0;(class extends Vo{constructor(t,e,n=10,i=10){super(t,e),this.type="RectAreaLight",this.width=n,this.height=i}get power(){return this.intensity*this.width*this.height*Math.PI}set power(t){this.intensity=t/(this.width*this.height*Math.PI)}copy(t){return super.copy(t),this.width=t.width,this.height=t.height,this}toJSON(t){const e=super.toJSON(t);return e.object.width=this.width,e.object.height=this.height,e}}).prototype.isRectAreaLight=!0;class tl{constructor(){this.coefficients=[];for(let t=0;t<9;t++)this.coefficients.push(new vt)}set(t){for(let e=0;e<9;e++)this.coefficients[e].copy(t[e]);return this}zero(){for(let t=0;t<9;t++)this.coefficients[t].set(0,0,0);return this}getAt(t,e){const n=t.x,i=t.y,r=t.z,s=this.coefficients;return e.copy(s[0]).multiplyScalar(.282095),e.addScaledVector(s[1],.488603*i),e.addScaledVector(s[2],.488603*r),e.addScaledVector(s[3],.488603*n),e.addScaledVector(s[4],n*i*1.092548),e.addScaledVector(s[5],i*r*1.092548),e.addScaledVector(s[6],.315392*(3*r*r-1)),e.addScaledVector(s[7],n*r*1.092548),e.addScaledVector(s[8],.546274*(n*n-i*i)),e}getIrradianceAt(t,e){const n=t.x,i=t.y,r=t.z,s=this.coefficients;return e.copy(s[0]).multiplyScalar(.886227),e.addScaledVector(s[1],1.023328*i),e.addScaledVector(s[2],1.023328*r),e.addScaledVector(s[3],1.023328*n),e.addScaledVector(s[4],.858086*n*i),e.addScaledVector(s[5],.858086*i*r),e.addScaledVector(s[6],.743125*r*r-.247708),e.addScaledVector(s[7],.858086*n*r),e.addScaledVector(s[8],.429043*(n*n-i*i)),e}add(t){for(let e=0;e<9;e++)this.coefficients[e].add(t.coefficients[e]);return this}addScaledSH(t,e){for(let n=0;n<9;n++)this.coefficients[n].addScaledVector(t.coefficients[n],e);return this}scale(t){for(let e=0;e<9;e++)this.coefficients[e].multiplyScalar(t);return this}lerp(t,e){for(let n=0;n<9;n++)this.coefficients[n].lerp(t.coefficients[n],e);return this}equals(t){for(let e=0;e<9;e++)if(!this.coefficients[e].equals(t.coefficients[e]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(t,e+3*i);return this}toArray(t=[],e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(t,e+3*i);return t}static getBasisAt(t,e){const n=t.x,i=t.y,r=t.z;e[0]=.282095,e[1]=.488603*i,e[2]=.488603*r,e[3]=.488603*n,e[4]=1.092548*n*i,e[5]=1.092548*i*r,e[6]=.315392*(3*r*r-1),e[7]=1.092548*n*r,e[8]=.546274*(n*n-i*i)}}tl.prototype.isSphericalHarmonics3=!0;class el extends Vo{constructor(t=new tl,e=1){super(void 0,e),this.sh=t}copy(t){return super.copy(t),this.sh.copy(t.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(t){const e=super.toJSON(t);return e.object.sh=this.sh.toArray(),e}}el.prototype.isLightProbe=!0;let nl;(class extends Xe{constructor(){super(),this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(t){return super.copy(t),this.instanceCount=t.instanceCount,this}clone(){return(new this.constructor).copy(this)}toJSON(){const t=super.toJSON(this);return t.instanceCount=this.instanceCount,t.isInstancedBufferGeometry=!0,t}}).prototype.isInstancedBufferGeometry=!0,class extends Fo{constructor(t){super(t),"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(t){return this.options=t,this}load(t,e,n,i){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const r=this,s=No.get(t);if(void 0!==s)return r.manager.itemStart(t),setTimeout((function(){e&&e(s),r.manager.itemEnd(t)}),0),s;const a={};a.credentials="anonymous"===this.crossOrigin?"same-origin":"include",a.headers=this.requestHeader,fetch(t,a).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,Object.assign(r.options,{colorSpaceConversion:"none"}))})).then((function(n){No.add(t,n),e&&e(n),r.manager.itemEnd(t)})).catch((function(e){i&&i(e),r.manager.itemError(t),r.manager.itemEnd(t)})),r.manager.itemStart(t)}}.prototype.isImageBitmapLoader=!0;const il=function(){return void 0===nl&&(nl=new(window.AudioContext||window.webkitAudioContext)),nl};class rl extends Fo{constructor(t){super(t)}load(t,e,n,i){const r=this,s=new Bo(this.manager);s.setResponseType("arraybuffer"),s.setPath(this.path),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials),s.load(t,(function(n){try{const t=n.slice(0);il().decodeAudioData(t,(function(t){e(t)}))}catch(e){i?i(e):console.error(e),r.manager.itemError(t)}}),n,i)}}(class extends el{constructor(t,e,n=1){super(void 0,n);const i=(new st).set(t),r=(new st).set(e),s=new vt(i.r,i.g,i.b),a=new vt(r.r,r.g,r.b),o=Math.sqrt(Math.PI),l=o*Math.sqrt(.75);this.sh.coefficients[0].copy(s).add(a).multiplyScalar(o),this.sh.coefficients[1].copy(s).sub(a).multiplyScalar(l)}}).prototype.isHemisphereLightProbe=!0,class extends el{constructor(t,e=1){super(void 0,e);const n=(new st).set(t);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}}.prototype.isAmbientLightProbe=!0;class sl{constructor(t=!0){this.autoStart=t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=al(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const e=al();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}function al(){return("undefined"==typeof performance?Date:performance).now()}const ol=new vt,ll=new gt,cl=new vt,hl=new vt;class ul extends xe{constructor(){super(),this.type="AudioListener",this.context=il(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new sl}getInput(){return this.gain}removeFilter(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}updateMatrixWorld(t){super.updateMatrixWorld(t);const e=this.context.listener,n=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(ol,ll,cl),hl.set(0,0,-1).applyQuaternion(ll),e.positionX){const t=this.context.currentTime+this.timeDelta;e.positionX.linearRampToValueAtTime(ol.x,t),e.positionY.linearRampToValueAtTime(ol.y,t),e.positionZ.linearRampToValueAtTime(ol.z,t),e.forwardX.linearRampToValueAtTime(hl.x,t),e.forwardY.linearRampToValueAtTime(hl.y,t),e.forwardZ.linearRampToValueAtTime(hl.z,t),e.upX.linearRampToValueAtTime(n.x,t),e.upY.linearRampToValueAtTime(n.y,t),e.upZ.linearRampToValueAtTime(n.z,t)}else e.setPosition(ol.x,ol.y,ol.z),e.setOrientation(hl.x,hl.y,hl.z,n.x,n.y,n.z)}}class dl extends xe{constructor(t){super(),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this}play(t=0){if(!0===this.isPlaying)return void console.warn("THREE.Audio: Audio is already playing.");if(!1===this.hasPlaybackControl)return void console.warn("THREE.Audio: this Audio has no playback control.");this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();return e.buffer=this.buffer,e.loop=this.loop,e.loopStart=this.loopStart,e.loopEnd=this.loopEnd,e.onended=this.onEnded.bind(this),e.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=e,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")}stop(){if(!1!==this.hasPlaybackControl)return this._progress=0,this.source.stop(),this.source.onended=null,this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].connect(this.filters[t]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++)this.filters[t-1].disconnect(this.filters[t]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}getFilters(){return this.filters}setFilters(t){return t||(t=[]),!0===this._connected?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){if(this.detune=t,void 0!==this.source.detune)return!0===this.isPlaying&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}class pl{constructor(t,e,n){let i,r,s;switch(this.binding=t,this.valueSize=n,e){case"quaternion":i=this._slerp,r=this._slerpAdditive,s=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*n),this._workIndex=5;break;case"string":case"bool":i=this._select,r=this._select,s=this._setAdditiveIdentityOther,this.buffer=new Array(5*n);break;default:i=this._lerp,r=this._lerpAdditive,s=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*n)}this._mixBufferRegion=i,this._mixBufferRegionAdditive=r,this._setIdentity=s,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,e){const n=this.buffer,i=this.valueSize,r=t*i+i;let s=this.cumulativeWeight;if(0===s){for(let t=0;t!==i;++t)n[r+t]=n[t];s=e}else{s+=e;const t=e/s;this._mixBufferRegion(n,r,0,t,i)}this.cumulativeWeight=s}accumulateAdditive(t){const e=this.buffer,n=this.valueSize,i=n*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(e,i,0,t,n),this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,n=this.buffer,i=t*e+e,r=this.cumulativeWeight,s=this.cumulativeWeightAdditive,a=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,r<1){const t=e*this._origIndex;this._mixBufferRegion(n,i,t,1-r,e)}s>0&&this._mixBufferRegionAdditive(n,i,this._addIndex*e,1,e);for(let t=e,r=e+e;t!==r;++t)if(n[t]!==n[t+e]){a.setValue(n,i);break}}saveOriginalState(){const t=this.binding,e=this.buffer,n=this.valueSize,i=n*this._origIndex;t.getValue(e,i);for(let t=n,r=i;t!==r;++t)e[t]=e[i+t%n];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=3*this.valueSize;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let n=t;n<e;n++)this.buffer[n]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++)this.buffer[e+n]=this.buffer[t+n]}_select(t,e,n,i,r){if(i>=.5)for(let i=0;i!==r;++i)t[e+i]=t[n+i]}_slerp(t,e,n,i){gt.slerpFlat(t,e,t,e,t,n,i)}_slerpAdditive(t,e,n,i,r){const s=this._workIndex*r;gt.multiplyQuaternionsFlat(t,s,t,e,t,n),gt.slerpFlat(t,e,t,e,t,s,i)}_lerp(t,e,n,i,r){const s=1-i;for(let a=0;a!==r;++a){const r=e+a;t[r]=t[r]*s+t[n+a]*i}}_lerpAdditive(t,e,n,i,r){for(let s=0;s!==r;++s){const r=e+s;t[r]=t[r]+t[n+s]*i}}}const ml=new RegExp("[\\[\\]\\.:\\/]","g"),fl="[^\\[\\]\\.:\\/]",gl="[^"+"\\[\\]\\.:\\/".replace("\\.","")+"]",vl=/((?:WC+[\/:])*)/.source.replace("WC",fl),yl=/(WCOD+)?/.source.replace("WCOD",gl),xl=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",fl),_l=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",fl),wl=new RegExp("^"+vl+yl+xl+_l+"$"),bl=["material","materials","bones"];class Ml{constructor(t,e,n){this.path=e,this.parsedPath=n||Ml.parseTrackName(e),this.node=Ml.findNode(t,this.parsedPath.nodeName)||t,this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,e,n){return t&&t.isAnimationObjectGroup?new Ml.Composite(t,e,n):new Ml(t,e,n)}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(ml,"")}static parseTrackName(t){const e=wl.exec(t);if(null===e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);const n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},i=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==i&&-1!==i){const t=n.nodeName.substring(i+1);-1!==bl.indexOf(t)&&(n.nodeName=n.nodeName.substring(0,i),n.objectName=t)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return n}static findNode(t,e){if(void 0===e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const n=t.skeleton.getBoneByName(e);if(void 0!==n)return n}if(t.children){const n=function(t){for(let i=0;i<t.length;i++){const r=t[i];if(r.name===e||r.uuid===e)return r;const s=n(r.children);if(s)return s}return null},i=n(t.children);if(i)return i}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.targetObject[this.propertyName]}_getValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)t[e++]=n[i]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,n=e.objectName,i=e.propertyName;let r=e.propertyIndex;if(t||(t=Ml.findNode(this.rootNode,e.nodeName)||this.rootNode,this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");if(n){let i=e.objectIndex;switch(n){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(let e=0;e<t.length;e++)if(t[e].name===i){i=e;break}break;default:if(void 0===t[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[n]}if(void 0!==i){if(void 0===t[i])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[i]}}const s=t[i];if(void 0===s){const n=e.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+n+"."+i+" but it wasn't found.",t)}let a=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?a=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(a=this.Versioning.MatrixWorldNeedsUpdate);let o=this.BindingType.Direct;if(void 0!==r){if("morphTargetInfluences"===i){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!t.geometry.isBufferGeometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==t.morphTargetDictionary[r]&&(r=t.morphTargetDictionary[r])}o=this.BindingType.ArrayElement,this.resolvedProperty=s,this.propertyIndex=r}else void 0!==s.fromArray&&void 0!==s.toArray?(o=this.BindingType.HasFromToArray,this.resolvedProperty=s):Array.isArray(s)?(o=this.BindingType.EntireArray,this.resolvedProperty=s):this.propertyName=i;this.getValue=this.GetterByBindingType[o],this.setValue=this.SetterByBindingTypeAndVersioning[o][a]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Ml.Composite=class{constructor(t,e,n){const i=n||Ml.parseTrackName(e);this._targetGroup=t,this._bindings=t.subscribe_(e,i)}getValue(t,e){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];void 0!==i&&i.getValue(t,e)}setValue(t,e){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i)n[i].setValue(t,e)}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].bind()}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e)t[e].unbind()}},Ml.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Ml.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Ml.prototype.GetterByBindingType=[Ml.prototype._getValue_direct,Ml.prototype._getValue_array,Ml.prototype._getValue_arrayElement,Ml.prototype._getValue_toArray],Ml.prototype.SetterByBindingTypeAndVersioning=[[Ml.prototype._setValue_direct,Ml.prototype._setValue_direct_setNeedsUpdate,Ml.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Ml.prototype._setValue_array,Ml.prototype._setValue_array_setNeedsUpdate,Ml.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Ml.prototype._setValue_arrayElement,Ml.prototype._setValue_arrayElement_setNeedsUpdate,Ml.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Ml.prototype._setValue_fromArray,Ml.prototype._setValue_fromArray_setNeedsUpdate,Ml.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class Sl{constructor(t,e,n=null,i=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=n,this.blendMode=i;const r=e.tracks,s=r.length,a=new Array(s),o={endingStart:C,endingEnd:C};for(let t=0;t!==s;++t){const e=r[t].createInterpolant(null);a[t]=e,e.settings=o}this._interpolantSettings=o,this._interpolants=a,this._propertyBindings=new Array(s),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=2201,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){return this._startTime=t,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,n){if(t.fadeOut(e),this.fadeIn(e),n){const n=this._clip.duration,i=t._clip.duration,r=i/n,s=n/i;t.warp(1,r,e),this.warp(s,1,e)}return this}crossFadeTo(t,e,n){return t.crossFadeFrom(this,e,n)}stopFading(){const t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,n){const i=this._mixer,r=i.time,s=this.timeScale;let a=this._timeScaleInterpolant;null===a&&(a=i._lendControlInterpolant(),this._timeScaleInterpolant=a);const o=a.parameterPositions,l=a.sampleValues;return o[0]=r,o[1]=r+n,l[0]=t/s,l[1]=e/s,this}stopWarping(){const t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,n,i){if(!this.enabled)return void this._updateWeight(t);const r=this._startTime;if(null!==r){const i=(t-r)*n;if(i<0||0===n)return;this._startTime=null,e=n*i}e*=this._updateTimeScale(t);const s=this._updateTime(e),a=this._updateWeight(t);if(a>0){const t=this._interpolants,e=this._propertyBindings;if(2501===this.blendMode)for(let n=0,i=t.length;n!==i;++n)t[n].evaluate(s),e[n].accumulateAdditive(a);else for(let n=0,r=t.length;n!==r;++n)t[n].evaluate(s),e[n].accumulate(i,a)}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const n=this._weightInterpolant;if(null!==n){const i=n.evaluate(t)[0];e*=i,t>n.parameterPositions[1]&&(this.stopFading(),0===i&&(this.enabled=!1))}}return this._effectiveWeight=e,e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const n=this._timeScaleInterpolant;null!==n&&(e*=n.evaluate(t)[0],t>n.parameterPositions[1]&&(this.stopWarping(),0===e?this.paused=!0:this.timeScale=e))}return this._effectiveTimeScale=e,e}_updateTime(t){const e=this._clip.duration,n=this.loop;let i=this.time+t,r=this._loopCount;const s=2202===n;if(0===t)return-1===r?i:s&&1==(1&r)?e-i:i;if(2200===n){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(i>=e)i=e;else{if(!(i<0)){this.time=i;break t}i=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,s)):this._setEndings(0===this.repetitions,!0,s)),i>=e||i<0){const n=Math.floor(i/e);i-=e*n,r+=Math.abs(n);const a=this.repetitions-r;if(a<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,i=t>0?e:0,this.time=i,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===a){const e=t<0;this._setEndings(e,!e,s)}else this._setEndings(!1,!1,s);this._loopCount=r,this.time=i,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:n})}}else this.time=i;if(s&&1==(1&r))return e-i}return i}_setEndings(t,e,n){const i=this._interpolantSettings;n?(i.endingStart=L,i.endingEnd=L):(i.endingStart=t?this.zeroSlopeAtStart?L:C:D,i.endingEnd=e?this.zeroSlopeAtEnd?L:C:D)}_scheduleFading(t,e,n){const i=this._mixer,r=i.time;let s=this._weightInterpolant;null===s&&(s=i._lendControlInterpolant(),this._weightInterpolant=s);const a=s.parameterPositions,o=s.sampleValues;return a[0]=r,o[0]=e,a[1]=r+t,o[1]=n,this}}(class extends H{constructor(t){super(),this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(t,e){const n=t._localRoot||this._root,i=t._clip.tracks,r=i.length,s=t._propertyBindings,a=t._interpolants,o=n.uuid,l=this._bindingsByRootAndName;let c=l[o];void 0===c&&(c={},l[o]=c);for(let t=0;t!==r;++t){const r=i[t],l=r.name;let h=c[l];if(void 0!==h)++h.referenceCount,s[t]=h;else{if(h=s[t],void 0!==h){null===h._cacheIndex&&(++h.referenceCount,this._addInactiveBinding(h,o,l));continue}const i=e&&e._propertyBindings[t].binding.parsedPath;h=new pl(Ml.create(n,l,i),r.ValueTypeName,r.getValueSize()),++h.referenceCount,this._addInactiveBinding(h,o,l),s[t]=h}a[t].resultBuffer=h.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){const e=(t._localRoot||this._root).uuid,n=t._clip.uuid,i=this._actionsByClip[n];this._bindAction(t,i&&i.knownActions[0]),this._addInactiveAction(t,n,e)}const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==n.useCount++&&(this._lendBinding(n),n.saveOriginalState())}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==--n.useCount&&(n.restoreOriginalState(),this._takeBackBinding(n))}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return null!==e&&e<this._nActiveActions}_addInactiveAction(t,e,n){const i=this._actions,r=this._actionsByClip;let s=r[e];if(void 0===s)s={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,r[e]=s;else{const e=s.knownActions;t._byClipCacheIndex=e.length,e.push(t)}t._cacheIndex=i.length,i.push(t),s.actionByRoot[n]=t}_removeInactiveAction(t){const e=this._actions,n=e[e.length-1],i=t._cacheIndex;n._cacheIndex=i,e[i]=n,e.pop(),t._cacheIndex=null;const r=t._clip.uuid,s=this._actionsByClip,a=s[r],o=a.knownActions,l=o[o.length-1],c=t._byClipCacheIndex;l._byClipCacheIndex=c,o[c]=l,o.pop(),t._byClipCacheIndex=null,delete a.actionByRoot[(t._localRoot||this._root).uuid],0===o.length&&delete s[r],this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];0==--n.referenceCount&&this._removeInactiveBinding(n)}}_lendAction(t){const e=this._actions,n=t._cacheIndex,i=this._nActiveActions++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_takeBackAction(t){const e=this._actions,n=t._cacheIndex,i=--this._nActiveActions,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_addInactiveBinding(t,e,n){const i=this._bindingsByRootAndName,r=this._bindings;let s=i[e];void 0===s&&(s={},i[e]=s),s[n]=t,t._cacheIndex=r.length,r.push(t)}_removeInactiveBinding(t){const e=this._bindings,n=t.binding,i=n.rootNode.uuid,r=n.path,s=this._bindingsByRootAndName,a=s[i],o=e[e.length-1],l=t._cacheIndex;o._cacheIndex=l,e[l]=o,e.pop(),delete a[r],0===Object.keys(a).length&&delete s[i]}_lendBinding(t){const e=this._bindings,n=t._cacheIndex,i=this._nActiveBindings++,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_takeBackBinding(t){const e=this._bindings,n=t._cacheIndex,i=--this._nActiveBindings,r=e[i];t._cacheIndex=i,e[i]=t,r._cacheIndex=n,e[n]=r}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let n=t[e];return void 0===n&&(n=new Mo(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer),n.__cacheIndex=e,t[e]=n),n}_takeBackControlInterpolant(t){const e=this._controlInterpolants,n=t.__cacheIndex,i=--this._nActiveControlInterpolants,r=e[i];t.__cacheIndex=i,e[i]=t,r.__cacheIndex=n,e[n]=r}clipAction(t,e,n){const i=e||this._root,r=i.uuid;let s="string"==typeof t?Io.findByName(i,t):t;const a=null!==s?s.uuid:t,o=this._actionsByClip[a];let l=null;if(void 0===n&&(n=null!==s?s.blendMode:2500),void 0!==o){const t=o.actionByRoot[r];if(void 0!==t&&t.blendMode===n)return t;l=o.knownActions[0],null===s&&(s=l._clip)}if(null===s)return null;const c=new Sl(this,s,e,n);return this._bindAction(c,l),this._addInactiveAction(c,a,r),c}existingAction(t,e){const n=e||this._root,i=n.uuid,r="string"==typeof t?Io.findByName(n,t):t,s=r?r.uuid:t,a=this._actionsByClip[s];return void 0!==a&&a.actionByRoot[i]||null}stopAllAction(){const t=this._actions;for(let e=this._nActiveActions-1;e>=0;--e)t[e].stop();return this}update(t){t*=this.timeScale;const e=this._actions,n=this._nActiveActions,i=this.time+=t,r=Math.sign(t),s=this._accuIndex^=1;for(let a=0;a!==n;++a)e[a]._update(i,t,r,s);const a=this._bindings,o=this._nActiveBindings;for(let t=0;t!==o;++t)a[t].apply(s);return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++)this._actions[t].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,n=t.uuid,i=this._actionsByClip,r=i[n];if(void 0!==r){const t=r.knownActions;for(let n=0,i=t.length;n!==i;++n){const i=t[n];this._deactivateAction(i);const r=i._cacheIndex,s=e[e.length-1];i._cacheIndex=null,i._byClipCacheIndex=null,s._cacheIndex=r,e[r]=s,e.pop(),this._removeInactiveBindingsForAction(i)}delete i[n]}}uncacheRoot(t){const e=t.uuid,n=this._actionsByClip;for(const t in n){const i=n[t].actionByRoot[e];void 0!==i&&(this._deactivateAction(i),this._removeInactiveAction(i))}const i=this._bindingsByRootAndName[e];if(void 0!==i)for(const t in i){const e=i[t];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(t,e){const n=this.existingAction(t,e);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}).prototype._controlInterpolantsResultBuffer=new Float32Array(1);class Tl{constructor(t){"string"==typeof t&&(console.warn("THREE.Uniform: Type parameter is no longer needed."),t=arguments[1]),this.value=t}clone(){return new Tl(void 0===this.value.clone?this.value:this.value.clone())}}(class extends ps{constructor(t,e,n=1){super(t,e),this.meshPerAttribute=n}copy(t){return super.copy(t),this.meshPerAttribute=t.meshPerAttribute,this}clone(t){const e=super.clone(t);return e.meshPerAttribute=this.meshPerAttribute,e}toJSON(t){const e=super.toJSON(t);return e.isInstancedInterleavedBuffer=!0,e.meshPerAttribute=this.meshPerAttribute,e}}).prototype.isInstancedInterleavedBuffer=!0;class El{constructor(t,e,n=0,i=1/0){this.ray=new Xt(t,e),this.near=n,this.far=i,this.camera=null,this.layers=new se,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,e){this.ray.set(t,e)}setFromCamera(t,e){e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error("THREE.Raycaster: Unsupported camera type: "+e.type)}intersectObject(t,e=!0,n=[]){return Pl(t,this,n,e),n.sort(Al),n}intersectObjects(t,e=!0,n=[]){for(let i=0,r=t.length;i<r;i++)Pl(t[i],this,n,e);return n.sort(Al),n}}function Al(t,e){return t.distance-e.distance}function Pl(t,e,n,i){if(t.layers.test(e.layers)&&t.raycast(e,n),!0===i){const i=t.children;for(let t=0,r=i.length;t<r;t++)Pl(i[t],e,n,!0)}}class Rl{constructor(t=1,e=0,n=0){return this.radius=t,this.phi=e,this.theta=n,this}set(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){const t=1e-6;return this.phi=Math.max(t,Math.min(Math.PI-t,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(j(e/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}}const Cl=new Z;class Ll{constructor(t=new Z(1/0,1/0),e=new Z(-1/0,-1/0)){this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const n=Cl.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(t){return this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}containsPoint(t){return!(t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y)}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(t){return!(t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y)}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return Cl.copy(t).clamp(this.min,this.max).sub(t).length()}intersect(t){return this.min.max(t.min),this.max.min(t.max),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}Ll.prototype.isBox2=!0;const Dl=new vt,Il=new Yt,zl=new Yt;function Nl(t){const e=[];!0===t.isBone&&e.push(t);for(let n=0;n<t.children.length;n++)e.push.apply(e,Nl(t.children[n]));return e}const Ol=new Float32Array(1);function Fl(t){const e=document.createElement("style");e.textContent=t,document.head.append(e)}new Int32Array(Ol.buffer),la.create=function(t,e){return console.log("THREE.Curve.create() has been deprecated"),t.prototype=Object.create(la.prototype),t.prototype.constructor=t,t.prototype.getPoint=e,t},Pa.prototype.fromPoints=function(t){return console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints()."),this.setFromPoints(t)},class extends Ks{constructor(t=10,e=10,n=4473924,i=8947848){n=new st(n),i=new st(i);const r=e/2,s=t/e,a=t/2,o=[],l=[];for(let t=0,c=0,h=-a;t<=e;t++,h+=s){o.push(-a,0,h,a,0,h),o.push(h,0,-a,h,0,a);const e=t===r?n:i;e.toArray(l,c),c+=3,e.toArray(l,c),c+=3,e.toArray(l,c),c+=3,e.toArray(l,c),c+=3}const c=new Xe;c.setAttribute("position",new Be(o,3)),c.setAttribute("color",new Be(l,3)),super(c,new ks({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}}.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")},class extends Ks{constructor(t){const e=Nl(t),n=new Xe,i=[],r=[],s=new st(0,0,1),a=new st(0,1,0);for(let t=0;t<e.length;t++){const n=e[t];n.parent&&n.parent.isBone&&(i.push(0,0,0),i.push(0,0,0),r.push(s.r,s.g,s.b),r.push(a.r,a.g,a.b))}n.setAttribute("position",new Be(i,3)),n.setAttribute("color",new Be(r,3)),super(n,new ks({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.type="SkeletonHelper",this.isSkeletonHelper=!0,this.root=t,this.bones=e,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,n=this.geometry,i=n.getAttribute("position");zl.copy(this.root.matrixWorld).invert();for(let t=0,n=0;t<e.length;t++){const r=e[t];r.parent&&r.parent.isBone&&(Il.multiplyMatrices(zl,r.matrixWorld),Dl.setFromMatrixPosition(Il),i.setXYZ(n,Dl.x,Dl.y,Dl.z),Il.multiplyMatrices(zl,r.parent.matrixWorld),Dl.setFromMatrixPosition(Il),i.setXYZ(n+1,Dl.x,Dl.y,Dl.z),n+=2)}n.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(t)}}.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")},Fo.prototype.extractUrlBase=function(t){return console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead."),class{static decodeText(t){if("undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);let e="";for(let n=0,i=t.length;n<i;n++)e+=String.fromCharCode(t[n]);try{return decodeURIComponent(escape(e))}catch(t){return e}}static extractUrlBase(t){const e=t.lastIndexOf("/");return-1===e?"./":t.slice(0,e+1)}static resolveURL(t,e){return"string"!=typeof t||""===t?"":(/^https?:\/\//i.test(e)&&/^\//.test(t)&&(e=e.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(t)||/^data:.*,.*$/i.test(t)||/^blob:.*$/i.test(t)?t:e+t)}}.extractUrlBase(t)},Fo.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}},Ll.prototype.center=function(t){return console.warn("THREE.Box2: .center() has been renamed to .getCenter()."),this.getCenter(t)},Ll.prototype.empty=function(){return console.warn("THREE.Box2: .empty() has been renamed to .isEmpty()."),this.isEmpty()},Ll.prototype.isIntersectionBox=function(t){return console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},Ll.prototype.size=function(t){return console.warn("THREE.Box2: .size() has been renamed to .getSize()."),this.getSize(t)},_t.prototype.center=function(t){return console.warn("THREE.Box3: .center() has been renamed to .getCenter()."),this.getCenter(t)},_t.prototype.empty=function(){return console.warn("THREE.Box3: .empty() has been renamed to .isEmpty()."),this.isEmpty()},_t.prototype.isIntersectionBox=function(t){return console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},_t.prototype.isIntersectionSphere=function(t){return console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},_t.prototype.size=function(t){return console.warn("THREE.Box3: .size() has been renamed to .getSize()."),this.getSize(t)},re.prototype.toVector3=function(){console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead")},Bt.prototype.empty=function(){return console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty()."),this.isEmpty()},Ln.prototype.setFromMatrix=function(t){return console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix()."),this.setFromProjectionMatrix(t)},J.prototype.flattenToArrayOffset=function(t,e){return console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},J.prototype.multiplyVector3=function(t){return console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},J.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")},J.prototype.applyToBufferAttribute=function(t){return console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead."),t.applyMatrix3(this)},J.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")},J.prototype.getInverse=function(t){return console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(t).invert()},Yt.prototype.extractPosition=function(t){return console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition()."),this.copyPosition(t)},Yt.prototype.flattenToArrayOffset=function(t,e){return console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead."),this.toArray(t,e)},Yt.prototype.getPosition=function(){return console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead."),(new vt).setFromMatrixColumn(this,3)},Yt.prototype.setRotationFromQuaternion=function(t){return console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion()."),this.makeRotationFromQuaternion(t)},Yt.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")},Yt.prototype.multiplyVector3=function(t){return console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Yt.prototype.multiplyVector4=function(t){return console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Yt.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")},Yt.prototype.rotateAxis=function(t){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead."),t.transformDirection(this)},Yt.prototype.crossVector=function(t){return console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Yt.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")},Yt.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")},Yt.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")},Yt.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")},Yt.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")},Yt.prototype.applyToBufferAttribute=function(t){return console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead."),t.applyMatrix4(this)},Yt.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")},Yt.prototype.makeFrustum=function(t,e,n,i,r,s){return console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead."),this.makePerspective(t,e,i,n,r,s)},Yt.prototype.getInverse=function(t){return console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead."),this.copy(t).invert()},Pn.prototype.isIntersectionLine=function(t){return console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine()."),this.intersectsLine(t)},gt.prototype.multiplyVector3=function(t){return console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead."),t.applyQuaternion(this)},gt.prototype.inverse=function(){return console.warn("THREE.Quaternion: .inverse() has been renamed to invert()."),this.invert()},Xt.prototype.isIntersectionBox=function(t){return console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox()."),this.intersectsBox(t)},Xt.prototype.isIntersectionPlane=function(t){return console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane()."),this.intersectsPlane(t)},Xt.prototype.isIntersectionSphere=function(t){return console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere()."),this.intersectsSphere(t)},Ce.prototype.area=function(){return console.warn("THREE.Triangle: .area() has been renamed to .getArea()."),this.getArea()},Ce.prototype.barycoordFromPoint=function(t,e){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),this.getBarycoord(t,e)},Ce.prototype.midpoint=function(t){return console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint()."),this.getMidpoint(t)},Ce.prototypenormal=function(t){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),this.getNormal(t)},Ce.prototype.plane=function(t){return console.warn("THREE.Triangle: .plane() has been renamed to .getPlane()."),this.getPlane(t)},Ce.barycoordFromPoint=function(t,e,n,i,r){return console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord()."),Ce.getBarycoord(t,e,n,i,r)},Ce.normal=function(t,e,n,i){return console.warn("THREE.Triangle: .normal() has been renamed to .getNormal()."),Ce.getNormal(t,e,n,i)},Ra.prototype.extractAllPoints=function(t){return console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead."),this.extractPoints(t)},Ra.prototype.extrude=function(t){return console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead."),new io(this,t)},Ra.prototype.makeGeometry=function(t){return console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead."),new ao(this,t)},Z.prototype.fromAttribute=function(t,e,n){return console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},Z.prototype.distanceToManhattan=function(t){return console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},Z.prototype.lengthManhattan=function(){return console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},vt.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")},vt.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")},vt.prototype.getPositionFromMatrix=function(t){return console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition()."),this.setFromMatrixPosition(t)},vt.prototype.getScaleFromMatrix=function(t){return console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale()."),this.setFromMatrixScale(t)},vt.prototype.getColumnFromMatrix=function(t,e){return console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn()."),this.setFromMatrixColumn(e,t)},vt.prototype.applyProjection=function(t){return console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead."),this.applyMatrix4(t)},vt.prototype.fromAttribute=function(t,e,n){return console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},vt.prototype.distanceToManhattan=function(t){return console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo()."),this.manhattanDistanceTo(t)},vt.prototype.lengthManhattan=function(){return console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},dt.prototype.fromAttribute=function(t,e,n){return console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute()."),this.fromBufferAttribute(t,e,n)},dt.prototype.lengthManhattan=function(){return console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength()."),this.manhattanLength()},xe.prototype.getChildByName=function(t){return console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName()."),this.getObjectByName(t)},xe.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")},xe.prototype.translate=function(t,e){return console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead."),this.translateOnAxis(e,t)},xe.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")},xe.prototype.applyMatrix=function(t){return console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)},Object.defineProperties(xe.prototype,{eulerOrder:{get:function(){return console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order},set:function(t){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order."),this.rotation.order=t}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}}),dn.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")},Object.defineProperties(dn.prototype,{drawMode:{get:function(){return console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode."),0},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}}),Os.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")},_n.prototype.setLens=function(t,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup."),void 0!==e&&(this.filmGauge=e),this.setFocalLength(t)},Object.defineProperties(Vo.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(t){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov."),this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left."),this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right."),this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top."),this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom."),this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near."),this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far."),this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(t){console.warn("THREE.Light: .shadowBias is now .shadow.bias."),this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(t){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width."),this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height."),this.shadow.mapSize.height=t}}}),Object.defineProperties(Oe.prototype,{length:{get:function(){return console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead."),this.array.length}},dynamic:{get:function(){return console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.usage===F},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead."),this.setUsage(F)}}}),Oe.prototype.setDynamic=function(t){return console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?F:O),this},Oe.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},Oe.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},Xe.prototype.addIndex=function(t){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex()."),this.setIndex(t)},Xe.prototype.addAttribute=function(t,e){return console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute()."),e&&e.isBufferAttribute||e&&e.isInterleavedBufferAttribute?"index"===t?(console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute."),this.setIndex(e),this):this.setAttribute(t,e):(console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute )."),this.setAttribute(t,new Oe(arguments[1],arguments[2])))},Xe.prototype.addDrawCall=function(t,e,n){void 0!==n&&console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset."),console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup()."),this.addGroup(t,e)},Xe.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups()."),this.clearGroups()},Xe.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")},Xe.prototype.removeAttribute=function(t){return console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute()."),this.deleteAttribute(t)},Xe.prototype.applyMatrix=function(t){return console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(t)},Object.defineProperties(Xe.prototype,{drawcalls:{get:function(){return console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups."),this.groups}},offsets:{get:function(){return console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups."),this.groups}}}),ps.prototype.setDynamic=function(t){return console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead."),this.setUsage(!0===t?F:O),this},ps.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")},io.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")},io.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")},io.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")},ds.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")},Tl.prototype.onUpdate=function(){return console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead."),this},Object.defineProperties(De.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){return console.warn("THREE.Material: .wrapRGB has been removed."),new st}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead."),this.flatShading=1===t}},stencilMask:{get:function(){return console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask},set:function(t){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead."),this.stencilFuncMask=t}},vertexTangents:{get:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")},set:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")}}}),Object.defineProperties(yn.prototype,{derivatives:{get:function(){return console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives},set:function(t){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives."),this.extensions.derivatives=t}}}),cs.prototype.clearTarget=function(t,e,n,i){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead."),this.setRenderTarget(t),this.clear(e,n,i)},cs.prototype.animate=function(t){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop()."),this.setAnimationLoop(t)},cs.prototype.getCurrentRenderTarget=function(){return console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget()."),this.getRenderTarget()},cs.prototype.getMaxAnisotropy=function(){return console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy()."),this.capabilities.getMaxAnisotropy()},cs.prototype.getPrecision=function(){return console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision."),this.capabilities.precision},cs.prototype.resetGLState=function(){return console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset()."),this.state.reset()},cs.prototype.supportsFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."),this.extensions.get("OES_texture_float")},cs.prototype.supportsHalfFloatTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."),this.extensions.get("OES_texture_half_float")},cs.prototype.supportsStandardDerivatives=function(){return console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."),this.extensions.get("OES_standard_derivatives")},cs.prototype.supportsCompressedTextureS3TC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."),this.extensions.get("WEBGL_compressed_texture_s3tc")},cs.prototype.supportsCompressedTexturePVRTC=function(){return console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."),this.extensions.get("WEBGL_compressed_texture_pvrtc")},cs.prototype.supportsBlendMinMax=function(){return console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."),this.extensions.get("EXT_blend_minmax")},cs.prototype.supportsVertexTextures=function(){return console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures."),this.capabilities.vertexTextures},cs.prototype.supportsInstancedArrays=function(){return console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."),this.extensions.get("ANGLE_instanced_arrays")},cs.prototype.enableScissorTest=function(t){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest()."),this.setScissorTest(t)},cs.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")},cs.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")},cs.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")},cs.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")},cs.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")},cs.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")},cs.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")},cs.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")},cs.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")},cs.prototype.getActiveMipMapLevel=function(){return console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel()."),this.getActiveMipmapLevel()},Object.defineProperties(cs.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled."),this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type."),this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){return console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead."),this.getContext()}},vr:{get:function(){return console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr"),this.xr}},gammaInput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead."),!1},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),!1},set:function(t){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead."),this.outputEncoding=!0===t?z:I}},toneMappingWhitePoint:{get:function(){return console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed."),1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}},gammaFactor:{get:function(){return console.warn("THREE.WebGLRenderer: .gammaFactor has been removed."),2},set:function(){console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.")}}}),Object.defineProperties(Qr.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}}),Object.defineProperties(pt.prototype,{wrapS:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS."),this.texture.wrapS=t}},wrapT:{get:function(){return console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT."),this.texture.wrapT=t}},magFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter."),this.texture.magFilter=t}},minFilter:{get:function(){return console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter."),this.texture.minFilter=t}},anisotropy:{get:function(){return console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy},set:function(t){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy."),this.texture.anisotropy=t}},offset:{get:function(){return console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset},set:function(t){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset."),this.texture.offset=t}},repeat:{get:function(){return console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat},set:function(t){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat."),this.texture.repeat=t}},format:{get:function(){return console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format},set:function(t){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format."),this.texture.format=t}},type:{get:function(){return console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type},set:function(t){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type."),this.texture.type=t}},generateMipmaps:{get:function(){return console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps},set:function(t){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps."),this.texture.generateMipmaps=t}}}),dl.prototype.load=function(t){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const e=this;return(new rl).load(t,(function(t){e.setBuffer(t)})),this},bn.prototype.updateCubeMap=function(t,e){return console.warn("THREE.CubeCamera: .updateCubeMap() is now .update()."),this.update(t,e)},bn.prototype.clear=function(t,e,n,i){return console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear()."),this.renderTarget.clear(t,e,n,i)},ot.crossOrigin=void 0,ot.loadTexture=function(t,e,n,i){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const r=new ko;r.setCrossOrigin(this.crossOrigin);const s=r.load(t,n,void 0,i);return e&&(s.mapping=e),s},ot.loadTextureCube=function(t,e,n,i){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const r=new Go;r.setCrossOrigin(this.crossOrigin);const s=r.load(t,n,void 0,i);return e&&(s.mapping=e),s},ot.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")},ot.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"138"}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__="138");var Ul={update:null,begin:null,loopBegin:null,changeBegin:null,change:null,changeComplete:null,loopComplete:null,complete:null,loop:1,direction:"normal",autoplay:!0,timelineOffset:0},Bl={duration:1e3,delay:0,endDelay:0,easing:"easeOutElastic(1, .5)",round:0},Hl=["translateX","translateY","translateZ","rotate","rotateX","rotateY","rotateZ","scale","scaleX","scaleY","scaleZ","skew","skewX","skewY","perspective","matrix","matrix3d"],Gl={CSS:{},springs:{}};function kl(t,e,n){return Math.min(Math.max(t,e),n)}function Vl(t,e){return t.indexOf(e)>-1}function Wl(t,e){return t.apply(null,e)}var jl={arr:function(t){return Array.isArray(t)},obj:function(t){return Vl(Object.prototype.toString.call(t),"Object")},pth:function(t){return jl.obj(t)&&t.hasOwnProperty("totalLength")},svg:function(t){return t instanceof SVGElement},inp:function(t){return t instanceof HTMLInputElement},dom:function(t){return t.nodeType||jl.svg(t)},str:function(t){return"string"==typeof t},fnc:function(t){return"function"==typeof t},und:function(t){return void 0===t},nil:function(t){return jl.und(t)||null===t},hex:function(t){return/(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(t)},rgb:function(t){return/^rgb/.test(t)},hsl:function(t){return/^hsl/.test(t)},col:function(t){return jl.hex(t)||jl.rgb(t)||jl.hsl(t)},key:function(t){return!Ul.hasOwnProperty(t)&&!Bl.hasOwnProperty(t)&&"targets"!==t&&"keyframes"!==t}};function ql(t){var e=/\(([^)]+)\)/.exec(t);return e?e[1].split(",").map((function(t){return parseFloat(t)})):[]}function Xl(t,e){var n=ql(t),i=kl(jl.und(n[0])?1:n[0],.1,100),r=kl(jl.und(n[1])?100:n[1],.1,100),s=kl(jl.und(n[2])?10:n[2],.1,100),a=kl(jl.und(n[3])?0:n[3],.1,100),o=Math.sqrt(r/i),l=s/(2*Math.sqrt(r*i)),c=l<1?o*Math.sqrt(1-l*l):0,h=l<1?(l*o-a)/c:-a+o;function u(t){var n=e?e*t/1e3:t;return n=l<1?Math.exp(-n*l*o)*(1*Math.cos(c*n)+h*Math.sin(c*n)):(1+h*n)*Math.exp(-n*o),0===t||1===t?t:1-n}return e?u:function(){var e=Gl.springs[t];if(e)return e;for(var n=1/6,i=0,r=0;;)if(1===u(i+=n)){if(++r>=16)break}else r=0;var s=i*n*1e3;return Gl.springs[t]=s,s}}function Yl(t){return void 0===t&&(t=10),function(e){return Math.ceil(kl(e,1e-6,1)*t)*(1/t)}}var Zl,Jl,Kl=function(){var t=.1;function e(t,e){return 1-3*e+3*t}function n(t,e){return 3*e-6*t}function i(t){return 3*t}function r(t,r,s){return((e(r,s)*t+n(r,s))*t+i(r))*t}function s(t,r,s){return 3*e(r,s)*t*t+2*n(r,s)*t+i(r)}return function(e,n,i,a){if(0<=e&&e<=1&&0<=i&&i<=1){var o=new Float32Array(11);if(e!==n||i!==a)for(var l=0;l<11;++l)o[l]=r(l*t,e,i);return function(l){return e===n&&i===a||0===l||1===l?l:r(function(n){for(var a=0,l=1;10!==l&&o[l]<=n;++l)a+=t;--l;var c=a+(n-o[l])/(o[l+1]-o[l])*t,h=s(c,e,i);return h>=.001?function(t,e,n,i){for(var a=0;a<4;++a){var o=s(e,n,i);if(0===o)return e;e-=(r(e,n,i)-t)/o}return e}(n,c,e,i):0===h?c:function(t,e,n,i,s){var a,o,l=0;do{(a=r(o=e+(n-e)/2,i,s)-t)>0?n=o:e=o}while(Math.abs(a)>1e-7&&++l<10);return o}(n,a,a+t,e,i)}(l),n,a)}}}}(),Ql=(Zl={linear:function(){return function(t){return t}}},Jl={Sine:function(){return function(t){return 1-Math.cos(t*Math.PI/2)}},Circ:function(){return function(t){return 1-Math.sqrt(1-t*t)}},Back:function(){return function(t){return t*t*(3*t-2)}},Bounce:function(){return function(t){for(var e,n=4;t<((e=Math.pow(2,--n))-1)/11;);return 1/Math.pow(4,3-n)-7.5625*Math.pow((3*e-2)/22-t,2)}},Elastic:function(t,e){void 0===t&&(t=1),void 0===e&&(e=.5);var n=kl(t,1,10),i=kl(e,.1,2);return function(t){return 0===t||1===t?t:-n*Math.pow(2,10*(t-1))*Math.sin((t-1-i/(2*Math.PI)*Math.asin(1/n))*(2*Math.PI)/i)}}},["Quad","Cubic","Quart","Quint","Expo"].forEach((function(t,e){Jl[t]=function(){return function(t){return Math.pow(t,e+2)}}})),Object.keys(Jl).forEach((function(t){var e=Jl[t];Zl["easeIn"+t]=e,Zl["easeOut"+t]=function(t,n){return function(i){return 1-e(t,n)(1-i)}},Zl["easeInOut"+t]=function(t,n){return function(i){return i<.5?e(t,n)(2*i)/2:1-e(t,n)(-2*i+2)/2}},Zl["easeOutIn"+t]=function(t,n){return function(i){return i<.5?(1-e(t,n)(1-2*i))/2:(e(t,n)(2*i-1)+1)/2}}})),Zl);function $l(t,e){if(jl.fnc(t))return t;var n=t.split("(")[0],i=Ql[n],r=ql(t);switch(n){case"spring":return Xl(t,e);case"cubicBezier":return Wl(Kl,r);case"steps":return Wl(Yl,r);default:return Wl(i,r)}}function tc(t){try{return document.querySelectorAll(t)}catch(t){return}}function ec(t,e){for(var n=t.length,i=arguments.length>=2?arguments[1]:void 0,r=[],s=0;s<n;s++)if(s in t){var a=t[s];e.call(i,a,s,t)&&r.push(a)}return r}function nc(t){return t.reduce((function(t,e){return t.concat(jl.arr(e)?nc(e):e)}),[])}function ic(t){return jl.arr(t)?t:(jl.str(t)&&(t=tc(t)||t),t instanceof NodeList||t instanceof HTMLCollection?[].slice.call(t):[t])}function rc(t,e){return t.some((function(t){return t===e}))}function sc(t){var e={};for(var n in t)e[n]=t[n];return e}function ac(t,e){var n=sc(t);for(var i in t)n[i]=e.hasOwnProperty(i)?e[i]:t[i];return n}function oc(t,e){var n=sc(t);for(var i in e)n[i]=jl.und(t[i])?e[i]:t[i];return n}function lc(t){var e=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?(%|px|pt|em|rem|in|cm|mm|ex|ch|pc|vw|vh|vmin|vmax|deg|rad|turn)?$/.exec(t);if(e)return e[1]}function cc(t,e){return jl.fnc(t)?t(e.target,e.id,e.total):t}function hc(t,e){return t.getAttribute(e)}function uc(t,e,n){if(rc([n,"deg","rad","turn"],lc(e)))return e;var i=Gl.CSS[e+n];if(!jl.und(i))return i;var r=document.createElement(t.tagName),s=t.parentNode&&t.parentNode!==document?t.parentNode:document.body;s.appendChild(r),r.style.position="absolute",r.style.width=100+n;var a=100/r.offsetWidth;s.removeChild(r);var o=a*parseFloat(e);return Gl.CSS[e+n]=o,o}function dc(t,e,n){if(e in t.style){var i=e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),r=t.style[e]||getComputedStyle(t).getPropertyValue(i)||"0";return n?uc(t,r,n):r}}function pc(t,e){return jl.dom(t)&&!jl.inp(t)&&(!jl.nil(hc(t,e))||jl.svg(t)&&t[e])?"attribute":jl.dom(t)&&rc(Hl,e)?"transform":jl.dom(t)&&"transform"!==e&&dc(t,e)?"css":null!=t[e]?"object":void 0}function mc(t){if(jl.dom(t)){for(var e,n=t.style.transform||"",i=/(\w+)\(([^)]*)\)/g,r=new Map;e=i.exec(n);)r.set(e[1],e[2]);return r}}function fc(t,e,n,i){switch(pc(t,e)){case"transform":return function(t,e,n,i){var r=Vl(e,"scale")?1:0+function(t){return Vl(t,"translate")||"perspective"===t?"px":Vl(t,"rotate")||Vl(t,"skew")?"deg":void 0}(e),s=mc(t).get(e)||r;return n&&(n.transforms.list.set(e,s),n.transforms.last=e),i?uc(t,s,i):s}(t,e,i,n);case"css":return dc(t,e,n);case"attribute":return hc(t,e);default:return t[e]||0}}function gc(t,e){var n=/^(\*=|\+=|-=)/.exec(t);if(!n)return t;var i=lc(t)||0,r=parseFloat(e),s=parseFloat(t.replace(n[0],""));switch(n[0][0]){case"+":return r+s+i;case"-":return r-s+i;case"*":return r*s+i}}function vc(t,e){if(jl.col(t))return function(t){return jl.rgb(t)?(n=/rgb\((\d+,\s*[\d]+,\s*[\d]+)\)/g.exec(e=t))?"rgba("+n[1]+",1)":e:jl.hex(t)?function(t){var e=t.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i,(function(t,e,n,i){return e+e+n+n+i+i})),n=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return"rgba("+parseInt(n[1],16)+","+parseInt(n[2],16)+","+parseInt(n[3],16)+",1)"}(t):jl.hsl(t)?function(t){var e,n,i,r=/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(t)||/hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*([\d.]+)\)/g.exec(t),s=parseInt(r[1],10)/360,a=parseInt(r[2],10)/100,o=parseInt(r[3],10)/100,l=r[4]||1;function c(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+6*(e-t)*n:n<.5?e:n<2/3?t+(e-t)*(2/3-n)*6:t}if(0==a)e=n=i=o;else{var h=o<.5?o*(1+a):o+a-o*a,u=2*o-h;e=c(u,h,s+1/3),n=c(u,h,s),i=c(u,h,s-1/3)}return"rgba("+255*e+","+255*n+","+255*i+","+l+")"}(t):void 0;var e,n}(t);if(/\s/g.test(t))return t;var n=lc(t),i=n?t.substr(0,t.length-n.length):t;return e?i+e:i}function yc(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function xc(t){for(var e,n=t.points,i=0,r=0;r<n.numberOfItems;r++){var s=n.getItem(r);r>0&&(i+=yc(e,s)),e=s}return i}function _c(t){if(t.getTotalLength)return t.getTotalLength();switch(t.tagName.toLowerCase()){case"circle":return function(t){return 2*Math.PI*hc(t,"r")}(t);case"rect":return function(t){return 2*hc(t,"width")+2*hc(t,"height")}(t);case"line":return function(t){return yc({x:hc(t,"x1"),y:hc(t,"y1")},{x:hc(t,"x2"),y:hc(t,"y2")})}(t);case"polyline":return xc(t);case"polygon":return function(t){var e=t.points;return xc(t)+yc(e.getItem(e.numberOfItems-1),e.getItem(0))}(t)}}function wc(t,e){var n=e||{},i=n.el||function(t){for(var e=t.parentNode;jl.svg(e)&&jl.svg(e.parentNode);)e=e.parentNode;return e}(t),r=i.getBoundingClientRect(),s=hc(i,"viewBox"),a=r.width,o=r.height,l=n.viewBox||(s?s.split(" "):[0,0,a,o]);return{el:i,viewBox:l,x:l[0]/1,y:l[1]/1,w:a,h:o,vW:l[2],vH:l[3]}}function bc(t,e,n){function i(n){void 0===n&&(n=0);var i=e+n>=1?e+n:0;return t.el.getPointAtLength(i)}var r=wc(t.el,t.svg),s=i(),a=i(-1),o=i(1),l=n?1:r.w/r.vW,c=n?1:r.h/r.vH;switch(t.property){case"x":return(s.x-r.x)*l;case"y":return(s.y-r.y)*c;case"angle":return 180*Math.atan2(o.y-a.y,o.x-a.x)/Math.PI}}function Mc(t,e){var n=/[+-]?\d*\.?\d+(?:\.\d+)?(?:[eE][+-]?\d+)?/g,i=vc(jl.pth(t)?t.totalLength:t,e)+"";return{original:i,numbers:i.match(n)?i.match(n).map(Number):[0],strings:jl.str(t)||e?i.split(n):[]}}function Sc(t){return ec(t?nc(jl.arr(t)?t.map(ic):ic(t)):[],(function(t,e,n){return n.indexOf(t)===e}))}function Tc(t){var e=Sc(t);return e.map((function(t,n){return{target:t,id:n,total:e.length,transforms:{list:mc(t)}}}))}function Ec(t,e){var n=sc(e);if(/^spring/.test(n.easing)&&(n.duration=Xl(n.easing)),jl.arr(t)){var i=t.length;2!==i||jl.obj(t[0])?jl.fnc(e.duration)||(n.duration=e.duration/i):t={value:t}}var r=jl.arr(t)?t:[t];return r.map((function(t,n){var i=jl.obj(t)&&!jl.pth(t)?t:{value:t};return jl.und(i.delay)&&(i.delay=n?0:e.delay),jl.und(i.endDelay)&&(i.endDelay=n===r.length-1?e.endDelay:0),i})).map((function(t){return oc(t,n)}))}var Ac={css:function(t,e,n){return t.style[e]=n},attribute:function(t,e,n){return t.setAttribute(e,n)},object:function(t,e,n){return t[e]=n},transform:function(t,e,n,i,r){if(i.list.set(e,n),e===i.last||r){var s="";i.list.forEach((function(t,e){s+=e+"("+t+") "})),t.style.transform=s}}};function Pc(t,e){Tc(t).forEach((function(t){for(var n in e){var i=cc(e[n],t),r=t.target,s=lc(i),a=fc(r,n,s,t),o=gc(vc(i,s||lc(a)),a),l=pc(r,n);Ac[l](r,n,o,t.transforms,!0)}}))}function Rc(t,e){return ec(nc(t.map((function(t){return e.map((function(e){return function(t,e){var n=pc(t.target,e.name);if(n){var i=function(t,e){var n;return t.tweens.map((function(i){var r=function(t,e){var n={};for(var i in t){var r=cc(t[i],e);jl.arr(r)&&1===(r=r.map((function(t){return cc(t,e)}))).length&&(r=r[0]),n[i]=r}return n.duration=parseFloat(n.duration),n.delay=parseFloat(n.delay),n}(i,e),s=r.value,a=jl.arr(s)?s[1]:s,o=lc(a),l=fc(e.target,t.name,o,e),c=n?n.to.original:l,h=jl.arr(s)?s[0]:c,u=lc(h)||lc(l),d=o||u;return jl.und(a)&&(a=c),r.from=Mc(h,d),r.to=Mc(gc(a,h),d),r.start=n?n.end:0,r.end=r.start+r.delay+r.duration+r.endDelay,r.easing=$l(r.easing,r.duration),r.isPath=jl.pth(s),r.isPathTargetInsideSVG=r.isPath&&jl.svg(e.target),r.isColor=jl.col(r.from.original),r.isColor&&(r.round=1),n=r,r}))}(e,t),r=i[i.length-1];return{type:n,property:e.name,animatable:t,tweens:i,duration:r.end,delay:i[0].delay,endDelay:r.endDelay}}}(t,e)}))}))),(function(t){return!jl.und(t)}))}function Cc(t,e){var n=t.length,i=function(t){return t.timelineOffset?t.timelineOffset:0},r={};return r.duration=n?Math.max.apply(Math,t.map((function(t){return i(t)+t.duration}))):e.duration,r.delay=n?Math.min.apply(Math,t.map((function(t){return i(t)+t.delay}))):e.delay,r.endDelay=n?r.duration-Math.max.apply(Math,t.map((function(t){return i(t)+t.duration-t.endDelay}))):e.endDelay,r}var Lc=0,Dc=[],Ic=function(){var t;function e(n){for(var i=Dc.length,r=0;r<i;){var s=Dc[r];s.paused?(Dc.splice(r,1),i--):(s.tick(n),r++)}t=r>0?requestAnimationFrame(e):void 0}return"undefined"!=typeof document&&document.addEventListener("visibilitychange",(function(){Nc.suspendWhenDocumentHidden&&(zc()?t=cancelAnimationFrame(t):(Dc.forEach((function(t){return t._onDocumentVisibility()})),Ic()))})),function(){t||zc()&&Nc.suspendWhenDocumentHidden||!(Dc.length>0)||(t=requestAnimationFrame(e))}}();function zc(){return!!document&&document.hidden}function Nc(t){void 0===t&&(t={});var e,n=0,i=0,r=0,s=0,a=null;function o(t){var e=window.Promise&&new Promise((function(t){return a=t}));return t.finished=e,e}var l=function(t){var e=ac(Ul,t),n=ac(Bl,t),i=function(t,e){var n=[],i=e.keyframes;for(var r in i&&(e=oc(function(t){for(var e=ec(nc(t.map((function(t){return Object.keys(t)}))),(function(t){return jl.key(t)})).reduce((function(t,e){return t.indexOf(e)<0&&t.push(e),t}),[]),n={},i=function(i){var r=e[i];n[r]=t.map((function(t){var e={};for(var n in t)jl.key(n)?n==r&&(e.value=t[n]):e[n]=t[n];return e}))},r=0;r<e.length;r++)i(r);return n}(i),e)),e)jl.key(r)&&n.push({name:r,tweens:Ec(e[r],t)});return n}(n,t),r=Tc(t.targets),s=Rc(r,i),a=Cc(s,n),o=Lc;return Lc++,oc(e,{id:o,children:[],animatables:r,animations:s,duration:a.duration,delay:a.delay,endDelay:a.endDelay})}(t);function c(){var t=l.direction;"alternate"!==t&&(l.direction="normal"!==t?"normal":"reverse"),l.reversed=!l.reversed,e.forEach((function(t){return t.reversed=l.reversed}))}function h(t){return l.reversed?l.duration-t:t}function u(){n=0,i=h(l.currentTime)*(1/Nc.speed)}function d(t,e){e&&e.seek(t-e.timelineOffset)}function p(t){for(var e=0,n=l.animations,i=n.length;e<i;){var r=n[e],s=r.animatable,a=r.tweens,o=a.length-1,c=a[o];o&&(c=ec(a,(function(e){return t<e.end}))[0]||c);for(var h=kl(t-c.start-c.delay,0,c.duration)/c.duration,u=isNaN(h)?1:c.easing(h),d=c.to.strings,p=c.round,m=[],f=c.to.numbers.length,g=void 0,v=0;v<f;v++){var y=void 0,x=c.to.numbers[v],_=c.from.numbers[v]||0;y=c.isPath?bc(c.value,u*x,c.isPathTargetInsideSVG):_+u*(x-_),p&&(c.isColor&&v>2||(y=Math.round(y*p)/p)),m.push(y)}var w=d.length;if(w){g=d[0];for(var b=0;b<w;b++){d[b];var M=d[b+1],S=m[b];isNaN(S)||(g+=M?S+M:S+" ")}}else g=m[0];Ac[r.type](s.target,r.property,g,s.transforms),r.currentValue=g,e++}}function m(t){l[t]&&!l.passThrough&&l[t](l)}function f(t){var u=l.duration,f=l.delay,g=u-l.endDelay,v=h(t);l.progress=kl(v/u*100,0,100),l.reversePlayback=v<l.currentTime,e&&function(t){if(l.reversePlayback)for(var n=s;n--;)d(t,e[n]);else for(var i=0;i<s;i++)d(t,e[i])}(v),!l.began&&l.currentTime>0&&(l.began=!0,m("begin")),!l.loopBegan&&l.currentTime>0&&(l.loopBegan=!0,m("loopBegin")),v<=f&&0!==l.currentTime&&p(0),(v>=g&&l.currentTime!==u||!u)&&p(u),v>f&&v<g?(l.changeBegan||(l.changeBegan=!0,l.changeCompleted=!1,m("changeBegin")),m("change"),p(v)):l.changeBegan&&(l.changeCompleted=!0,l.changeBegan=!1,m("changeComplete")),l.currentTime=kl(v,0,u),l.began&&m("update"),t>=u&&(i=0,l.remaining&&!0!==l.remaining&&l.remaining--,l.remaining?(n=r,m("loopComplete"),l.loopBegan=!1,"alternate"===l.direction&&c()):(l.paused=!0,l.completed||(l.completed=!0,m("loopComplete"),m("complete"),!l.passThrough&&"Promise"in window&&(a(),o(l)))))}return o(l),l.reset=function(){var t=l.direction;l.passThrough=!1,l.currentTime=0,l.progress=0,l.paused=!0,l.began=!1,l.loopBegan=!1,l.changeBegan=!1,l.completed=!1,l.changeCompleted=!1,l.reversePlayback=!1,l.reversed="reverse"===t,l.remaining=l.loop,e=l.children;for(var n=s=e.length;n--;)l.children[n].reset();(l.reversed&&!0!==l.loop||"alternate"===t&&1===l.loop)&&l.remaining++,p(l.reversed?l.duration:0)},l._onDocumentVisibility=u,l.set=function(t,e){return Pc(t,e),l},l.tick=function(t){r=t,n||(n=r),f((r+(i-n))*Nc.speed)},l.seek=function(t){f(h(t))},l.pause=function(){l.paused=!0,u()},l.play=function(){l.paused&&(l.completed&&l.reset(),l.paused=!1,Dc.push(l),u(),Ic())},l.reverse=function(){c(),l.completed=!l.reversed,u()},l.restart=function(){l.reset(),l.play()},l.remove=function(t){Fc(Sc(t),l)},l.reset(),l.autoplay&&l.play(),l}function Oc(t,e){for(var n=e.length;n--;)rc(t,e[n].animatable.target)&&e.splice(n,1)}function Fc(t,e){var n=e.animations,i=e.children;Oc(t,n);for(var r=i.length;r--;){var s=i[r],a=s.animations;Oc(t,a),a.length||s.children.length||i.splice(r,1)}n.length||i.length||e.pause()}Nc.version="3.2.1",Nc.speed=1,Nc.suspendWhenDocumentHidden=!0,Nc.running=Dc,Nc.remove=function(t){for(var e=Sc(t),n=Dc.length;n--;)Fc(e,Dc[n])},Nc.get=fc,Nc.set=Pc,Nc.convertPx=uc,Nc.path=function(t,e){var n=jl.str(t)?tc(t)[0]:t,i=e||100;return function(t){return{property:t,el:n,svg:wc(n),totalLength:_c(n)*(i/100)}}},Nc.setDashoffset=function(t){var e=_c(t);return t.setAttribute("stroke-dasharray",e),e},Nc.stagger=function(t,e){void 0===e&&(e={});var n=e.direction||"normal",i=e.easing?$l(e.easing):null,r=e.grid,s=e.axis,a=e.from||0,o="first"===a,l="center"===a,c="last"===a,h=jl.arr(t),u=h?parseFloat(t[0]):parseFloat(t),d=h?parseFloat(t[1]):0,p=lc(h?t[1]:t)||0,m=e.start||0+(h?u:0),f=[],g=0;return function(t,e,v){if(o&&(a=0),l&&(a=(v-1)/2),c&&(a=v-1),!f.length){for(var y=0;y<v;y++){if(r){var x=l?(r[0]-1)/2:a%r[0],_=l?(r[1]-1)/2:Math.floor(a/r[0]),w=x-y%r[0],b=_-Math.floor(y/r[0]),M=Math.sqrt(w*w+b*b);"x"===s&&(M=-w),"y"===s&&(M=-b),f.push(M)}else f.push(Math.abs(a-y));g=Math.max.apply(Math,f)}i&&(f=f.map((function(t){return i(t/g)*g}))),"reverse"===n&&(f=f.map((function(t){return s?t<0?-1*t:-t:Math.abs(g-t)})))}return m+(h?(d-u)/g:u)*(Math.round(100*f[e])/100)+p}},Nc.timeline=function(t){void 0===t&&(t={});var e=Nc(t);return e.duration=0,e.add=function(n,i){var r=Dc.indexOf(e),s=e.children;function a(t){t.passThrough=!0}r>-1&&Dc.splice(r,1);for(var o=0;o<s.length;o++)a(s[o]);var l=oc(n,ac(Bl,t));l.targets=l.targets||t.targets;var c=e.duration;l.autoplay=!1,l.direction=e.direction,l.timelineOffset=jl.und(i)?c:gc(i,c),a(e),e.seek(l.timelineOffset);var h=Nc(l);a(h),s.push(h);var u=Cc(s,t);return e.delay=u.delay,e.endDelay=u.endDelay,e.duration=u.duration,e.seek(0),e.reset(),e.autoplay&&e.play(),e},e},Nc.easing=$l,Nc.penner=Ql,Nc.random=function(t,e){return Math.floor(Math.random()*(e-t+1))+t};const Uc=Nc;let Bc=document.createElement("div");Bc.classList.add("curtain");let Hc=document.createElement("p");Hc.innerHTML="loading<br>...",Bc.appendChild(Hc),Fl("\n  .curtain {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 1;\n    pointer-events: none;\n  \n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n\n  .curtain p {\n    color: #ccc;\n    font-family: monospace;\n    font-size: 11px;\n    letter-spacing: 1.5px;\n    opacity: 0;\n    transition: opacity 0.5s;\n    transform: translate(0, 200px);\n    text-align: center;\n  }\n");let Gc={missingItems:-1};function kc(t){Bc.style.background=t}let Vc=!1;function Wc(t,e,n){document.body.appendChild(Bc),setTimeout((()=>{Vc||(Hc.style.opacity=1)}),1500);let i=t?.position?.clone(),r=n?.maxDistance,s=setInterval((()=>{if(0!==Gc.missingItems)return;let a={t:0};Uc({targets:a,t:[1,0],easing:"easeInOutSine",duration:3e3,begin:()=>{e||(n.maxDistance=1/0)},complete:()=>{e||(n.maxDistance=r)},update:()=>{if(Bc.style.opacity=a.t,Vc=!0,!e){let e=i.clone().multiplyScalar(1+.16*a.t);t.position.set(e.x,e.y+50*a.t,e.z)}}}),clearInterval(s)}),50)}class jc{constructor(t,e,n){this.material=new yn({uniforms:{uColorTexture:{type:"t",value:e.texture},uBloomTexture:{type:"t",value:n.texture},uBloomStrength:{value:1}},vertexShader:"\n                varying vec2 vUv;\n\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4(position.xy, 0.0, 1.0);    \n                }\n            ",fragmentShader:"\n                uniform sampler2D uColorTexture;\n                uniform sampler2D uBloomTexture;\n                uniform float uBloomStrength;\n\n                varying vec2 vUv;\n\n                void main() {\n                    vec4 col = texture2D(uColorTexture, vUv);\n                    vec4 bloom = texture2D(uBloomTexture, vUv);\n\n                    col += bloom * uBloomStrength * 1.5;\n\n                    col.rgb = ACESFilmicToneMapping(col.rgb);\n                    col = LinearTosRGB(col);\n\n                    // col.rgb = col.rgb + (col.rgb - vec3(0.2)) * 0.35;\n                    // col.rgb = pow(col.rgb, vec3(0.65, 0.7, 0.75)) * 0.65 + pow(col.rgb, vec3(0.95, 0.9, 0.85)) * 0.35;\n\n                    gl_FragColor = col;  \n                }\n            ",depthTest:!1,depthWrite:!1}),this.mesh=new dn(new zn(2,2),this.material),this.camera=new _n(45,1,1,1e3),this.renderer=t,this.scene=new ds,this.scene.add(this.mesh)}blit(t,e){this.renderer.setRenderTarget(e),this.material.uniforms.uBloomStrength.value=t,this.renderer.render(this.scene,this.camera),this.renderer.setRenderTarget(null)}}class qc{constructor(t,e,n,i){let r=Math.floor(.5*e),s=Math.floor(.5*n);this.rt0=new pt(r,s,{type:v}),this.rt1=new pt(r,s,{type:v}),this.rt=this.rt1,this.colorRT=i,this.blurMaterial=new yn({uniforms:{uTexture:{type:"t",value:null},uOriginalTexture:{type:"t",value:null},uHorizontal:{value:!1},uStep:{value:1},uSecondaryStep:{value:0},uPixelStep:{value:new Z(1/r,1/s)}},vertexShader:"\n      varying vec2 vUv;\n\n      void main() {\n          vUv = uv;\n          gl_Position = vec4(position.xy, 0.0, 1.0);    \n      }\n      ",fragmentShader:"\n      uniform sampler2D uTexture;\n      uniform sampler2D uOriginalTexture;\n\n      uniform vec2 uPixelStep;\n      uniform bool uHorizontal;\n      uniform float uStep;\n      uniform float uSecondaryStep;\n\n      varying vec2 vUv;\n\n      float weight[5] = float[] (0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216);\n\n      void main() {   \n          float blurRadius = uStep;\n\n          vec3 accum = vec3(0.0);\n          for(int i = -4; i <= +4; i++) {\n              vec2 offs = vec2(0.0); \n\n              if(uHorizontal)  offs = vec2(uPixelStep.x * float(i) * blurRadius, 0.0);\n              if(!uHorizontal) offs = vec2(0.0, uPixelStep.x * float(i) * blurRadius);\n\n              vec3 mult = vec3(1.0);\n              if(i < 0) mult *= weight[abs(i)];\n              if(i > 0) mult *= weight[i];\n              if(i == 0) mult *= weight[0];\n\n              vec3 value = texture2D(uTexture, vUv + offs * vec2(1.0, 0.8)).xyz;\n              if(uSecondaryStep > 0.0) {\n                vec3 secValue = vec3(0.0);\n                secValue = texture2D(uOriginalTexture, vUv + offs * vec2(0.3, 0.75)).xyz;\n                vec3 weightedSec = secValue * mult;\n                accum += weightedSec * 0.05;\n\n                mult *= 0.95;\n              }\n\n              vec3 weightedValue = value * mult;\n              accum += weightedValue * 0.7;\n\n              vec3 value2 = texture2D(uTexture, vUv + offs * 0.2 * vec2(1.0, 0.8)).xyz;\n              vec3 weightedValue2 = value2 * mult;\n              accum += weightedValue2 * 0.3;\n          }\n          \n          gl_FragColor = vec4(accum, 1.0);\n      }",depthTest:!1,depthWrite:!1}),this.mesh=new dn(new zn(2,2),this.blurMaterial),this.camera=new _n(45,1,1,1e3),this.renderer=t,this.scene=new ds,this.scene.add(this.mesh),this.clock=new sl,this.clock.start()}setSize(t,e){let n=Math.floor(.5*t),i=Math.floor(.5*e);this.rt0.setSize(n,i),this.rt1.setSize(n,i),this.blurMaterial.uniforms.uPixelStep.value=new Z(1/n,1/i)}compute(t=5.5){this.mesh.material=this.blurMaterial;for(let e=0;e<7;e++)e>4?(this.blurMaterial.uniforms.uSecondaryStep.value=e-4,this.blurMaterial.uniforms.uStep.value=.2*(e*t+.2)):(this.blurMaterial.uniforms.uSecondaryStep.value=0,this.blurMaterial.uniforms.uStep.value=e*t+.2),this.renderer.setRenderTarget(this.rt0),this.blurMaterial.uniforms.uHorizontal.value=!0,this.blurMaterial.uniforms.uTexture.value=0===e?this.colorRT.texture:this.rt1.texture,this.blurMaterial.uniforms.uOriginalTexture.value=this.colorRT.texture,this.renderer.render(this.scene,this.camera),this.renderer.setRenderTarget(this.rt1),this.blurMaterial.uniforms.uHorizontal.value=!1,this.blurMaterial.uniforms.uTexture.value=this.rt0.texture,this.renderer.render(this.scene,this.camera);this.rt=this.rt1}}const Xc="#4590ff",Yc="#ff9045",Zc="#ffd8b8",Jc="#d8e8ff",Kc="\n/* discontinuous pseudorandom uniformly distributed in [-0.5, +0.5]^3 */\nvec3 random3(vec3 c) {\n\tfloat j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n\tvec3 r;\n\tr.z = fract(512.0*j);\n\tj *= .125;\n\tr.x = fract(512.0*j);\n\tj *= .125;\n\tr.y = fract(512.0*j);\n\treturn r-0.5;\n}\n\n/* skew constants for 3d simplex functions */\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\n/* 3d simplex noise */\nfloat snoise(vec3 p) {\n\t /* 1. find current tetrahedron T and it's four vertices */\n\t /* s, s+i1, s+i2, s+1.0 - absolute skewed (integer) coordinates of T vertices */\n\t /* x, x1, x2, x3 - unskewed coordinates of p relative to each of T vertices*/\n\t \n\t /* calculate s and x */\n\t vec3 s = floor(p + dot(p, vec3(F3)));\n\t vec3 x = p - s + dot(s, vec3(G3));\n\t \n\t /* calculate i1 and i2 */\n\t vec3 e = step(vec3(0.0), x - x.yzx);\n\t vec3 i1 = e*(1.0 - e.zxy);\n\t vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n\t \t\n\t /* x1, x2, x3 */\n\t vec3 x1 = x - i1 + G3;\n\t vec3 x2 = x - i2 + 2.0*G3;\n\t vec3 x3 = x - 1.0 + 3.0*G3;\n\t \n\t /* 2. find four surflets and store them in d */\n\t vec4 w, d;\n\t \n\t /* calculate surflet weights */\n\t w.x = dot(x, x);\n\t w.y = dot(x1, x1);\n\t w.z = dot(x2, x2);\n\t w.w = dot(x3, x3);\n\t \n\t /* w fades from 0.6 at the center of the surflet to 0.0 at the margin */\n\t w = max(0.6 - w, 0.0);\n\t \n\t /* calculate surflet components */\n\t d.x = dot(random3(s), x);\n\t d.y = dot(random3(s + i1), x1);\n\t d.z = dot(random3(s + i2), x2);\n\t d.w = dot(random3(s + 1.0), x3);\n\t \n\t /* multiply d by w^4 */\n\t w *= w;\n\t w *= w;\n\t d *= w;\n\t \n\t /* 3. return the sum of the four surflets */\n\t return dot(d, vec4(52.0));\n}\n\nvec3 snoiseVec3( vec3 x ){\n\n  float s  = snoise(vec3( x ));\n  float s1 = snoise(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\n  float s2 = snoise(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\n  vec3 c = vec3( s , s1 , s2 );\n  return c;\n\n}\n\nvec3 curlNoise( vec3 p ){\n  \n  const float e = .1;\n  vec3 dx = vec3( e   , 0.0 , 0.0 );\n  vec3 dy = vec3( 0.0 , e   , 0.0 );\n  vec3 dz = vec3( 0.0 , 0.0 , e   );\n\n  vec3 p_x0 = snoiseVec3( p - dx );\n  vec3 p_x1 = snoiseVec3( p + dx );\n  vec3 p_y0 = snoiseVec3( p - dy );\n  vec3 p_y1 = snoiseVec3( p + dy );\n  vec3 p_z0 = snoiseVec3( p - dz );\n  vec3 p_z1 = snoiseVec3( p + dz );\n\n  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;\n  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;\n  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;\n\n  const float divisor = 1.0 / ( 2.0 * e );\n  return normalize( vec3( x , y , z ) * divisor );\n\n}\n",Qc="\n  vec2 rotate(vec2 v, float a) {\n  \tfloat s = sin(a);\n  \tfloat c = cos(a);\n  \tmat2 m = mat2(c, -s, s, c);\n  \treturn m * v;\n  }\n";let $c=`\n#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n\nvarying vec3 vFragPos;\n\nuniform float uTime;\nuniform vec4 uOffs;\nuniform float uWaveStrength;\n\nhighp float rand( const in vec2 uv ) {\n  const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n  highp float dt = dot( uv.xy, vec2( a, b ) ), sn = mod( dt, PI );\n  return fract( sin( sn ) * c );\n}\n\n${Kc}\n${Qc}\n\nvec3 distortPosition(vec3 position) {\n  // float animT = mod(uTime, 5.0);\n  // float cDist = length(position);\n  // float animDistTarget = animT * 50.0; \n\n  // float distDist = abs(animDistTarget - cDist);\n  // if(distDist < 20.0) {\n  //   float distortionFactor = 1.0;\n  //   distortionFactor = 1.0 - smoothstep(6.0, 20.0, distDist);\n\n  //   vec3 noise = snoiseVec3(position * 0.035 + uTime);\n  //   return position + noise * 15.0 * distortionFactor * (cDist * 0.05);\n  // }\n\n  // return position;\n\n\n  // float cDist = length(position);\n  // float animT = mod(uTime * 0.25, 5.0);\n  // float maxRot = cDist * 0.003; \n  // if(animT < 1.0) {\n  //   position.xz = rotate(position.xz, smoothstep(0.0, 1.0, animT) * maxRot);\n  // } else {\n  //   float t = 1.0 - smoothstep(1.0, 5.0, animT);\n  //   position.xz = rotate(position.xz, maxRot * t );\n  // }\n\n  float animT = mod(uTime, 10.0);\n  float animStrength = uWaveStrength;\n  // if(animT < 1.0) {\n  //   animStrength = smoothstep(0.0, 0.5, animT);\n  // } else if(animT < 2.0) {\n  //   animStrength = 1.0;\n  // } else if(animT < 3.0) {\n  //   animStrength = 1.0 - smoothstep(2.0, 3.0, animT);\n  // }\n\n  float cDist = length(position);\n  position.xz = rotate(position.xz, sin(cDist * 0.25) * cDist * 0.0005 * animStrength);\n\n  return position;\n}\n\nvoid main() {\n  float alpha = 0.0;\n  vec3 tPosition = distortPosition(vFragPos);\n  float cDist = length(tPosition.xz);\n\n  float angle = atan(tPosition.z, tPosition.x);\n  float anglemod = mod(angle, PI2 / 50.0);\n\n  float modlimit = (0.005 / (1.0 + cDist * 0.005) );\n  // lines closer to the viewer will be bigger to ameliorate aliasing\n  if(cDist > 15.0 && cDist < 80.0) {\n    modlimit *= 1.0 + (1.0 - smoothstep(15.0, 80.0, cDist)) * 1.0;\n  }\n\n  // line drawer\n  if(anglemod < modlimit) {\n    if(anglemod < modlimit * 0.5) {\n      alpha += smoothstep(0.0, modlimit * 0.5, anglemod);\n    } else {\n      alpha += 1.0 - smoothstep(modlimit * 0.5, modlimit, anglemod);\n    }\n\n\n    // animation\n    float cell = angle - anglemod;\n    // lineAnimT = [0.0, 40.0]\n    float lineAnimT = mod( uTime + rand(vec2(cell)) * 20.0, 20.0 );\n    float targetDist = 100.0 + lineAnimT * 100.0;\n    float animDist = abs(cDist - targetDist);\n    if(animDist < 10.0) {\n      alpha *= (1.0 - smoothstep(0.0, 10.0, animDist)) * 5.0;\n    }\n  }\n\n  if(cDist < 15.0) {\n    alpha = 0.0;\n  }\n\n  if(cDist > 200.0 && cDist < 201.0) {\n    alpha += 0.5;\n  }\n  if(cDist > 205.0 && cDist < 206.0) {\n    alpha += 0.45;\n  }\n\n  // distance based opacity reduction;\n  // alpha *= exp(-cDist * 0.0035);\n\n  alpha *= 0.075;\n\n  vec3 gridColor = vec3(0.5, 0.8, 1.0) * alpha;\n\n  gl_FragColor = vec4(gridColor, 1.0);\n}\n`;const th={opaque:t=>new Ie({color:t||new st(Xc).convertSRGBToLinear(),side:2}),transparent:(t,e=.5,n)=>new Ie({color:t||new st(Xc).convertSRGBToLinear(),side:2,transparent:!0,opacity:e,vertexColors:n})},eh=function(){return new yn({uniforms:{uData:{value:[new dt(0,0,300,0),new dt(0,0,300,0),new dt(0,0,300,0)]}},vertexShader:"\n    varying vec3 vFragPos;\n    void main() {\n      vFragPos = (modelMatrix * vec4(position, 1.0)).xyz;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ",fragmentShader:"\n    #define PI 3.141592653589793\n    #define PI2 6.283185307179586\n    #define PI_HALF 1.5707963267948966\n\n    varying vec3 vFragPos;\n\n    uniform vec4 uData[3];\n  \n    vec3 getContribution(vec2 pos, vec3 col, float spread) {\n      float col1t = 1.0 - smoothstep(0.0, spread, length(vFragPos.xz - pos));\n      return mix(vec3(0.0), col, col1t); \n    }\n\n    highp float rand( const in vec2 uv ) {\n      const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n      highp float dt = dot( uv.xy, vec2( a, b ) ), sn = mod( dt, PI );\n      return fract( sin( sn ) * c );\n    }\n\n    vec3 dithering( vec3 color ) {\n      float grid_position = rand( gl_FragCoord.xy );\n      vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n      dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n      return color + dither_shift_RGB;\n    }\n\n    vec3 getRadContribution(vec2 pos, vec3 col, float spread, float absDist) {\n      float dist = abs(length(pos) - spread);\n      float t = 0.0;\n\n      if(dist < absDist) {\n        t = 1.0 - smoothstep(0.0, absDist, dist);\n      }\n\n      return mix(vec3(0.0), col, t); \n    }\n\n    void main() {\n      gl_FragColor = vec4(\n        getContribution(uData[2].xy, pow(vec3(0.9, 0.6, 0.3), vec3(2.0)) * 0.075, uData[2].z) +\n        getContribution(uData[1].xy, pow(vec3(0.3, 0.7, 0.98), vec3(2.0)) * 0.075, uData[1].z) +\n        getContribution(uData[0].xy, pow(vec3(0.3, 0.6, 0.9), vec3(2.0)) * 0.075, uData[0].z)\n        , 1.0\n      );\n\n      // gl_FragColor = vec4(\n      //   getRadContribution(vFragPos.xz, pow(vec3(0.9, 0.6, 0.3), vec3(2.0)) * 0.075, 600.0, 450.0) +\n      //   getRadContribution(vFragPos.xz, pow(vec3(0.3, 0.7, 0.98), vec3(2.0)) * 0.05, 340.0, 125.0) +\n      //   getRadContribution(vFragPos.xz, pow(vec3(0.3, 0.6, 0.9), vec3(2.0)) * 0.075, 100.0, 50.0)\n      //   , 1.0\n      // );\n\n      gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n    }\n  ",transparent:!0})},nh=function(){return new yn({uniforms:{uTime:{value:0}},vertexShader:"\n    varying vec3 vFragPos;\n    void main() {\n      vFragPos = (modelMatrix * vec4(position, 1.0)).xyz;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ",fragmentShader:"\n    #define PI 3.141592653589793\n    #define PI2 6.283185307179586\n    #define PI_HALF 1.5707963267948966\n\n    varying vec3 vFragPos;\n\n    uniform float uTime;\n\n    highp float rand( const in vec2 uv ) {\n      const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n      highp float dt = dot( uv.xy, vec2( a, b ) ), sn = mod( dt, PI );\n      return fract( sin( sn ) * c );\n    }\n\n    vec3 dithering( vec3 color ) {\n      float grid_position = rand( gl_FragCoord.xy );\n      vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n      dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n      return color + dither_shift_RGB;\n    }\n\n    vec2 rotate(vec2 v, float a) {\n      float s = sin(a);\n      float c = cos(a);\n      mat2 m = mat2(c, -s, s, c);\n      return m * v;\n    }\n\n    void main() {\n      // dots\n      float alpha = 0.0;\n      {\n        // vec2 pos = vFragPos.xz;\n        // vec2 randOffs = vec2(0.0);\n        // float divisor = 1.0 / (1.0);\n        // vec2 gridPos = mod(pos + randOffs, vec2(1.0)) * divisor;\n        // alpha += 1.0 - smoothstep(0.0, 0.45, length(gridPos - vec2(0.5, 0.5)));\n      \n        vec2 pos = vFragPos.xz + normalize(vFragPos.xz) * (-1.25 + 3.0 * sin(uTime + length(vFragPos.xz) * 0.1) * 0.5 + 0.5);\n        float rad = length(pos);\n        float radmod = mod(rad, 2.0);\n        float cell = rad - radmod;\n\n        pos = rotate(pos, (mod(cell, 4.0) < 2.0 ? uTime : - uTime) * (1.0 / cell));\n\n        float theta = atan(pos.y, pos.x) + PI;\n\n        float targetRad = cell + 1.0;\n        // float ndots = cell * 11.0 + 6.0;\n        // float angleDiv = (PI * 2.0 ) / ndots; \n        // float targetAngle = theta - mod(theta, PI * angleDiv) + PI * angleDiv * 0.5;\n        float ndots = cell * 2.0 + 6.0;\n        float angleDiv = (PI * 2.0) / ndots; \n        float targetAngle = theta - mod(theta, angleDiv) + angleDiv * 0.5;\n        vec2 target = vec2(\n          cos(targetAngle + PI) * targetRad,\n          sin(targetAngle + PI) * targetRad\n        );         \n\n        alpha = 1.0 - smoothstep(0.25, 0.35, length(pos - target));\n        alpha *= 0.25;\n\n        alpha *= 1.0 - mod(cell, 6.0) / 6.0;\n        alpha *= (sin(targetAngle * PI * 10.0 + uTime + targetAngle * 897.239) * 0.5 + 0.5) * 1.35;\n        alpha *= 2.0;\n        if(rad < 2.0) {\n          alpha = 0.0;\n        }\n      }\n  \n      // circle final clamp\n      alpha *= 1.0 - smoothstep(150.0, 180.0, length(vFragPos.xz));\n      alpha = clamp(0.0, 1.0, alpha);\n      \n      vec3 gridColor = vec3(0.7, 0.8, 1.0) * alpha * 0.05;\n\n      gl_FragColor = vec4(gridColor, 1.0);\n    }\n  ",transparent:!0,blending:5,blendEquation:e,blendSrc:n,blendDst:n,depthWrite:!1})},ih=function(){return new yn({uniforms:{uTime:{value:0},uWaveStrength:{value:0},uOffs:{value:new dt(0,0,0,0)}},vertexShader:"\n    varying vec3 vFragPos;\n    void main() {\n      vFragPos = (modelMatrix * vec4(position, 1.0)).xyz;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n  ",fragmentShader:$c,transparent:!0,blending:5,blendEquation:e,blendSrc:n,blendDst:n,depthWrite:!1,side:2})};function rh(t=7,e=6.9,n="default",i){let r=.0515;"small"==n&&(r=.1);const s=Math.PI*(.5+r),a=Math.PI*(2-2*r),o=new so(e,t,80,1,s,a),l=new dn(o,th.transparent(i,.5));let c=.075*t;"small"==n&&(c=.15*t);const h=new aa(c,30);h.translate(0,.99*t,0);const u=new dn(h,th.opaque(i)),d=new aa(.275*t,60),p=new dn(d,th.opaque(i)),m=new is;return m.add(u,p,l),m}const sh=(t,e)=>{const n=null!==t[0].index,i=new Set(Object.keys(t[0].attributes)),r=new Set(Object.keys(t[0].morphAttributes)),s={},a={},o=t[0].morphTargetsRelative,l=new Xe;let c=0;if(t.forEach(((t,h)=>{let u=0;if(n!==(null!==t.index))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+h+". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them."),null;for(let e in t.attributes){if(!i.has(e))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+h+'. All geometries must have compatible attributes; make sure "'+e+'" attribute exists among all geometries, or in none of them.'),null;void 0===s[e]&&(s[e]=[]),s[e].push(t.attributes[e]),u++}if(u!==i.size)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+h+". Make sure all geometries have the same number of attributes."),null;if(o!==t.morphTargetsRelative)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+h+". .morphTargetsRelative must be consistent throughout all geometries."),null;for(let e in t.morphAttributes){if(!r.has(e))return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+h+".  .morphAttributes must be consistent throughout all geometries."),null;void 0===a[e]&&(a[e]=[]),a[e].push(t.morphAttributes[e])}if(l.userData.mergedUserData=l.userData.mergedUserData||[],l.userData.mergedUserData.push(t.userData),e){let e;if(t.index)e=t.index.count;else{if(void 0===t.attributes.position)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index "+h+". The geometry must have either an index or a position attribute"),null;e=t.attributes.position.count}l.addGroup(c,e,h),c+=e}})),n){let e=0;const n=[];t.forEach((t=>{const i=t.index;for(let t=0;t<i.count;++t)n.push(i.getX(t)+e);e+=t.attributes.position.count})),l.setIndex(n)}for(let t in s){const e=ah(s[t]);if(!e)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+t+" attribute."),null;l.setAttribute(t,e)}for(let t in a){const e=a[t][0].length;if(0===e)break;l.morphAttributes=l.morphAttributes||{},l.morphAttributes[t]=[];for(let n=0;n<e;++n){const e=[];for(let i=0;i<a[t].length;++i)e.push(a[t][i][n]);const i=ah(e);if(!i)return console.error("THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the "+t+" morphAttribute."),null;l.morphAttributes[t].push(i)}}return l},ah=t=>{let e,n,i,r=0;if(t.forEach((t=>(void 0===e&&(e=t.array.constructor),e!==t.array.constructor?(console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes."),null):(void 0===n&&(n=t.itemSize),n!==t.itemSize?(console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes."),null):(void 0===i&&(i=t.normalized),i!==t.normalized?(console.error("THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes."),null):void(r+=t.array.length)))))),e&&n){const s=new e(r);let a=0;return t.forEach((t=>{s.set(t.array,a),a+=t.array.length})),new Oe(s,n,i)}};function oh({outerRing:t,color:e,day:n}){let i,r;for(let e=0;e<12;e++){const n=new zn(.5,.1);let s=.5*-Math.PI+2*Math.PI*(e/12);n.translate(12,0,0),n.rotateZ(s),i=i?sh([i,n]):n;for(let e=1;e<5;e++){const n=new zn(.2,.1);let i=s+2*Math.PI/12*(e/5);n.translate(12+(t?.25:0),0,0),n.rotateZ(i),r=r?sh([r,n]):n}}const s=new dn(i,th.opaque(e)),a=new dn(r,th.transparent(e,.2));let o;o=new dn(n<7?new aa(1,30):new so(.8,.65,30),th.transparent(e,1)),o.position.set(0,0,.2);const l=rh(1,.925,"small",e);l.position.set(7,0,0);const c=new dn(new zn(7,.085),th.transparent(e,.1));c.position.set(3.5,0,0);const h=new is;h.add(l,c);const u=rh(.9,.75,"small",e);u.position.set(9,0,0),u.rotateZ(1.5);const d=new dn(new zn(9,.085),th.transparent(e,.15));d.position.set(4.5,0,0);const p=new is;p.add(u,d);const m=new is;let f,g;if(m.add(h,p,s,a,o),t){f=new dn(new so(12.7,12.6,80),th.opaque(e)),m.add(f);const t=new dn(new aa(.5,30),th.opaque(e));t.position.set(12.7,0,0),g=new is,g.add(t),m.add(g)}return{group:m,atom1:l,atom2:u,circle:o,hoursRim:s,minutesRim:a,hourRotGroup:h,minutesRotGroup:p,outerCircle:g}}let lh={};const ch=function(t){return!lh[t]&&(lh[t]=!0,!0)};class hh{constructor(t,e){this.renderer=t,this.day=e,this.scene=new ds,this.scene.background=new st("black"),this.clock=new sl}async init(){}update(){}}function uh(){window.addEventListener("mousedown",(t=>{n.classList.add("active"),i.classList.add("active")})),window.addEventListener("mouseup",(t=>{n.classList.remove("active"),i.classList.remove("active")}));let t=new Z(.5*window.innerWidth,.75*window.innerHeight),e=new Z(.5*window.innerWidth,.75*window.innerHeight);window.addEventListener("mousemove",(t=>{e.setX(t.clientX),e.setY(t.clientY)}));let n=document.createElement("div");n.classList.add("central-cursor"),document.body.appendChild(n);let i=document.createElement("div");i.classList.add("outer-cursor"),document.body.appendChild(i);let r=n.getBoundingClientRect(),s=i.getBoundingClientRect();function a(a){t.multiplyScalar(.8).add(e.clone().multiplyScalar(1-.8)),n.style.left=e.x-.5*r.width+"px",n.style.top=e.y-.5*r.height+"px",i.style.left=t.x-.5*s.width+"px",i.style.top=t.y-.5*s.height+"px"}return dh=a,a}let dh;function ph(t){return t<.5?4*t*t*t:1-Math.pow(-2*t+2,3)/2}Fl('\ncanvas {\n  cursor: none;\n}\n\n.central-cursor {\n  width: 8px;\n  height: 8px;\n  border-radius: 100%;\n  border: 2px solid white;\n  position: absolute;\n  top: 0; left: 0;\n  box-sizing: border-box;\n  pointer-events: none;\n  transition: transform .05s, background .05s;\n}\n.central-cursor.active {\n  /* opacity: 0; */\n  transform: scale(0.65);\n  background: white;\n}\n.outer-cursor {\n  width:  36px;\n  height: 36px;\n  border-radius: 100%;\n  border: 2px solid white;\n  position: absolute;\n  top: 0; left: 0;\n  box-sizing: border-box;\n  opacity: 0.5;\n  pointer-events: none;\n  transition: transform .1s, opacity .1s;\n}\n.outer-cursor::before {\n  width: 36px;\n  height: 36px;\n  border-radius: 100%;\n  border: 1.25px solid white;\n  content: " ";\n  opacity: 0;\n  position: absolute;\n  top: calc(50% - 18px);\n  left: calc(50% - 18px);\n  box-sizing: border-box;\n  transition: transform .2s, opacity .2s;\n}\n.outer-cursor.hover {\n  transform: scale(1.4);\n  opacity: 0.75;\n}\n.outer-cursor.hover::before {\n  transform: scale(1.45);\n  opacity: 0.35;\n}\n.outer-cursor.active::before {\n  transform: scale(1.45);\n  opacity: 0.35;\n}\n');const mh={};function fh(t,e,n,i){return function(){var r=(t>>>=0)+(e>>>=0)|0;return t=e^e>>>9,e=(n>>>=0)+(n<<3)|0,n=(n=n<<21|n>>>11)+(r=r+(i=1+(i>>>=0)|0)|0)|0,(r>>>0)/4294967296}}function gh(t){for(var e=0,n=1779033703^t.length;e<t.length;e++)n=Math.imul(n^t.charCodeAt(e),3432918353);return n=n<<13|n>>>19,function(){return n=Math.imul(n^n>>>16,2246822507),n=Math.imul(n^n>>>13,3266489909),(n^=n>>>16)>>>0}}var vh=gh("apples");mh.rand=fh(vh(),vh(),vh(),vh()),mh.setRandomSeed=function(t){vh=gh(t),mh.rand=fh(vh(),vh(),vh(),vh())},mh.getSeed=function(){return vh()},mh.clamp=function(t,e,n){return Math.max(Math.min(t,n),e)},mh.smoothstep=function(t,e,n){let i=mh.clamp((n-t)/(e-t),0,1);return i*i*(3-2*i)};class yh{constructor(t){this.outerRing=new dn(new so(1,.8,30),th.transparent(null,1)),this.outerRing.position.set(-20,0,.065),this.hourCircle=new dn(new aa(.35,25),th.opaque(null)),this.hourCircle.position.set(7,0,0),this.trailMesh=new dn(new Xe,th.transparent(null,1,!0)),this.trailPosArray=[],this.trailActivationCounter=0,this.group=new is,this.group.add(this.outerRing),this.group.add(this.hourCircle),this.group.add(this.trailMesh),window.addEventListener("click",(()=>{ch("d6-audio")&&setTimeout((()=>{t.audioManager.loadAndPlay(assetsPath+"please.mp3",.0375)}),108e5)}))}setStartPosition(t){this.startPosition=t,this.hourCircle.position.copy(t)}update(t,e){let n=this.startPosition.y>0?1:-1,i=.15*e,r=Math.min(i,1),s=ph(r),a=this.startPosition.clone().multiplyScalar(1-s);a.add(this.outerRing.position.clone().multiplyScalar(s)),a.add(new vt(0,(.5*Math.sin(r*Math.PI*2-.5*Math.PI)+.5)*n*3,.075)),this.hourCircle.position.copy(a),this.trailActivationCounter++,this.trailActivationCounter%3==0&&s<1&&this.trailPosArray.push(a),this.updateTrailGeometry(i)}updateTrailGeometry(t){if(this.trailPosArray.length<2)return;let e=[],n=[],i=new st(Xc);for(let r=0;r<this.trailPosArray.length-1;r++){let s=this.trailPosArray[r],a=this.trailPosArray[r+1],o=s.clone(),l=a.clone(),c=o.clone().sub(l).normalize(),h=new vt(-c.y,c.x,0).normalize(),u=.1,d=o.clone().add(h.clone().multiplyScalar(+u)),p=o.clone().add(h.clone().multiplyScalar(-u)),m=l.clone().add(h.clone().multiplyScalar(+u)),f=l.clone().add(h.clone().multiplyScalar(-u));e.push(d.x,d.y,.05,p.x,p.y,.05,m.x,m.y,.05,m.x,m.y,.05,p.x,p.y,.05,f.x,f.y,.05),n.push(i.r,i.g,i.b,mh.clamp(.1*(r+10)-7*t,0,1.5),i.r,i.g,i.b,mh.clamp(.1*(r+10)-7*t,0,1.5),i.r,i.g,i.b,mh.clamp(.1*(r+10)-7*t,0,1.5),i.r,i.g,i.b,mh.clamp(.1*(r+10)-7*t,0,1.5),i.r,i.g,i.b,mh.clamp(.1*(r+10)-7*t,0,1.5),i.r,i.g,i.b,mh.clamp(.1*(r+10)-7*t,0,1.5))}this.trailMesh.geometry.setAttribute("position",new Oe(new Float32Array(e),3)),this.trailMesh.geometry.setAttribute("color",new Oe(new Float32Array(n),4)),this.trailMesh.geometry.needsUpdate=!0}}class xh{constructor(t){window.addEventListener("click",(()=>{const e=new ul;t.add(e),this.sound=new dl(e)}))}loadAndPlay(t,e){(new rl).load(t,(t=>{this.sound.setBuffer(t),this.sound.setLoop(!1),this.sound.setVolume(e||.5),this.sound.play()}))}}function _h(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}const wh=(t,e)=>(t%e+e)%e;class bh extends H{constructor(t,e){super(),_h(this,"object",void 0),_h(this,"domElement",void 0),_h(this,"enabled",!0),_h(this,"target",new vt),_h(this,"minDistance",0),_h(this,"maxDistance",1/0),_h(this,"minZoom",0),_h(this,"maxZoom",1/0),_h(this,"minPolarAngle",0),_h(this,"maxPolarAngle",Math.PI),_h(this,"minAzimuthAngle",-1/0),_h(this,"maxAzimuthAngle",1/0),_h(this,"enableDamping",!1),_h(this,"dampingFactor",.05),_h(this,"enableZoom",!0),_h(this,"zoomSpeed",1),_h(this,"enableRotate",!0),_h(this,"rotateSpeed",1),_h(this,"enablePan",!0),_h(this,"panSpeed",1),_h(this,"screenSpacePanning",!0),_h(this,"keyPanSpeed",7),_h(this,"autoRotate",!1),_h(this,"autoRotateSpeed",2),_h(this,"reverseOrbit",!1),_h(this,"keys",{LEFT:"ArrowLeft",UP:"ArrowUp",RIGHT:"ArrowRight",BOTTOM:"ArrowDown"}),_h(this,"mouseButtons",{LEFT:0,MIDDLE:1,RIGHT:2}),_h(this,"touches",{ONE:0,TWO:2}),_h(this,"target0",void 0),_h(this,"position0",void 0),_h(this,"zoom0",void 0),_h(this,"_domElementKeyEvents",null),_h(this,"getPolarAngle",void 0),_h(this,"getAzimuthalAngle",void 0),_h(this,"setPolarAngle",void 0),_h(this,"setAzimuthalAngle",void 0),_h(this,"getDistance",void 0),_h(this,"listenToKeyEvents",void 0),_h(this,"saveState",void 0),_h(this,"reset",void 0),_h(this,"update",void 0),_h(this,"connect",void 0),_h(this,"dispose",void 0),this.object=t,this.domElement=e,this.target0=this.target.clone(),this.position0=this.object.position.clone(),this.zoom0=this.object instanceof _n?this.object.zoom:1,this.getPolarAngle=()=>c.phi,this.getAzimuthalAngle=()=>c.theta,this.setPolarAngle=t=>{let e=wh(t,2*Math.PI),i=c.phi;i<0&&(i+=2*Math.PI),e<0&&(e+=2*Math.PI);let r=Math.abs(e-i);2*Math.PI-r<r&&(e<i?e+=2*Math.PI:i+=2*Math.PI),h.phi=e-i,n.update()},this.setAzimuthalAngle=t=>{let e=wh(t,2*Math.PI),i=c.theta;i<0&&(i+=2*Math.PI),e<0&&(e+=2*Math.PI);let r=Math.abs(e-i);2*Math.PI-r<r&&(e<i?e+=2*Math.PI:i+=2*Math.PI),h.theta=e-i,n.update()},this.getDistance=()=>n.object.position.distanceTo(n.target),this.listenToKeyEvents=t=>{t.addEventListener("keydown",q),this._domElementKeyEvents=t},this.saveState=()=>{n.target0.copy(n.target),n.position0.copy(n.object.position),n.zoom0=n.object instanceof _n?n.object.zoom:1},this.reset=()=>{n.target.copy(n.target0),n.object.position.copy(n.position0),n.object instanceof _n&&(n.object.zoom=n.zoom0,n.object.updateProjectionMatrix()),n.dispatchEvent(i),n.update(),o=a.NONE},this.update=(()=>{const e=new vt,r=(new gt).setFromUnitVectors(t.up,new vt(0,1,0)),s=r.clone().invert(),m=new vt,f=new gt,g=2*Math.PI;return function(){const t=n.object.position;e.copy(t).sub(n.target),e.applyQuaternion(r),c.setFromVector3(e),n.autoRotate&&o===a.NONE&&E(2*Math.PI/60/60*n.autoRotateSpeed),n.enableDamping?(c.theta+=h.theta*n.dampingFactor,c.phi+=h.phi*n.dampingFactor):(c.theta+=h.theta,c.phi+=h.phi);let v=n.minAzimuthAngle,y=n.maxAzimuthAngle;return isFinite(v)&&isFinite(y)&&(v<-Math.PI?v+=g:v>Math.PI&&(v-=g),y<-Math.PI?y+=g:y>Math.PI&&(y-=g),c.theta=v<=y?Math.max(v,Math.min(y,c.theta)):c.theta>(v+y)/2?Math.max(v,c.theta):Math.min(y,c.theta)),c.phi=Math.max(n.minPolarAngle,Math.min(n.maxPolarAngle,c.phi)),c.makeSafe(),c.radius*=u,c.radius=Math.max(n.minDistance,Math.min(n.maxDistance,c.radius)),!0===n.enableDamping?n.target.addScaledVector(d,n.dampingFactor):n.target.add(d),e.setFromSpherical(c),e.applyQuaternion(s),t.copy(n.target).add(e),n.object.lookAt(n.target),!0===n.enableDamping?(h.theta*=1-n.dampingFactor,h.phi*=1-n.dampingFactor,d.multiplyScalar(1-n.dampingFactor)):(h.set(0,0,0),d.set(0,0,0)),u=1,!!(p||m.distanceToSquared(n.object.position)>l||8*(1-f.dot(n.object.quaternion))>l)&&(n.dispatchEvent(i),m.copy(n.object.position),f.copy(n.object.quaternion),p=!1,!0)}})(),this.connect=t=>{t===document&&console.error('THREE.OrbitControls: "document" should not be used as the target "domElement". Please use "renderer.domElement" instead.'),n.domElement=t,n.domElement.style.touchAction="none",n.domElement.addEventListener("contextmenu",X),n.domElement.addEventListener("pointerdown",G),n.domElement.addEventListener("pointercancel",W),n.domElement.addEventListener("wheel",j)},this.dispose=()=>{var t,e,i,r,s,a;null===(t=n.domElement)||void 0===t||t.removeEventListener("contextmenu",X),null===(e=n.domElement)||void 0===e||e.removeEventListener("pointerdown",G),null===(i=n.domElement)||void 0===i||i.removeEventListener("pointercancel",W),null===(r=n.domElement)||void 0===r||r.removeEventListener("wheel",j),null===(s=n.domElement)||void 0===s||s.ownerDocument.removeEventListener("pointermove",k),null===(a=n.domElement)||void 0===a||a.ownerDocument.removeEventListener("pointerup",V),null!==n._domElementKeyEvents&&n._domElementKeyEvents.removeEventListener("keydown",q)};const n=this,i={type:"change"},r={type:"start"},s={type:"end"},a={NONE:-1,ROTATE:0,DOLLY:1,PAN:2,TOUCH_ROTATE:3,TOUCH_PAN:4,TOUCH_DOLLY_PAN:5,TOUCH_DOLLY_ROTATE:6};let o=a.NONE;const l=1e-6,c=new Rl,h=new Rl;let u=1;const d=new vt;let p=!1;const m=new Z,f=new Z,g=new Z,v=new Z,y=new Z,x=new Z,_=new Z,w=new Z,b=new Z,M=[],S={};function T(){return Math.pow(.95,n.zoomSpeed)}function E(t){n.reverseOrbit?h.theta+=t:h.theta-=t}function A(t){n.reverseOrbit?h.phi+=t:h.phi-=t}const P=(()=>{const t=new vt;return function(e,n){t.setFromMatrixColumn(n,0),t.multiplyScalar(-e),d.add(t)}})(),R=(()=>{const t=new vt;return function(e,i){!0===n.screenSpacePanning?t.setFromMatrixColumn(i,1):(t.setFromMatrixColumn(i,0),t.crossVectors(n.object.up,t)),t.multiplyScalar(e),d.add(t)}})(),C=(()=>{const t=new vt;return function(e,i){const r=n.domElement;if(r&&n.object instanceof _n&&n.object.isPerspectiveCamera){const s=n.object.position;t.copy(s).sub(n.target);let a=t.length();a*=Math.tan(n.object.fov/2*Math.PI/180),P(2*e*a/r.clientHeight,n.object.matrix),R(2*i*a/r.clientHeight,n.object.matrix)}else r&&n.object instanceof Wn&&n.object.isOrthographicCamera?(P(e*(n.object.right-n.object.left)/n.object.zoom/r.clientWidth,n.object.matrix),R(i*(n.object.top-n.object.bottom)/n.object.zoom/r.clientHeight,n.object.matrix)):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled."),n.enablePan=!1)}})();function L(t){n.object instanceof _n&&n.object.isPerspectiveCamera?u/=t:n.object instanceof Wn&&n.object.isOrthographicCamera?(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom*t)),n.object.updateProjectionMatrix(),p=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function D(t){n.object instanceof _n&&n.object.isPerspectiveCamera?u*=t:n.object instanceof Wn&&n.object.isOrthographicCamera?(n.object.zoom=Math.max(n.minZoom,Math.min(n.maxZoom,n.object.zoom/t)),n.object.updateProjectionMatrix(),p=!0):(console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled."),n.enableZoom=!1)}function I(t){m.set(t.clientX,t.clientY)}function z(t){v.set(t.clientX,t.clientY)}function N(){if(1==M.length)m.set(M[0].pageX,M[0].pageY);else{const t=.5*(M[0].pageX+M[1].pageX),e=.5*(M[0].pageY+M[1].pageY);m.set(t,e)}}function O(){if(1==M.length)v.set(M[0].pageX,M[0].pageY);else{const t=.5*(M[0].pageX+M[1].pageX),e=.5*(M[0].pageY+M[1].pageY);v.set(t,e)}}function F(){const t=M[0].pageX-M[1].pageX,e=M[0].pageY-M[1].pageY,n=Math.sqrt(t*t+e*e);_.set(0,n)}function U(t){if(1==M.length)f.set(t.pageX,t.pageY);else{const e=K(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);f.set(n,i)}g.subVectors(f,m).multiplyScalar(n.rotateSpeed);const e=n.domElement;e&&(E(2*Math.PI*g.x/e.clientHeight),A(2*Math.PI*g.y/e.clientHeight)),m.copy(f)}function B(t){if(1==M.length)y.set(t.pageX,t.pageY);else{const e=K(t),n=.5*(t.pageX+e.x),i=.5*(t.pageY+e.y);y.set(n,i)}x.subVectors(y,v).multiplyScalar(n.panSpeed),C(x.x,x.y),v.copy(y)}function H(t){const e=K(t),i=t.pageX-e.x,r=t.pageY-e.y,s=Math.sqrt(i*i+r*r);w.set(0,s),b.set(0,Math.pow(w.y/_.y,n.zoomSpeed)),L(b.y),_.copy(w)}function G(t){var e,i;!1!==n.enabled&&(0===M.length&&(null===(e=n.domElement)||void 0===e||e.ownerDocument.addEventListener("pointermove",k),null===(i=n.domElement)||void 0===i||i.ownerDocument.addEventListener("pointerup",V)),function(t){M.push(t)}(t),"touch"===t.pointerType?function(t){switch(J(t),M.length){case 1:switch(n.touches.ONE){case 0:if(!1===n.enableRotate)return;N(),o=a.TOUCH_ROTATE;break;case 1:if(!1===n.enablePan)return;O(),o=a.TOUCH_PAN;break;default:o=a.NONE}break;case 2:switch(n.touches.TWO){case 2:if(!1===n.enableZoom&&!1===n.enablePan)return;n.enableZoom&&F(),n.enablePan&&O(),o=a.TOUCH_DOLLY_PAN;break;case 3:if(!1===n.enableZoom&&!1===n.enableRotate)return;n.enableZoom&&F(),n.enableRotate&&N(),o=a.TOUCH_DOLLY_ROTATE;break;default:o=a.NONE}break;default:o=a.NONE}o!==a.NONE&&n.dispatchEvent(r)}(t):function(t){let e;switch(t.button){case 0:e=n.mouseButtons.LEFT;break;case 1:e=n.mouseButtons.MIDDLE;break;case 2:e=n.mouseButtons.RIGHT;break;default:e=-1}switch(e){case 1:if(!1===n.enableZoom)return;!function(t){_.set(t.clientX,t.clientY)}(t),o=a.DOLLY;break;case 0:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===n.enablePan)return;z(t),o=a.PAN}else{if(!1===n.enableRotate)return;I(t),o=a.ROTATE}break;case 2:if(t.ctrlKey||t.metaKey||t.shiftKey){if(!1===n.enableRotate)return;I(t),o=a.ROTATE}else{if(!1===n.enablePan)return;z(t),o=a.PAN}break;default:o=a.NONE}o!==a.NONE&&n.dispatchEvent(r)}(t))}function k(t){!1!==n.enabled&&("touch"===t.pointerType?function(t){switch(J(t),o){case a.TOUCH_ROTATE:if(!1===n.enableRotate)return;U(t),n.update();break;case a.TOUCH_PAN:if(!1===n.enablePan)return;B(t),n.update();break;case a.TOUCH_DOLLY_PAN:if(!1===n.enableZoom&&!1===n.enablePan)return;!function(t){n.enableZoom&&H(t),n.enablePan&&B(t)}(t),n.update();break;case a.TOUCH_DOLLY_ROTATE:if(!1===n.enableZoom&&!1===n.enableRotate)return;!function(t){n.enableZoom&&H(t),n.enableRotate&&U(t)}(t),n.update();break;default:o=a.NONE}}(t):function(t){if(!1!==n.enabled)switch(o){case a.ROTATE:if(!1===n.enableRotate)return;!function(t){f.set(t.clientX,t.clientY),g.subVectors(f,m).multiplyScalar(n.rotateSpeed);const e=n.domElement;e&&(E(2*Math.PI*g.x/e.clientHeight),A(2*Math.PI*g.y/e.clientHeight)),m.copy(f),n.update()}(t);break;case a.DOLLY:if(!1===n.enableZoom)return;!function(t){w.set(t.clientX,t.clientY),b.subVectors(w,_),b.y>0?L(T()):b.y<0&&D(T()),_.copy(w),n.update()}(t);break;case a.PAN:if(!1===n.enablePan)return;!function(t){y.set(t.clientX,t.clientY),x.subVectors(y,v).multiplyScalar(n.panSpeed),C(x.x,x.y),v.copy(y),n.update()}(t)}}(t))}function V(t){var e,i,r;Y(t),0===M.length&&(null===(e=n.domElement)||void 0===e||e.releasePointerCapture(t.pointerId),null===(i=n.domElement)||void 0===i||i.ownerDocument.removeEventListener("pointermove",k),null===(r=n.domElement)||void 0===r||r.ownerDocument.removeEventListener("pointerup",V)),n.dispatchEvent(s),o=a.NONE}function W(t){Y(t)}function j(t){!1===n.enabled||!1===n.enableZoom||o!==a.NONE&&o!==a.ROTATE||(t.preventDefault(),n.dispatchEvent(r),function(t){t.deltaY<0?D(T()):t.deltaY>0&&L(T()),n.update()}(t),n.dispatchEvent(s))}function q(t){!1!==n.enabled&&!1!==n.enablePan&&function(t){let e=!1;switch(t.code){case n.keys.UP:C(0,n.keyPanSpeed),e=!0;break;case n.keys.BOTTOM:C(0,-n.keyPanSpeed),e=!0;break;case n.keys.LEFT:C(n.keyPanSpeed,0),e=!0;break;case n.keys.RIGHT:C(-n.keyPanSpeed,0),e=!0}e&&(t.preventDefault(),n.update())}(t)}function X(t){!1!==n.enabled&&t.preventDefault()}function Y(t){delete S[t.pointerId];for(let e=0;e<M.length;e++)if(M[e].pointerId==t.pointerId)return void M.splice(e,1)}function J(t){let e=S[t.pointerId];void 0===e&&(e=new Z,S[t.pointerId]=e),e.set(t.pageX,t.pageY)}function K(t){const e=t.pointerId===M[0].pointerId?M[1]:M[0];return S[e.pointerId]}void 0!==e&&this.connect(e),this.update()}}function Mh({center:t,radius:e,innerRadius:n,dashOptions:i,color:r}){return t instanceof Z&&(t=new vt(t.x,t.y,0)),i?function({center:t,radius:e,innerRadius:n,dashOptions:i,color:r}){const s=new Xe,a=[],o=[];let l=2*Math.PI*e,c=[];if(i.dashes){let t=i.spacing||.5,e=1/i.dashes;for(let n=0;n<i.dashes;n++){let i=n*e,r=i+e*t;i*=2*Math.PI,r*=2*Math.PI;let s=l*(.5*e);c.push([i,r,s])}}i.dashAngles&&(c=i.dashAngles);for(let i=0;i<c.length;i++){let s=c[i],l=s[2],h=Math.max(4,Math.floor(l/1)),u=(s[1]-s[0])/h;for(let i=0;i<h;i++){let l=s[0]+u*i,c=s[0]+u*(i+1),h=new vt(Math.cos(l)*e,Math.sin(l)*e,0).add(t),d=new vt(Math.cos(c)*e,Math.sin(c)*e,0).add(t);if(void 0===n||0===n)a.push(h.x,h.y,h.z),a.push(d.x,d.y,d.z),a.push(t.x,t.y,t.z);else{let e=new vt(Math.cos(l)*n,Math.sin(l)*n,0).add(t),i=new vt(Math.cos(c)*n,Math.sin(c)*n,0).add(t);a.push(h.x,h.y,h.z),a.push(e.x,e.y,e.z),a.push(i.x,i.y,i.z),a.push(h.x,h.y,h.z),a.push(d.x,d.y,d.z),a.push(i.x,i.y,i.z);for(let t=0;t<6;t++)o.push(r.x,r.y,r.z,r.w)}}}return s.setAttribute("position",new Oe(new Float32Array(a),3)),s.setAttribute("color",new Oe(new Float32Array(o),4)),s}({center:t,radius:e,innerRadius:n,dashOptions:i,color:r}):function({center:t,radius:e,innerRadius:n,color:i}){const r=new Xe,s=[],a=[];let o=2*Math.PI*e,l=Math.max(4,Math.floor(o/1));for(let r=0;r<l;r++){let o=(r+0)/l*(2*Math.PI),c=(r+1)/l*(2*Math.PI),h=new vt(Math.cos(o)*e,Math.sin(o)*e,0).add(t),u=new vt(Math.cos(c)*e,Math.sin(c)*e,0).add(t);if(void 0===n||0===n)s.push(h.x,h.y,h.z),s.push(u.x,u.y,u.z),s.push(t.x,t.y,t.z);else{let e=new vt(Math.cos(o)*n,Math.sin(o)*n,0).add(t),r=new vt(Math.cos(c)*n,Math.sin(c)*n,0).add(t);s.push(h.x,h.y,h.z),s.push(e.x,e.y,e.z),s.push(r.x,r.y,r.z),s.push(h.x,h.y,h.z),s.push(u.x,u.y,u.z),s.push(r.x,r.y,r.z);for(let t=0;t<6;t++)a.push(i.x,i.y,i.z,i.w)}}return r.setAttribute("position",new Oe(new Float32Array(s),3)),r.setAttribute("color",new Oe(new Float32Array(a),4)),r}({center:t,radius:e,innerRadius:n,color:r})}const Sh=new El,Th=new ds,Eh=new zn(3e4,3e4);Eh.rotateX(.5*Math.PI);const Ah=new dn(Eh,new Ie({color:16777215,side:2}));Th.add(Ah);let Ph,Rh,Ch,Lh,Dh=new vt,Ih=new Z,zh=!1;function Nh(t){Ph=t}function Oh(){return Dh.clone()}window.addEventListener("mousemove",(t=>{if(!Ph)return;zh=!0;let e=new Z(t.clientX/window.innerWidth*2-1,-t.clientY/window.innerHeight*2+1);Sh.setFromCamera(e,Ph);const n=Sh.intersectObjects(Th.children);n[0]&&(Dh=n[0].point,Ih=e)}));class Fh{constructor(t){let e=new st(Jc).convertSRGBToLinear(),n=new st(Yc).convertSRGBToLinear(),i=new st(Zc).convertSRGBToLinear(),r=new dt(e.r,e.g,e.b,.2);this.color1=r;let s=new dt(n.r,n.g,n.b,.5);new dt(n.r,n.g,n.b,.2),new dt(i.r,i.g,i.b,.2),this.day=t,this.trackPlanet4Rotation=0,this.trackPlanet5Rotation=0,this.ring1G=new Mh({center:new Z(0,0),radius:6,innerRadius:5.75,color:r}),this.ring1G.rotateX(.5*Math.PI),this.ring1G.translate(0,.5,0),this.ring2G=new Mh({center:new Z(0,0),radius:8,innerRadius:7.8,color:r}),this.ring2G.rotateX(.5*Math.PI),this.ring2G.translate(0,0,0),this.ring3G=new Mh({center:new Z(0,0),radius:15,innerRadius:14.75,dashOptions:{dashes:50,spacing:.15},color:s.multiply(new dt(2,1.75,1.5,1.5))}),this.ring3G.rotateX(.5*Math.PI),this.ring4G=new Mh({center:new Z(0,0),radius:22,innerRadius:21.75,color:r}),this.ring4G.rotateX(.5*Math.PI),this.ring4G.translate(0,-1.5,0),this.ring4hG=new Mh({center:new Z(0,0),radius:21,innerRadius:20.4,dashOptions:{dashes:3,spacing:.25},color:r}),this.ring4hG.rotateX(.5*Math.PI),this.ring4hG.translate(0,-1.5,0),this.ring5G=new Mh({center:new Z(0,0),radius:26,innerRadius:25.8,dashOptions:{dashes:150,spacing:.4},color:r}),this.ring5G.rotateX(.5*Math.PI),this.ring5G.translate(0,-2.7,0),this.ring6G=new Mh({center:new Z(0,0),radius:37,innerRadius:36.8,color:r.multiplyScalar(.65)}),this.ring6G.rotateX(.5*Math.PI),this.ring6aG=new Mh({center:new Z(0,0),radius:38,innerRadius:37.85,color:r.multiplyScalar(.75)}),this.ring6aG.rotateX(.5*Math.PI),this.ring6aG.translate(0,.5,0),this.ring7G=new Mh({center:new Z(0,0),radius:64,innerRadius:63.6,dashOptions:{dashes:150,spacing:.2},color:r.multiplyScalar(.75)}),this.ring7G.rotateX(.5*Math.PI),this.ring7G.translate(0,7===this.day?0:5,0),this.day<16&&(this.ring8G=new Mh({center:new Z(0,0),radius:45,innerRadius:44.75,color:r}),this.ring8G.rotateX(.5*Math.PI),this.ring8G.translate(0,0,0),this.ring9G=new Mh({center:new Z(0,0),radius:58,innerRadius:57.75,color:r}),this.ring9G.rotateX(.5*Math.PI),this.ring9G.translate(0,0,0)),this.speedMult=1,this.sizeMult=1;let a=1.5;this.colorMult=a,this.sunYoffset=1,this.prevSunYoffset=1,this.planet1G=this.getPlanet(.8,new st(2,1.5,.5).convertSRGBToLinear().multiplyScalar(.4*a),.5),this.planet1G.translate(0,this.sunYoffset,0),this.planet1G.rotateY(.8),this.planet2G=this.getPlanet(.5,new st(.7,1.1,1.5).convertSRGBToLinear().multiplyScalar(1.5),.35),this.planet2G.translate(7.9,0,0),this.planet2G.rotateY(-3.21),this.planet3G=this.getPlanet(.5,new st(.7,1.1,1.5).convertSRGBToLinear().multiplyScalar(.35*a),.5),this.planet3G.translate(14.85,0,0),this.planet3G.rotateY(-2.72);let o=2*Math.PI-.22;if(this.trackPlanet4Radius=21.85,this.planet4G=this.getPlanet(.5,new st(.7,1.1,1.5).convertSRGBToLinear().multiplyScalar(2.25),.5),this.planet4G.translate(this.trackPlanet4Radius,-1.5,0),this.planet4G.rotateY(o),this.trackPlanet4Rotation+=o,this.trackPlanet5Radius=25.9,this.planet5G=this.getPlanet(.5,new st(.7,1.1,1.5).convertSRGBToLinear().multiplyScalar(.35*a),.5),this.planet5G.translate(this.trackPlanet5Radius,-2.7,0),this.planet5G.rotateY(-.8),this.trackPlanet5Rotation+=-.8,this.trackPlanet6Radius=36.9,this.trackPlanet6Rotation=1.8,this.planet6G=this.getPlanet(.5,new st(.7,1.1,1.5).convertSRGBToLinear().multiplyScalar(.35*a),.5),this.planet6G.translate(this.trackPlanet6Radius,0,0),this.planet6G.rotateY(this.trackPlanet6Rotation),this.day<16){this.planet7G=this.getPlanet(.5,new st(.7,1.1,1.5).convertSRGBToLinear().multiplyScalar(.35*a),.5),this.planet7G.translate(45,0,0),this.planet7G.rotateY(1.89*Math.PI),this.planet8G=this.getPlanet(.5,new st(.7,1.1,1.5).convertSRGBToLinear().multiplyScalar(.35*a),.5),this.planet8G.translate(58,0,0),this.planet8G.rotateY(-.2*Math.PI);let t=2.17*Math.PI;this.trackPlanet9Rotation=t,this.trackPlanet9Radius=64,this.planet9G=this.getPlanet(.5,new st(.7,1.1,1.5).convertSRGBToLinear().multiplyScalar(.35*a),.5),this.planet9G.translate(this.trackPlanet9Radius,7===this.day?0:5,0),this.planet9G.rotateY(this.trackPlanet9Rotation)}this.mesh=new dn(this.ring2G,new Ie({vertexColors:!0,transparent:!0,opacity:1,side:2})),this.bloomMesh=new dn(this.ring2G,new Ie({vertexColors:!0,transparent:!0,opacity:1,side:2})),window.addEventListener("click",(()=>{7==this.day&&this.checkDay7Logic()}))}getPlanet(t,e,n){let i=new oo(t,15,15).toNonIndexed();delete i.attributes.normal,delete i.attributes.uv;let r=[];for(let t=0;t<i.attributes.position.array.length;t+=3)r.push(e.r,e.g,e.b,n);return i.setAttribute("color",new Oe(new Float32Array(r),4)),i}update(t,e){this.ring3G.rotateY(.05*t*this.speedMult),this.ring5G.rotateY(.05*-t*this.speedMult),this.ring7G.rotateY(.03*t*this.speedMult),this.sunYoffset!=this.prevSunYoffset&&(this.planet1G.dispose(),this.planet1G=this.getPlanet(.8*this.sizeMult,new st(2,1.5,.5).convertSRGBToLinear().multiplyScalar(.4*this.colorMult+.15*(this.sunYoffset-1)),.5),this.prevSunYoffset=this.sunYoffset,this.planet1G.translate(0,this.sunYoffset,0),this.ring6aG.dispose(),this.ring6aG=new Mh({center:new Z(0,0),radius:38+.95*(this.sunYoffset-1),innerRadius:37.85+.95*(this.sunYoffset-1),color:this.color1.clone().multiplyScalar(1/.75)}),this.ring6aG.rotateX(.5*Math.PI),this.ring6aG.translate(0,.5,0)),this.planet1G.rotateY(.035*-t*this.speedMult),this.planet2G.rotateY(.05*-t*this.speedMult),this.planet3G.rotateY(.05*t*this.speedMult);let n=.03*t*this.speedMult;this.planet4G.rotateY(n),this.trackPlanet4Rotation+=n;let i=.05*-t*this.speedMult;this.planet5G.rotateY(i),this.trackPlanet5Rotation+=i;let r=.02*t*this.speedMult;if(this.planet6G.rotateY(r),this.trackPlanet6Rotation+=r,this.day<16){this.planet7G.rotateY(-.035*t*this.speedMult),this.planet8G.rotateY(.044*t*this.speedMult);let e=.027*t*this.speedMult;this.planet9G.rotateY(e),this.trackPlanet9Rotation+=e}this.bloomMesh.geometry.dispose();let s=[this.ring3G,this.ring6G,this.ring6aG,this.planet1G,this.planet2G,this.planet3G,this.planet4G,this.planet5G,this.planet6G];this.day<16&&(s.push(this.planet7G),s.push(this.planet8G),s.push(this.planet9G)),this.bloomMesh.geometry=sh(s),this.mesh.geometry.dispose();let a=[this.bloomMesh.geometry,this.ring2G,this.ring4G,this.ring5G,this.ring7G];this.day<16&&(a.push(this.ring8G),a.push(this.ring9G)),this.mesh.geometry=sh(a)}wrapAngle(t){return t>Math.PI&&(t=-(Math.PI-(t-Math.PI))),t}checkDay7Logic(){let t=Oh(),e=t.length(),n=this.wrapAngle(Math.atan2(t.z,t.x));n=n>0?2*Math.PI-n:2*Math.PI-(2*Math.PI+n);let i=Math.abs(this.trackPlanet4Rotation)%(2*Math.PI),r=Math.abs(this.trackPlanet9Rotation)%(2*Math.PI);Math.abs(n-i)<.08&&Math.abs(e-this.trackPlanet4Radius)<1.5&&this.d7secondClick&&(this.d7firstClick=!0),Math.abs(n-r)<.08&&Math.abs(e-this.trackPlanet9Radius)<1&&(this.d7secondClick=!0),this.d7firstClick&&this.d7secondClick&&ch("day 7 logic")&&window.open("https://youtu.be/2GcMszgjCws","_blank")}}let Uh=kh(),Bh=0,Hh=!1,Gh=document.createElement("p");function kh(){return 1800*Math.random()+1800}Gh.classList.add("day8-label"),Gh.innerHTML="\n  They call us<br>\n  We can wait<br>\n  <br>\n  We are not in hurry<br>\n  <br>\n  They said we are just idea<br>\n  But we are everywhere\n",Fl("\n  .day8-label {\n    color: white;\n    font-family: monospace;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n  }\n");const Vh="\n  float rand(vec2 co){\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n  }\n";class Wh{constructor(t,r,s){this.stageManager=s;let a=new oo(55,50,50);a.rotateY(.25*-Math.PI),a.rotateZ(.5*Math.PI),a.translate(0,-40,0),this.mesh=new dn(a,new yn({uniforms:{uTime:{value:0},uMap:{value:(new ko).load(ku+"sacksspiral.jpg",(function(t){t.anisotropy=4,t.encoding=z,Gc.missingItems-=1}))}},vertexShader:"\n        varying vec3 vFragPos;\n        varying vec2 vUv;\n        varying vec3 vNormal;\n\n        void main() {\n          vUv = uv;\n          vFragPos = (modelMatrix * vec4(position, 1.0)).xyz;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          vNormal = normalMatrix * normal;\n        }\n      ",fragmentShader:`\n        uniform sampler2D uMap;\n        uniform float uTime;\n        \n        varying vec3 vFragPos;\n        varying vec3 vNormal;\n        varying vec2 vUv;\n\n        ${Kc}\n        ${Vh}\n\n        // const vec3 warmColor = pow(normalize(vec3(2.0, 1.35, 0.5)), vec3(2.2));\n        // const vec3 coolColor = pow(normalize(vec3(0.7, 1.1, 1.5)), vec3(2.2));\n\n        const vec3 warmColor = pow(vec3(2.0, 1.35, 0.5), vec3(2.2));\n        const vec3 coolColor = pow(vec3(0.7, 1.1, 1.5), vec3(2.2));\n\n        void main() {\n          vec2 uv = vUv * vec2(4.0, 2.0) + vec2(-2.0, -0.5);\n          // vec3 texel = pow(texture2D(uMap, uv).rgb, vec3(2.2));\n          vec3 texel = pow(texture2D(uMap, uv).rgb, vec3(1.0));\n\n          vec3 color;\n          float alpha = 0.0;\n\n          // float animT = mod(uTime * 2.75, 3.0);\n          // if(animT > 1.0 && animT < 1.35) {\n          //   float a = 0.0;\n          //   a += smoothstep(0.0, 0.175, animT - 1.0) * (1.0 - smoothstep(0.175, 0.35, animT - 1.0));\n          //   a *= pow(1.0 - smoothstep(1.0, 30.0, length(vFragPos.xz - vec2(17.0, 17.0))), 3.0);\n          //   color += coolColor * a;\n          // } \n          // if(animT > 1.5 && animT < 1.85) {\n          //   float a = 0.0;\n          //   a += smoothstep(0.0, 0.175, animT - 1.5) * (1.0 - smoothstep(0.175, 0.35, animT - 1.5));\n          //   a *= pow(1.0 - smoothstep(1.0, 30.0, length(vFragPos.xz - vec2(10.0, -12.0))), 3.0);\n          //   color += (warmColor + coolColor * 0.4) * a * 0.25;\n          // } \n          // if(animT > 1.85 && animT < 2.2) {\n          //   float a = 0.0;\n          //   a += smoothstep(0.0, 0.175, animT - 1.85) * (1.0 - smoothstep(0.175, 0.35, animT - 1.85));\n          //   a *= pow(1.0 - smoothstep(1.0, 30.0, length(vFragPos.xz - vec2(10.0, 22.0))), 3.0);\n          //   color += (coolColor) * a * 0.25;\n          // } \n\n\n\n          float animT = mod(uTime + 10.0, 20.0);\n          if(animT < 1.0) {\n            float targetY = 20.0 - smoothstep(0.0, 1.0, animT) * 25.0;\n            float dist = abs(targetY - vFragPos.y);\n            if(dist < 2.5) {\n              color = coolColor;\n              alpha = 1.0 - smoothstep(0.0, 2.5, dist); \n              alpha *= smoothstep(1.5, 20.0, vFragPos.y);\n              alpha *= smoothstep(1.5, 7.0, vFragPos.y) * 0.5 + 0.5;\n            }\n          } else if(animT >= 1.0 && animT < 10.0) {\n            float fadeAlpha = smoothstep(0.0, 1.5, animT - 1.0) * (1.0 - smoothstep(8.0, 9.0, animT - 1.0));\n            alpha = fadeAlpha;\n\n            float dist = length(vFragPos.xz);\n            float angle = atan(vFragPos.z, vFragPos.x) + dist * 0.2 + uTime * 0.1;\n            dist += sin(angle * 3.0) * 20.5;\n\n            float colorT = 1.0 - smoothstep(0.0, 60.0, dist);\n            color = mix(coolColor, warmColor, colorT);\n\n            alpha *= smoothstep(1.5, 20.0, vFragPos.y);\n            alpha *= smoothstep(1.5, 7.0, vFragPos.y) * 0.5 + 0.5;\n\n            float alphaNoise = (snoise(vFragPos * 0.01 + uTime * 0.2)) * fadeAlpha;\n            // alphaNoise = clamp(alphaNoise, 0.0, 1.0);\n            // alphaNoise *= 1.0 - smoothstep(0.0, 10.0, dist);\n            alphaNoise *= 1.0 - pow(smoothstep(0.0, 15.0, dist), 0.45);\n\n            alpha += alphaNoise * 1.75;\n            alpha = clamp(alpha, 0.0, 1.0);\n          }\n\n\n\n\n          // float dist = length(vFragPos.xz);\n          // float angle = atan(vFragPos.z, vFragPos.x) + dist * 0.2 + uTime * 0.1;\n\n          // dist += sin(angle * 3.0) * 20.5;\n\n          // float colorT = 1.0 - smoothstep(0.0, 60.0, dist);\n          // color = mix(coolColor, warmColor, colorT);\n\n          // alpha = smoothstep(1.5, 20.0, vFragPos.y);\n          // alpha *= smoothstep(1.5, 7.0, vFragPos.y) * 0.5 + 0.5;\n\n\n\n\n\n          gl_FragColor = vec4(texel * color, alpha);\n        }\n      `,transparent:!0,opacity:1,blending:5,blendEquation:e,blendSrc:i,blendDst:n}))}update(t,e){this.mesh.material.uniforms.uTime.value=e}}const jh={defines:{DEPTH_PACKING:1,PERSPECTIVE_CAMERA:1},uniforms:{tColor:{value:null},focus:{value:1},aspect:{value:1},aperture:{value:.025},maxblur:{value:.01},nearClip:{value:1},farClip:{value:1e3}},vertexShader:"\n\t\tvarying vec2 vUv;\n\t\tvoid main() {\n\t\t\tvUv = uv;\n\t\t\tgl_Position = vec4( position, 1.0 );\n\t\t}",fragmentShader:"\n\t\t#include <common>\n\t\tvarying vec2 vUv;\n\t\tuniform sampler2D tColor;\n\t\tuniform sampler2D tDepth;\n\t\tuniform float maxblur; // max blur amount\n\t\tuniform float aperture; // aperture - bigger values for shallower depth of field\n\t\tuniform float nearClip;\n\t\tuniform float farClip;\n\t\tuniform float focus;\n\t\tuniform float aspect;\n\t\t#include <packing>\n\t\tfloat getDepth( const in vec2 screenPosition ) {\n\t\t\t#if DEPTH_PACKING == 1\n\t\t\treturn unpackRGBAToDepth( texture2D( tDepth, screenPosition ) );\n\t\t\t#else\n\t\t\treturn texture2D( tDepth, screenPosition ).x;\n\t\t\t#endif\n\t\t}\n\t\tfloat getViewZ( const in float depth ) {\n\t\t\t#if PERSPECTIVE_CAMERA == 1\n\t\t\treturn perspectiveDepthToViewZ( depth, nearClip, farClip );\n\t\t\t#else\n\t\t\treturn orthographicDepthToViewZ( depth, nearClip, farClip );\n\t\t\t#endif\n\t\t}\n\t\tvec3 dithering( vec3 color ) {\n      float grid_position = rand( gl_FragCoord.xy );\n      vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n      dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n      return color + dither_shift_RGB;\n    }\n\t\tvoid main() {\n\t\t\tvec2 aspectcorrect = vec2( 1.0, aspect );\n\n\t\t\t// float viewZ = getViewZ( getDepth( vUv ) );\n\t\t\t// float factor = abs(vUv.y - 0.5); // ( focus + viewZ ); // viewZ is <= 0, so this is a difference equation\n\t\t\t\n\t\t\tfloat cDist = abs(vUv.y - 0.5);\n\t\t\tcDist = clamp((cDist - 0.1) / 0.4, 0.0, 1.0);\n\t\t\tfloat factor = pow(cDist, 2.0) * 0.35; \n\t\t\tfloat COLOR_MULTIPLIER = factor * 1.0;\n\n\t\t\tvec2 dofblur = vec2 ( clamp( factor * aperture, -maxblur, maxblur ) );\n\t\t\tvec2 dofblur9 = dofblur * 0.9;\n\t\t\tvec2 dofblur7 = dofblur * 0.7;\n\t\t\tvec2 dofblur4 = dofblur * 0.4;\n\t\t\tvec4 col = vec4( 0.0 );\n\t\t\tcol += texture2D( tColor, vUv.xy );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.15,  0.37 ) * aspectcorrect ) * dofblur9 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.37,  0.15 ) * aspectcorrect ) * dofblur9 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.37, -0.15 ) * aspectcorrect ) * dofblur9 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.15, -0.37 ) * aspectcorrect ) * dofblur9 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.40,  0.0  ) * aspectcorrect ) * dofblur7 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur7 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur7 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur7 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur7 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur7 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,  -0.4  ) * aspectcorrect ) * dofblur4 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29,  0.29 ) * aspectcorrect ) * dofblur4 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.4,   0.0  ) * aspectcorrect ) * dofblur4 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2( -0.29, -0.29 ) * aspectcorrect ) * dofblur4 );\n\t\t\tcol += texture2D( tColor, vUv.xy + ( vec2(  0.0,   0.4  ) * aspectcorrect ) * dofblur4 );\n\t\t\tgl_FragColor = col / 41.0;\n\t\t\tgl_FragColor *= 1.0 + COLOR_MULTIPLIER;\n\t\t\tgl_FragColor.rgb = dithering(gl_FragColor.rgb);\n\t\t\tgl_FragColor.a = 1.0;\n\t\t}"};class qh{constructor(t,e,n){this.rt=e,this.DOFmaterial=new yn({...jh}),this.DOFmaterial.uniforms.tColor.value=n,this.DOFmaterial.uniforms.maxblur.value=.01,this.DOFmaterial.uniforms.aperture.value=.04,this.DOFmaterial.uniforms.maxblur.value=100,this.DOFmaterial.uniforms.aspect.value=innerWidth/innerHeight,this.mesh=new dn(new zn(2,2),this.DOFmaterial),this.camera=new _n(45,1,1,1e3),this.renderer=t,this.scene=new ds,this.scene.add(this.mesh)}setSize(t,e){this.DOFmaterial.uniforms.aspect.value=t/e}compute(){this.renderer.setRenderTarget(this.rt),this.renderer.render(this.scene,this.camera),this.renderer.setRenderTarget(null)}}class Xh{constructor(t){let r=new zn(600,600);this.day=t,this.group=new is,this.plane=new dn(r,new yn({uniforms:{uTime:{value:0}},vertexShader:"\n        varying vec3 vFragPos;\n        varying vec2 vUv;\n        varying vec3 vNormal;\n\n        void main() {\n          vUv = uv;\n          vFragPos = (modelMatrix * vec4(position, 1.0)).xyz;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          vNormal = normalMatrix * normal;\n        }\n      ",fragmentShader:`\n        uniform float uTime;\n        \n        varying vec3 vFragPos;\n        varying vec3 vNormal;\n        varying vec2 vUv;\n\n        const vec3 warmColor = pow(vec3(2.0, 1.35, 0.5), vec3(2.2));\n        const vec3 coolColor = pow(vec3(0.7, 1.1, 1.5), vec3(2.2));\n\n        void main() {\n          vec3 color = mix(vec3(0.0), coolColor * ${10==this.day?.0075:.015}, 1.0 - smoothstep(0.0, 120.0, length(vFragPos.xz)));\n          gl_FragColor = vec4(color, 1.0);\n        }\n      `,transparent:!0,opacity:1,blending:5,blendEquation:e,blendSrc:i,blendDst:n})),this.plane.position.set(0,-20,0),this.plane.rotation.x=.5*-Math.PI,this.barsMaterial=new Ie({color:new st(.7,1.1,1.5),transparent:!0,opacity:.015,side:2,depthTest:!1}),this.ring1geo=new Mh({center:new Z(0,0),radius:35,innerRadius:25,dashOptions:{dashes:3,spacing:.5},color:new dt(1,1,1,1)}),this.ring1geo.rotateX(.5*Math.PI),this.ring1geo.translate(0,-10,0),this.ring1=new dn(this.ring1geo,this.barsMaterial);let s=[];for(let t=0;t<13;t++){let e=(t+3)/17,n=e,i=e+1/17*.7;n*=2*Math.PI,i*=2*Math.PI;let r=5;s.push([n,i,r])}this.ring2geo=new Mh({center:new Z(0,0),radius:45,innerRadius:34,dashOptions:{dashAngles:s},color:new dt(1,1,1,1)}),this.ring2geo.rotateX(.5*Math.PI),this.ring2geo.translate(0,-12.5,0),this.ring2=new dn(this.ring2geo,new Ie({color:new st(.7,1.1,1.5),transparent:!0,opacity:.005,side:2,depthTest:!1}));let a,o=[];for(let t=0;t<4;t++){let e=t/8,n=e,i=e+.0875;n*=2*Math.PI,i*=2*Math.PI;let r=10;o.push([n,i,r])}if(this.ring3geo=new Mh({center:new Z(0,0),radius:55,innerRadius:53,dashOptions:{dashAngles:o},color:new dt(1,1,1,1)}),this.ring3geo.rotateX(.5*Math.PI),this.ring3geo.translate(0,-1.5,0),this.ring3=new dn(this.ring3geo,new Ie({color:new st(.7,1.1,1.5),transparent:!0,opacity:.025,side:2,depthTest:!1})),11==t){a=new Xe;const t=[],e=[],n=100;for(let i=0;i<n;i++){let r=2*Math.PI*(i/n),s=2*Math.PI*((i+1)/n),a=i/n,o=(i+1)/n,l=17.5,c=20.5,h=-1,u=new vt(Math.cos(r)*l,h,Math.sin(r)*l),d=new vt(Math.cos(r)*c,h,Math.sin(r)*c),p=new vt(Math.cos(s)*l,h,Math.sin(s)*l),m=new vt(Math.cos(s)*c,h,Math.sin(s)*c);t.push(u.x,u.y,u.z,d.x,d.y,d.z,p.x,p.y,p.z,p.x,p.y,p.z,d.x,d.y,d.z,m.x,m.y,m.z),e.push(a,0,a,1,o,0,o,0,a,1,o,1)}a.setAttribute("position",new Oe(new Float32Array(t),3)),a.setAttribute("uv",new Oe(new Float32Array(e),2))}else{let t=[],e=0;for(let n=0;n<180;n++){let n=.005*Math.random();if(e+=n,e>=1)break;t.push([e*Math.PI*2,(e+n)*Math.PI*2,3]),e+=n,n=.005*Math.random(),e+=n}a=new Mh({center:new Z(0,0),radius:20.5,innerRadius:17.5,dashOptions:{dashAngles:t},color:new dt(1,1,1,1)}),a.rotateX(.5*Math.PI),a.translate(0,-1,0)}this.ring4geo=a,this.ring4=new dn(this.ring4geo,new Ie({color:new st(.7,1.1,1.5),transparent:!0,opacity:.025,side:2,depthTest:!1,map:11==t?(new ko).load(assetsPath+"barcode.gif",(t=>{t.anisotropy=4,Gc.missingItems-=1})):null})),this.group.add(this.plane),t>=11&&(this.group.add(this.ring1),this.group.add(this.ring2),this.group.add(this.ring3),this.group.add(this.ring4))}update(t,e){this.day>=11&&(this.ring1.rotation.y-=.1*t,this.ring2.rotation.y-=.04*t,this.ring3.rotation.y+=.04*t)}}class Yh{constructor(t,i){this.material=new yn({uniforms:{uTimeDay16Animation:{value:0},uTime:{value:0},uDay:{value:t}},vertexShader:"\n        attribute vec4 fx;\n\n        varying vec3 vFragPos;\n        varying vec3 vViewPos;\n        varying vec2 vUv;\n        varying vec4 vFx;\n        varying vec3 vNormal;\n\n        void main() {\n          vUv = uv;\n          vFx = fx;\n          vFragPos = (modelMatrix * vec4(position, 1.0)).xyz;\n          vViewPos = (modelViewMatrix * vec4(position, 1.0)).xyz;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          vNormal = normalMatrix * normal;\n        }\n      ",fragmentShader:`\n        varying vec3 vFragPos;\n        varying vec3 vViewPos;\n        varying vec3 vNormal;\n        varying vec2 vUv;\n        varying vec4 vFx;\n\n        uniform float uTime;\n        uniform float uTimeDay16Animation;\n        uniform float uDay;\n\n        ${Kc}\n        ${Vh}\n\n\n        void line2(float size, inout vec3 color, inout float alpha, bool displace) {\n          float yPos = vFragPos.y;\n\n          if(displace) {\n            yPos += snoise(vec3(vFragPos.xz * 0.3, uTime * 0.1)) * 1.5;\n          }\n\n          float displacement = snoise(vec3(yPos + uTime * 0.1, 0, 0) * 1.1) * 2.7892;\n          yPos += displacement;\n          yPos += vFx.x * 13.987;\n          float gridSize = 3.95;\n          float gridMod = mod(yPos, gridSize);\n          float gridCell = yPos - gridMod;\n\n          float dist = abs(gridMod - gridSize * 0.5);\n          if(dist < size) {\n            alpha += (1.0 - smoothstep(0.0, size, dist));\n\n            if(uDay != 16.0) {\n              color += vec3(0.4, 0.2, 0.1).zyx * 2.5;\n            } else {\n              color += vec3(0.4, 0.2, 0.1).xyz * 3.5;\n            }\n          }\n        }\n\n        void line3(float size, inout vec3 color, inout float alpha) {\n          float yPos = vFragPos.y;\n\n          // float displacement = snoise(vFragPos * 0.1) * 13.7892;\n          // displacement = snoise(vec3(displacement) * 0.1) * 13.7892;\n          float displacement = snoise(vec3(vFragPos.y + uTime * 0.1, 0, 0) * 1.1) * 2.7892;\n          yPos += displacement;\n          yPos += vFx.x * 13.987;\n          float gridSize = 10.5;\n          float gridMod = mod(yPos, gridSize);\n          float gridCell = yPos - gridMod;\n\n          float dist = abs(gridMod - gridSize * 0.5);\n          if(dist < size) {\n            alpha += (1.0 - smoothstep(0.0, size, dist)) * 0.1;\n            if(vFx.x == 1.0) {\n              color += vec3(0.14, 0.27, 0.3);\n            } else {\n              color += vec3(0.4, 0.2, 0.1);\n            }\n          }\n        }\n\n        void main() {\n          vec3 color = vec3(0.0);\n          float alpha = 0.0;\n          float yP = vFragPos.y; \n\n          bool displace = false;\n          if(uDay == 16.0 && vFx.x == 0.0) {\n            displace = true;\n          }\n\n          line2(0.35, color, alpha, displace);\n          line3(1.7 + (fract(vFx.x * 13.987) * 2.0 - 1.0) * 0.5, color, alpha);\n\n\n          // normal dissipation factor\n          float angle = 1.0 - abs(dot(normalize(vViewPos), normalize(vNormal)));\n          float ndfAlpha = smoothstep(0.0, 1.0, pow(angle, 2.0)) * 0.25 + 0.01;\n          alpha = ndfAlpha;\n\n          if(vFx.x == 0.0) alpha *= 2.2;\n          if(vFx.x == 0.0 && uDay != 16.0) color *= 0.0;\n          if(vFx.x == 1.0) alpha *= 0.4;\n          if(vFx.x == 2.0) alpha *= 1.5;\n\n          if(uDay == 16.0 && vFx.x == 0.0) {\n            color *= smoothstep(5.0, 12.0, yP) * (1.0 - smoothstep(5.0, 12.0, yP)) * 3.0;\n          }\n\n          if(vFx.x == 0.0) {\n\n            float t1 = (1.0 - smoothstep(-2.0, 17.0, yP));\n            float t2 = smoothstep(-2.0, 1.0, yP);\n            float a2 = t1 * t2;\n            a2 *= 0.15;\n\n            color -= vec3(0.1, 0.25, 0.77) * a2;\n            // color -= vec3(0.25, 0.35, 0.45).zyx * a2;\n            // color += vec3(0.1, 0.25, 0.77) * a2;\n\n            alpha += (1.0 - ndfAlpha) * (a2 + 0.25);\n            alpha *= 0.4;\n\n            if(uDay == 16.0) {\n              color += vec3(0.1, 0.25, 0.77) * a2 * 10.0;\n              alpha *= smoothstep(0.0, 0.1, uTimeDay16Animation) * (1.0 - smoothstep(0.95, 1.0, uTimeDay16Animation));\n            }\n          }\n\n          if(vFragPos.y < -2.0) {\n            alpha = 0.0;\n          }\n\n          gl_FragColor = vec4(color, alpha);\n        }\n      `,blend:5,blendEquation:e,blendDst:n,blendDstAlpha:n,blendSrcAlpha:n,blendSrc:r,side:2,transparent:!0,depthWrite:!1}),this.day=t,this.stageManager=i,16!=this.day?this.constructFinalGeo():this.constructPartialGeo()}constructFinalGeo(){let t,e=1;this.day>12&&(e=3);for(let n=0;n<e;n++){let e,i,r;2==n&&(e=17,i=0,r=0),1==n&&(e=12,i=0,r=1),0==n&&(e=7,i=0,r=2);let s=new oo(e,40,40);s.translate(0,i,0);let a=[];for(let t=0;t<s.attributes.position.count;t++)a.push(r,0,0,0);s.setAttribute("fx",new Oe(new Float32Array(a),4)),t=t?sh([t,s]):s}this.mesh=new dn(t,this.material)}constructPartialGeo(t){let e;for(let n=0;n<3;n++){let i=17+5.7*t,r=0;0==n&&(this.outerSphereRad=i),1==n&&(i=12,r=0),2==n&&(i=7,r=0);let s=new oo(i,40,40);s.translate(0,r,0);let a=[];for(let t=0;t<s.attributes.position.count;t++)a.push(n,0,0,0);s.setAttribute("fx",new Oe(new Float32Array(a),4)),e=e?sh([e,s]):s}this.mesh?(this.mesh.geometry.dispose(),this.mesh.geometry=e):this.mesh=new dn(e,this.material)}wrapAngle(t){return t>Math.PI&&(t=-(Math.PI-(t-Math.PI))),t}update(t,e){if(this.material.uniforms.uTime.value=e,16==this.day){let t=e%8.6/8.6;this.constructPartialGeo(t),this.material.uniforms.uTimeDay16Animation.value=t;let n=Oh(),i=n.length(),r=this.wrapAngle(Math.atan2(n.z,n.x));r=r>0?2*Math.PI-r:2*Math.PI-(2*Math.PI+r);let s=Math.abs(this.stageManager.solarSystem.trackPlanet4Rotation)%(2*Math.PI);if(Math.abs(r-s)<.2&&Math.abs(i-this.stageManager.solarSystem.trackPlanet4Radius)<2.5&&Math.abs(i-this.outerSphereRad)<.5&&ch("day 16 video")){let t=Math.random();t<=.01?window.open("https://www.youtube.com/watch?v=2ZRXnGkuGYU","_blank"):t<.4?window.open("https://www.youtube.com/watch?v=NR-H2uFCQls","_blank"):t<.9?window.open("https://www.youtube.com/watch?v=-epTB8PCF_A","_blank"):window.open("https://www.youtube.com/watch?v=D0mQIBJ4fF8","_blank")}}}}class Zh{constructor(t,e){this.day=e;let n=new yn({uniforms:{uTime:{value:0},uPullDown:{value:0},uWaveStrength:{value:0},uOffs:{value:new dt(0,0,0,0)},depthWrite:!1,depthTest:!1},vertexShader:"\n      uniform float uPullDown;\n\n      varying vec3 vFragPos;\n      \n      void main() {\n        vFragPos = (modelMatrix * vec4(position, 1.0)).xyz;\n\n        float dist = length(vFragPos.xz);\n        // float dispDist = 65.0 - min(max(dist, 5.0), 65.0);\n        // vFragPos.y -= pow(dispDist, 2.0) * 0.015;\n        // vFragPos.y -= pow(dispDist, 1.5) * 0.02;\n        // vFragPos.y -= pow(dispDist, 1.2) * 0.04;\n\n        float dispDist = 120.0 - min(max(dist, 5.0), 120.0);\n        vFragPos.y -= pow(pow(dispDist * 0.02, 2.0), 2.0) * 3.5 * uPullDown;\n\n        gl_Position = projectionMatrix * viewMatrix * vec4(vFragPos, 1.0);\n      }\n    ",fragmentShader:`\n      #define PI 3.141592653589793\n      #define PI2 6.283185307179586\n      #define PI_HALF 1.5707963267948966\n      \n      varying vec3 vFragPos;\n      \n      uniform float uTime;\n      uniform vec4 uOffs;\n      uniform float uWaveStrength;\n      \n      highp float rand( const in vec2 uv ) {\n        const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n        highp float dt = dot( uv.xy, vec2( a, b ) ), sn = mod( dt, PI );\n        return fract( sin( sn ) * c );\n      }\n      \n      ${Kc}\n      ${Qc}\n      \n      vec3 distortPosition(vec3 position) {\n        float animT = mod(uTime, 10.0);\n        float animStrength = uWaveStrength;\n      \n        float cDist = length(position);\n        position.xz = rotate(position.xz, sin(cDist * 0.25) * cDist * 0.0005 * animStrength);\n      \n        return position;\n      }\n\n      const vec3 warmColor = pow(vec3(2.0, 1.35, 0.5), vec3(2.2));\n      const vec3 coolColor = pow(vec3(0.7, 1.1, 1.5), vec3(2.2));\n      \n      void main() {\n        float fpDist = length(vFragPos.xz);\n        \n        float alpha = 0.0;\n        vec3 tPosition = distortPosition(vFragPos);\n        float cDist = length(tPosition.xz);\n      \n        float angle = atan(tPosition.z, tPosition.x);\n        float anglemod = mod(angle, PI2 / 25.0);\n      \n        float modlimit = (0.01 / (1.0 + cDist * 0.01) );\n        // lines closer to the viewer will be bigger to ameliorate aliasing\n        if(cDist > 15.0 && cDist < 80.0) {\n          modlimit *= 1.0 + (1.0 - smoothstep(15.0, 80.0, cDist)) * 1.0;\n        }\n      \n        // line drawer\n        if(anglemod < modlimit) {\n          if(anglemod < modlimit * 0.5) {\n            alpha += smoothstep(0.0, modlimit * 0.5, anglemod);\n          } else {\n            alpha += 1.0 - smoothstep(modlimit * 0.5, modlimit, anglemod);\n          }\n      \n      \n          // animation\n          float cell = angle - anglemod;\n          // lineAnimT = [0.0, 40.0]\n          float lineAnimT = mod( uTime + rand(vec2(cell)) * 20.0, 20.0 );\n          float targetDist = 100.0 + lineAnimT * 100.0;\n          float animDist = abs(cDist - targetDist);\n          if(animDist < 10.0) {\n            alpha *= (1.0 - smoothstep(0.0, 10.0, animDist)) * 5.0;\n          }\n        }\n      \n        float circleMod = mod(fpDist + uTime * 3.0, 10.0);\n        // float circleMod = mod(fpDist, 3.5 + pow(fpDist * 0.02, 2.0));\n        // float circleMod = mod(fpDist, 8.0);\n        if(circleMod < 0.3) {\n          float cmdist = abs(circleMod - 0.15);\n          alpha += (1.0 - smoothstep(0.0, 0.15, cmdist)) * 0.25;\n        }\n     \n      \n        if(cDist > 200.0 && cDist < 201.0) {\n          alpha += 0.5;\n        }\n        if(cDist > 205.0 && cDist < 206.0) {\n          alpha += 0.45;\n        }\n      \n        // distance based opacity reduction;\n        // alpha *= exp(-cDist * 0.0035);\n      \n        // alpha *= 0.075;\n        alpha *= 0.035;\n      \n        vec3 gridColor = vec3(0.5, 0.8, 1.0) * alpha;\n\n\n\n        gridColor += coolColor * 0.015 *\n          smoothstep(10.0, 40.0, cDist) *\n          ( 1.0 - smoothstep(40.0, 120.0, cDist) );\n      \n        gl_FragColor = vec4(gridColor, 1.0);\n      }\n      `,transparent:!0,side:2});this.mesh=new dn(new so(.1,65,60,40),n),this.mesh.rotation.x=.5*-Math.PI,this.mesh.position.set(0,-5,0),this.mesh2=new dn(new so(65,120,30,40),n),this.mesh2.rotation.x=.5*-Math.PI,this.mesh2.position.set(0,-5,0),this.mesh3=new dn(new so(120,250,5,1),n),this.mesh3.rotation.x=.5*-Math.PI,this.mesh3.position.set(0,-5,0),this.group=new is,14==e&&(this.image=new dn(new zn(7.2,9.375),new Ie({map:(new ko).load(assetsPath+"Srinivasa_Ramanujan.jpg"),transparent:!0,side:2})),this.image.position.set(0,0,20),this.group.add(this.image)),this.camera=t,this.group.add(this.mesh),this.group.add(this.mesh2),this.group.add(this.mesh3),this.animStart=!1,this.animVal=0,this.keyListenerLogic()}update(t,e){this.animStart&&(this.animVal+=.3*t,this.animVal>1&&(this.animVal=1));let n=(e+15)%300;if(n<10&&14==this.day){let t=Math.atan2(this.camera.position.z,this.camera.position.x);t+=.7*Math.PI;let e=65;this.image.position.set(Math.cos(t)*e,0,Math.sin(t)*e),this.image.rotation.y=-t+.25*Math.PI,this.image.material.visible=!0,this.image.material.opacity=n<.35?n/.35:n>9.65?1-(n-9.65)/.35:1,this.image.material.opacity*=.1}else 14==this.day&&(this.image.material.visible=!1);this.mesh.material.uniforms.uTime.value+=t*this.animVal*.3,this.mesh2.material.uniforms.uTime.value+=t*this.animVal*.3,this.mesh3.material.uniforms.uTime.value+=t*this.animVal*.3,this.mesh.material.uniforms.uPullDown.value=ph(this.animVal),this.mesh2.material.uniforms.uPullDown.value=ph(this.animVal),this.mesh3.material.uniforms.uPullDown.value=ph(this.animVal)}keyListenerLogic(){let t="";window.addEventListener("keypress",(e=>{t="R"!=e.key&&"r"!=e.key||""!=t?"A"!=e.key&&"a"!=e.key||"r"!=t?"M"!=e.key&&"m"!=e.key||"ra"!=t?"A"!=e.key&&"a"!=e.key||"ram"!=t?"N"!=e.key&&"n"!=e.key||"rama"!=t?"U"!=e.key&&"u"!=e.key||"raman"!=t?"J"!=e.key&&"j"!=e.key||"ramanu"!=t?"A"!=e.key&&"a"!=e.key||"ramanuj"!=t?"N"!=e.key&&"n"!=e.key||"ramanuja"!=t?"":"ramanujan":"ramanuja":"ramanuj":"ramanu":"raman":"rama":"ram":"ra":"r","ramanujan"==t&&(this.animStart=!0)}))}}class Jh{constructor(t,e,n){e.oncanplay=()=>{Gc.missingItems-=1},this.material=new yn({uniforms:{uTvTexture:{type:"t",value:(new ko).load(assetsPath+"tv2.jpg",(t=>{Gc.missingItems-=1}))},uTvMaskTexture:{type:"t",value:(new ko).load(assetsPath+"tv2mask.jpg",(t=>{Gc.missingItems-=1}))},uColorTexture:{type:"t",value:n.texture},uVideoTexture:{type:"t",value:new sa(e)},uChannel:{value:1},uAspect:{value:innerWidth/innerHeight},tvImageAspect:{value:1009/768}},vertexShader:"\n                varying vec2 vUv;\n\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4(position.xy, 0.0, 1.0);    \n                }\n            ",fragmentShader:"\n                uniform sampler2D uTvTexture;\n                uniform sampler2D uTvMaskTexture;\n                uniform sampler2D uColorTexture;\n                uniform sampler2D uVideoTexture;\n                uniform float uChannel;\n                uniform float uAspect;\n                uniform float tvImageAspect;\n\n                varying vec2 vUv;\n\n                void main() {\n                    vec2 uv = vUv;\n                    if(uAspect > tvImageAspect) {\n                        uv.x *= uAspect / tvImageAspect;\n                        float buff = (uAspect / tvImageAspect - 1.0) * 0.5;\n                        uv.x -= buff;\n                    } else {\n                        uv.y *= tvImageAspect / uAspect;\n                        float buff = (tvImageAspect / uAspect - 1.0) * 0.5;\n                        uv.y -= buff;\n                    }\n\n                    if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {\n                        gl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n                        return;\n                    }\n\n                    vec3 tv = texture2D(uTvTexture, uv).xyz;\n                    vec3 tvMask = texture2D(uTvMaskTexture, uv).xyz;\n                    \n                    vec2 colorUv = uv * vec2(1.7) + vec2(-0.3, -0.475);\n                    if(uAspect > tvImageAspect) {\n                        colorUv.x *= tvImageAspect / uAspect;\n                        colorUv.x += (1.0 - tvImageAspect / uAspect) * 0.5;\n                    } else {\n                        colorUv.y *= uAspect / tvImageAspect;\n                        colorUv.y += (1.0 - uAspect / tvImageAspect) * 0.5;\n                    }\n                    vec3 color = texture2D(uColorTexture, colorUv).xyz;\n\n\n                    vec2 videoUv = uv * vec2(1.44) + vec2(-0.16, -0.34);\n                    vec3 video = texture2D(uVideoTexture, videoUv).xyz;\n\n\n                    color = mix(color, video, uChannel);\n\n\n                    vec3 finalColor = mix(tv, color, tvMask.y);\n\n                    gl_FragColor = vec4(finalColor, 1.0);  \n                }\n            ",depthTest:!1,depthWrite:!1}),this.mesh=new dn(new zn(2,2),this.material),this.camera=new _n(45,1,1,1e3),this.renderer=t,this.scene=new ds,this.scene.add(this.mesh),this.channel=1,window.addEventListener("click",(t=>{if(1==this.channel){let t=100*Math.random();if(this.updateText(Math.round(t)),Math.abs(t-37)>.5)return}let e=t.clientX/innerWidth,n=1-t.clientY/innerHeight,i=this.material.uniforms.uAspect.value,r=this.material.uniforms.tvImageAspect.value;i>r?(e*=i/r,e-=.5*(i/r-1)):(n*=r/i,n-=.5*(r/i-1)),e>.82&&e<.84&&n>.69&&n<.72&&(this.channel=(this.channel+1)%2)}))}blit(t,e,n){0===this.channel&&this.material.uniforms.uChannel.value>0&&(this.material.uniforms.uChannel.value-=7.5*t,this.material.uniforms.uChannel.value<0&&(this.material.uniforms.uChannel.value=0)),1===this.channel&&this.material.uniforms.uChannel.value<1&&(this.material.uniforms.uChannel.value+=7.5*t,this.material.uniforms.uChannel.value>1&&(this.material.uniforms.uChannel.value=1)),this.renderer.setRenderTarget(n),this.renderer.render(this.scene,this.camera),this.renderer.setRenderTarget(null)}positionText(){let t=this.material.uniforms,e=.829,n=.703;t.uAspect.value>t.tvImageAspect.value?(e+=.5*(t.uAspect.value/t.tvImageAspect.value-1),e/=t.uAspect.value/t.tvImageAspect.value):(n+=.5*(t.tvImageAspect.value/t.uAspect.value-1),n/=t.tvImageAspect.value/t.uAspect.value),this.pEl.style.top=(1-n)*innerHeight+"px",this.pEl.style.left=e*innerWidth+"px"}updateText(t){ch("tv-pass-text-append")&&(this.pEl=document.createElement("p"),this.pEl.classList.add("tv-pass-el"),Fl("\n                .tv-pass-el {\n                    position: absolute;\n                    font-size: 9px;\n                    font-family: monospace;\n                    // color: white;\n                    color: black;\n\n                    pointer-events: none;\n\n                    top: 50px;\n                    left: 50px;\n                    transform: translate(-50%, -50%);\n                    margin: 0;\n                }\n            "),document.body.appendChild(this.pEl),this.positionText()),this.pEl.textContent=t}}const Kh=.5*(Math.sqrt(3)-1),Qh=(3-Math.sqrt(3))/6,$h=1/6,tu=(Math.sqrt(5)-1)/4,eu=(5-Math.sqrt(5))/20,nu=new Float32Array([1,1,0,-1,1,0,1,-1,0,-1,-1,0,1,0,1,-1,0,1,1,0,-1,-1,0,-1,0,1,1,0,-1,1,0,1,-1,0,-1,-1]),iu=new Float32Array([0,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,1,0,1,1,1,0,1,-1,1,0,-1,1,1,0,-1,-1,-1,0,1,1,-1,0,1,-1,-1,0,-1,1,-1,0,-1,-1,1,1,0,1,1,1,0,-1,1,-1,0,1,1,-1,0,-1,-1,1,0,1,-1,1,0,-1,-1,-1,0,1,-1,-1,0,-1,1,1,1,0,1,1,-1,0,1,-1,1,0,1,-1,-1,0,-1,1,1,0,-1,1,-1,0,-1,-1,1,0,-1,-1,-1,0]);class ru{constructor(t,r,s){this.stageManager=s;let a=new zn(20,60);a.rotateX(.5*-Math.PI),a.translate(-.35,1,-4.25),a.scale(.8,.8,.8),this.mesh=new dn(a,new Ie({map:(new ko).load(ku+"compass2.png",(function(t){t.anisotropy=4,t.encoding=z,Gc.missingItems-=1})),transparent:!0,opacity:.25,blending:5,blendEquation:e,blendSrc:i,blendDst:n}));let o=new aa(20,50);o.rotateX(.5*-Math.PI),this.mesh2=new dn(o,new Ie({transparent:!0,opacity:0})),this.mesh2.position.set(0,-3,0);let c=new zn(100,100);c.rotateX(.5*-Math.PI),c.translate(0,-2,0),this.mesh3=new dn(c,new Ie({map:(new ko).load(ku+"cout8.png",(function(t){t.anisotropy=4,t.encoding=z,Gc.missingItems-=1})),transparent:!0,color:new st(.75,.85,1).convertSRGBToLinear(),opacity:.25,blending:5,blendEquation:e,blendSrc:i,blendDst:n}));let h=new oa(22.5,17.5,6,50,1,!0);h.translate(0,-1,0),this.mesh4=new dn(h,new Ie({map:(new ko).load(ku+"circle_t2.png",(function(t){t.anisotropy=4,t.encoding=z,t.wrapS=l,t.wrapT=l,t.repeat=new Z(60,3),Gc.missingItems-=1})),transparent:!0,side:2,color:new st(1,.65,.45).convertSRGBToLinear(),opacity:.15,depthWrite:!1,blending:5,blendEquation:e,blendSrc:i,blendDst:n}));let u=new oa(53.5,46,8,50,1,!0);this.mesh5=new dn(u,new Ie({map:(new ko).load(ku+"circle_t2.png",(function(t){t.anisotropy=4,t.encoding=z,t.wrapS=l,t.wrapT=l,t.repeat=new Z(150,4)})),transparent:!0,side:2,color:new st(.65,.85,1).convertSRGBToLinear(),opacity:.075,depthWrite:!1,blending:5,blendEquation:e,blendSrc:i,blendDst:n})),this.angle=0,this.angle2=0,this.day=r,this.hasSpin3Times=!1,this.cumulativeSpin=0,this.autoSpinAnimT=0,this.trackPlanetCounter=0}sanitizeAngle(t,e){let n=e-t;return Math.abs(n)>Math.PI&&(t>0&&(e=Math.PI+(Math.PI+e)),t<0&&(e=-Math.PI-(Math.PI-e))),this.cumulativeSpin+=t-e,Math.abs(this.cumulativeSpin)>360&&(this.hasSpin3Times=!0),(t=.95*t+.05*e)>Math.PI&&(t=-(Math.PI-(t-Math.PI))),t<-Math.PI&&(t=Math.PI+(Math.PI+t)),t}day18animation(t){this.autoSpinAnimT+=.3*t;let e=(n=mh.clamp(this.autoSpinAnimT%1/.25,0,1))<.5?8*n*n*n*n:1-Math.pow(-2*n+2,4)/2;var n;if(this.autoSpinAnimT<1){let t=.08*Math.PI;this.angle=.95*Math.abs(this.angle)+.05*t}else if(this.autoSpinAnimT<2){let t=.08*Math.PI,n=-.08*Math.PI;this.angle=t*(1-e)+n*e}else if(this.autoSpinAnimT<3){let t=-.08*Math.PI,n=-.16*Math.PI;this.angle=t*(1-e)+n*e}else if(this.autoSpinAnimT<4){let t=-.16*Math.PI,n=-.48*Math.PI;this.angle=t*(1-e)+n*e}else if(this.autoSpinAnimT<5){let t=-.48*Math.PI,n=-.08*Math.PI;this.angle=t*(1-e)+n*e}else if(this.autoSpinAnimT<6){let t=-.08*Math.PI,n=-.56*Math.PI;this.angle=t*(1-e)+n*e}else if(this.autoSpinAnimT<7){let t=-.56*Math.PI,n=-.64*Math.PI;this.angle=t*(1-e)+n*e}else if(this.autoSpinAnimT<8){let t=-.64*Math.PI,n=-1.76*Math.PI;this.angle=t*(1-e)+n*e}else if(this.autoSpinAnimT<9){let t=-1.76*Math.PI,n=-1.92*Math.PI;this.angle=t*(1-e)+n*e}else this.autoSpinAnimT=1,this.angle=.08*Math.PI;this.angle2=.95*this.angle2,this.mesh.rotation.y=-this.angle-.465*Math.PI,this.mesh3.rotation.y=.1*this.angle2}update(t,e){if(this.iPoint=Oh(),17==this.day||this.day>=18&&!this.hasSpin3Times){let t=Math.atan2(this.iPoint.z,this.iPoint.x),e=this.angle;this.angle=this.sanitizeAngle(this.angle,t);let n=this.angle-e;Math.abs(n)>Math.PI&&(n=0),this.angle2+=n,this.mesh.rotation.y=-this.angle-.465*Math.PI,this.mesh3.rotation.y=.1*this.angle2}else this.day>=18&&this.hasSpin3Times&&this.day18animation(t);if(this.day>=17){let e=this.angle;e<0&&(e=2*Math.PI+this.angle);let n=Math.abs(this.stageManager.solarSystem.trackPlanet5Rotation)%(2*Math.PI);Math.abs(e-n)<.1?(this.trackPlanetCounter+=t,this.trackPlanetCounter>10&&ch("track-planet-song")&&this.stageManager.audioManager.loadAndPlay(ku+"code.wav",.0375)):this.trackPlanetCounter=0}}}let su=0;class au{constructor(t,e){this.texturePath=t,this.jsonPath=e,this.material=new yn({uniforms:{map:{type:"t",value:null},atlasSize:{type:"t",value:new Z(0,0)}},vertexShader:"\n        attribute vec3 color;\n\n        varying vec2 vUv;\n        varying vec3 vColor;\n\n        void main() {\n          vUv = uv;\n          vColor = color;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      ",fragmentShader:"\n        uniform sampler2D map; \n        uniform vec2 atlasSize; \n  \n        varying vec2 vUv;\n        varying vec3 vColor;\n\n        float median(float r, float g, float b) {\n          return max(min(r, g), min(max(r, g), b));\n        }\n\n        float screenPxRange() {\n          const float pxRange = 1.0;\n          vec2 unitRange = vec2(pxRange)/atlasSize;\n          vec2 screenTexSize = vec2(1.0)/fwidth(vUv);\n          return max(0.5*dot(unitRange, screenTexSize), 1.0);\n        }\n\n        void main() {\n          vec3 msd = texture2D(map, vUv).rgb;\n          float sd = median(msd.r, msd.g, msd.b);\n          float screenPxDistance = screenPxRange() * (sd - 0.5);\n          float opacity = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n          // float opacity = clamp(sd - 0.5, 0.0, 1.0);\n\n          gl_FragColor = vec4(vColor, opacity);\n        }\n      ",transparent:!0,depthWrite:!1,side:2})}setCustomMaterial(t){this.material=t}async init(){this.texture=await(new ko).loadAsync(this.texturePath),Gc.missingItems-=1,this.texture.minFilter=d,this.texture.magFilter=d,this.fontData=await(await fetch(this.jsonPath)).json(),Gc.missingItems-=1,this.material.uniforms.map.value=this.texture,this.material.uniforms.atlasSize.value=new Z(this.fontData.common.scaleW,this.fontData.common.scaleH),this.remapCharStructure(),console.log(this.texture),console.log(this.fontData)}remapCharStructure(){this.fontData.rChars={},this.fontData.chars.forEach((t=>{this.fontData.rChars[t.char]=t}))}getTextGeometry(t,{fontSize:e=1,letterSpacing:n=0,color:i=new vt(1,1,1)}){const r=this.fontData.common.scaleW,s=this.fontData.common.scaleH,a=new Xe,o=[],l=[],c=[],h=[];let u=0,d=e;for(let e=0;e<t.length;e++){const a=t[e],p=this.fontData.rChars[a],m=p.width,f=p.height;let g=p.xoffset,v=42-f-p.yoffset;const y=p.x/r,x=1-(p.y/s+f/s),_=p.x/r+m/r,w=1-p.y/s,b=new Z(u+g,v).multiplyScalar(d),M=new Z(u+g+m,v).multiplyScalar(d),S=new Z(u+g,v+f).multiplyScalar(d),T=new Z(u+g+m,v+f).multiplyScalar(d);o.push(b.x,b.y,0,M.x,M.y,0,S.x,S.y,0,T.x,T.y,0,S.x,S.y,0,M.x,M.y,0),l.push(y,x,_,x,y,w,_,w,y,w,_,x),c.push(su,0,0,0,su,0,0,0,su,0,0,0,su,0,0,0,su,0,0,0,su,0,0,0),h.push(i.x,i.y,i.z,i.x,i.y,i.z,i.x,i.y,i.z,i.x,i.y,i.z,i.x,i.y,i.z,i.x,i.y,i.z),u+=p.xadvance+n,su+=1}return a.setAttribute("position",new Oe(new Float32Array(o),3)),a.setAttribute("uv",new Oe(new Float32Array(l),2)),a.setAttribute("fx",new Oe(new Float32Array(c),4)),a.setAttribute("color",new Oe(new Float32Array(h),3)),a.computeBoundingBox(),a}getMaterial(){}}class ou{constructor(){this.text=new au(ku+"Roboto-Light.png",ku+"Roboto-Light.json"),this.material=new yn({uniforms:{map:{type:"t",value:null},atlasSize:{type:"t",value:new Z(0,0)},time:{value:0}},vertexShader:"\n        attribute vec4 fx;\n        attribute vec3 color;\n\n        varying vec2 vUv;\n        varying vec4 vFx;\n        varying vec3 vColor;\n\n        void main() {\n          vUv = uv;\n          vFx = fx;\n          vColor = color;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n        }\n      ",fragmentShader:"\n        uniform sampler2D map; \n        uniform vec2 atlasSize; \n        uniform float time; \n  \n        varying vec4 vFx;\n        varying vec2 vUv;\n        varying vec3 vColor;\n\n        float median(float r, float g, float b) {\n          return max(min(r, g), min(max(r, g), b));\n        }\n\n        float screenPxRange() {\n          const float pxRange = 1.0;\n          vec2 unitRange = vec2(pxRange)/atlasSize;\n          vec2 screenTexSize = vec2(1.0)/fwidth(vUv);\n          return max(0.5*dot(unitRange, screenTexSize), 1.0);\n        }\n\n        float rand(vec2 co){\n          return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\n        }\n\n        void main() {\n          vec3 msd = texture2D(map, vUv).rgb;\n          float sd = median(msd.r, msd.g, msd.b);\n          float screenPxDistance = screenPxRange() * (sd - 0.5);\n          float opacity = clamp(screenPxDistance + 0.5, 0.0, 1.0);\n          // float opacity = clamp(sd - 0.5, 0.0, 1.0);\n\n          vec3 color = vColor; \n\n          opacity *= sin(time * 2.0 + rand(vFx.xy) * 16.0) * 0.4 + 0.4 + 0.2;\n\n          gl_FragColor = vec4(color, opacity);\n        }\n      ",transparent:!0,depthWrite:!1,side:2}),this.text.setCustomMaterial(this.material)}async init(){let t;await this.text.init();let e=Math.floor(24*Math.random())+1;for(let n=0;n<25;n++){let i=new vt(.4,.8,1);n===e&&(i=new vt(1,.3,.175));let r=this.text.getTextGeometry(n+1+"",{fontSize:.05,letterSpacing:2.5,color:i});r.translate(.5*-(r.boundingBox.min.x+r.boundingBox.max.x),0,0),r.rotateY(.5*Math.PI),r.translate(29,-1.75,0),r.rotateY(n/25*Math.PI*2),t?(t=sh([t,r]),r.dispose()):t=r}for(let e=0;e<12;e++){let n;e<5&&(n=this.text.getTextGeometry(10*(e+1)+"",{fontSize:.035,letterSpacing:2.5})),5!==e&&(6===e&&(n=this.text.getTextGeometry("NS",{fontSize:.035,letterSpacing:2.5})),7!==e&&8!==e&&(9===e&&(n=this.text.getTextGeometry("W",{fontSize:.035,letterSpacing:2.5})),e>=10||(n.translate(.5*-(n.boundingBox.min.x+n.boundingBox.max.x),0,0),n.rotateX(.5*-Math.PI),n.rotateY(.5*Math.PI),n.translate(15,-2,0),n.rotateY(e/12*Math.PI*2),t?(t=sh([t,n]),n.dispose()):t=n)))}for(let e=0;e<2;e++){let n;0===e&&(n=this.text.getTextGeometry("100",{fontSize:.0275,letterSpacing:2.5}),n.translate(.5*-(n.boundingBox.min.x+n.boundingBox.max.x),0,0),n.rotateX(.5*-Math.PI),n.rotateY(.5*Math.PI),n.translate(9.75,-2,0),n.rotateY(0*Math.PI*2)),1===e&&(n=this.text.getTextGeometry("200",{fontSize:.0275,letterSpacing:2.5}),n.translate(.5*-(n.boundingBox.min.x+n.boundingBox.max.x),0,0),n.rotateX(.5*-Math.PI),n.rotateY(.5*Math.PI),n.translate(9.75,-2,0),n.rotateY(.25*Math.PI*2)),t?(t=sh([t,n]),n.dispose()):t=n}this.mesh=new dn(t,this.text.material)}update(t,e,n){this.mesh&&(this.mesh.material.uniforms.time.value=n,this.mesh.rotation.y=.1*t)}}class lu{constructor(){this.animDuration=10,this.material=new yn({uniforms:{uTime:{value:0},uAnimDuration:{value:this.animDuration}},vertexShader:"\n        attribute vec4 fx;\n        attribute vec4 color;\n\n        varying vec2 vUv;\n        varying vec4 vFx;\n        varying vec4 vColor;\n\n        void main() {\n          vUv = uv;\n          vFx = fx;\n          vColor = color;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);    \n        }\n      ",fragmentShader:"\n        uniform float uTime;\n        uniform float uAnimDuration;\n\n        varying vec2 vUv;\n        varying vec4 vFx;\n        varying vec4 vColor;\n\n        void main() {\n          float animT = max(vFx.x - (uAnimDuration - 1.0), 0.0);\n          float alphaMult = vFx.y;\n          float alpha = 0.0;\n\n          // [-2, +2]\n          float targetC = animT * 4.0 - 2.0;\n          float targetDist = abs(vUv.y - targetC);\n\n          if(targetDist < 0.3) {\n            alpha = 1.0 - smoothstep(0.1, 0.3, targetDist);\n            \n            // vertical borders smoothness\n            alpha *= 1.0 - smoothstep(0.35, 0.5, abs(vUv.y - 0.5));\n\n            // horizontal borders smoothness\n            // float lineLengthMult = 1.0;\n            float lineLengthMult = 1.0 - clamp((animT - 0.6) * 4.0, 0.0, 0.85);\n            alpha *= 1.0 - smoothstep(0.25 * lineLengthMult, 0.5 * lineLengthMult, abs(vUv.x - 0.5));\n            \n            // vertical gradual increase\n            alpha *= 1.0 - smoothstep(0.0, 1.0, vUv.y);\n\n            alpha *= 0.3 * alphaMult;\n          }\n\n          gl_FragColor = vec4(vColor.xyz * alpha, 1.0);    \n        }\n      ",transparent:!0,blending:5,blendEquation:e,blendSrc:i,blendDst:n,depthTest:!1,depthWrite:!1,side:2}),this.cols=[],this.geometry,this.mesh=new dn(this.geometry,this.material)}newCol(){let t=20*Math.pow(Math.random(),1)+20,e=Math.random()*Math.PI*2,n=Math.random()*t*.4+10,i=Math.pow(Math.random(),2)*n,r=Math.pow(Math.random(),5),s=this.animDuration*Math.random(),a=1.35*Math.random()+.15,o=.5*Math.random()+.1+r,l=new st(Xc);l=new vt(l.r,l.g,l.b);let c=new vt(Math.random(),Math.random(),Math.random());return{rad:t,angle:e,planeHeight:n,yoff:i,anim:s,alphaMult:o,animSpd:a,color:l.clone().multiplyScalar(1-r).add(c.clone().multiplyScalar(r))}}update(t,e){this.geometry&&this.geometry.dispose(),this.geometry=null,this.cols=this.cols.filter((t=>t.anim<this.animDuration));let n=100-this.cols.length;for(let t=0;t<n;t++)this.cols.push(this.newCol());this.cols.forEach((e=>{let n=new zn(1,e.planeHeight),i=[];for(let t=0;t<n.attributes.position.count;t++)i.push(e.anim,e.alphaMult,0,0);n.setAttribute("fx",new Oe(new Float32Array(i),4));let r=[];for(let t=0;t<n.attributes.position.count;t++)r.push(e.color.x,e.color.y,e.color.z,0);n.setAttribute("color",new Oe(new Float32Array(r),4)),n.translate(0,e.yoff,e.rad),n.rotateY(e.angle),this.geometry?this.geometry=sh([this.geometry,n]):this.geometry=n,e.anim+=.25*t*e.animSpd})),this.mesh.geometry=this.geometry}}const cu="\n  float atan2(in float y, in float x)\n  {\n    bool s = (abs(x) > abs(y));\n    const float PIH = 3.14159265359 * 0.5;\n    return mix(PIH - atan(x,y), atan(y,x), s);\n  }\n";var hu={};function uu(t,e,n){this.x=t,this.y=e,this.z=n}uu.prototype.dot2=function(t,e){return this.x*t+this.y*e},uu.prototype.dot3=function(t,e,n){return this.x*t+this.y*e+this.z*n};var du=[new uu(1,1,0),new uu(-1,1,0),new uu(1,-1,0),new uu(-1,-1,0),new uu(1,0,1),new uu(-1,0,1),new uu(1,0,-1),new uu(-1,0,-1),new uu(0,1,1),new uu(0,-1,1),new uu(0,1,-1),new uu(0,-1,-1)],pu=[151,160,137,91,90,15,131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,190,6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,88,237,149,56,87,174,20,125,136,171,168,68,175,74,165,71,134,139,48,27,166,77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,102,143,54,65,25,63,161,1,216,80,73,209,76,132,187,208,89,18,169,200,196,135,130,116,188,159,86,164,100,109,198,173,186,3,64,52,217,226,250,124,123,5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,223,183,170,213,119,248,152,2,44,154,163,70,221,153,101,155,167,43,172,9,129,22,39,253,19,98,108,110,79,113,224,232,178,185,112,104,218,246,97,228,251,34,242,193,238,210,144,12,191,179,162,241,81,51,145,235,249,14,239,107,49,192,214,31,181,199,106,157,184,84,204,176,115,121,50,45,127,4,150,254,138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180],mu=new Array(512),fu=new Array(512);hu.seed=function(t){t>0&&t<1&&(t*=65536),(t=Math.floor(t))<256&&(t|=t<<8);for(var e=0;e<256;e++){var n;n=1&e?pu[e]^255&t:pu[e]^t>>8&255,mu[e]=mu[e+256]=n,fu[e]=fu[e+256]=du[n%12]}},hu.seed(0);var gu=.5*(Math.sqrt(3)-1),vu=(3-Math.sqrt(3))/6,yu=1/6;function xu(t){return t*t*t*(t*(6*t-15)+10)}function _u(t,e,n){return(1-n)*t+n*e}hu.simplex2=function(t,e){var n,i,r=(t+e)*gu,s=Math.floor(t+r),a=Math.floor(e+r),o=(s+a)*vu,l=t-s+o,c=e-a+o;l>c?(n=1,i=0):(n=0,i=1);var h=l-n+vu,u=c-i+vu,d=l-1+2*vu,p=c-1+2*vu,m=fu[(s&=255)+mu[a&=255]],f=fu[s+n+mu[a+i]],g=fu[s+1+mu[a+1]],v=.5-l*l-c*c,y=.5-h*h-u*u,x=.5-d*d-p*p;return 70*((v<0?0:(v*=v)*v*m.dot2(l,c))+(y<0?0:(y*=y)*y*f.dot2(h,u))+(x<0?0:(x*=x)*x*g.dot2(d,p)))},hu.simplex3=function(t,e,n){var i,r,s,a,o,l,c=.3333333333333333*(t+e+n),h=Math.floor(t+c),u=Math.floor(e+c),d=Math.floor(n+c),p=(h+u+d)*yu,m=t-h+p,f=e-u+p,g=n-d+p;m>=f?f>=g?(i=1,r=0,s=0,a=1,o=1,l=0):m>=g?(i=1,r=0,s=0,a=1,o=0,l=1):(i=0,r=0,s=1,a=1,o=0,l=1):f<g?(i=0,r=0,s=1,a=0,o=1,l=1):m<g?(i=0,r=1,s=0,a=0,o=1,l=1):(i=0,r=1,s=0,a=1,o=1,l=0);var v=m-i+yu,y=f-r+yu,x=g-s+yu,_=m-a+2*yu,w=f-o+2*yu,b=g-l+2*yu,M=m-1+.5,S=f-1+.5,T=g-1+.5,E=fu[(h&=255)+mu[(u&=255)+mu[d&=255]]],A=fu[h+i+mu[u+r+mu[d+s]]],P=fu[h+a+mu[u+o+mu[d+l]]],R=fu[h+1+mu[u+1+mu[d+1]]],C=.6-m*m-f*f-g*g,L=.6-v*v-y*y-x*x,D=.6-_*_-w*w-b*b,I=.6-M*M-S*S-T*T;return 32*((C<0?0:(C*=C)*C*E.dot3(m,f,g))+(L<0?0:(L*=L)*L*A.dot3(v,y,x))+(D<0?0:(D*=D)*D*P.dot3(_,w,b))+(I<0?0:(I*=I)*I*R.dot3(M,S,T)))},hu.perlin2=function(t,e){var n=Math.floor(t),i=Math.floor(e);t-=n,e-=i;var r=fu[(n&=255)+mu[i&=255]].dot2(t,e),s=fu[n+mu[i+1]].dot2(t,e-1),a=fu[n+1+mu[i]].dot2(t-1,e),o=fu[n+1+mu[i+1]].dot2(t-1,e-1),l=xu(t);return _u(_u(r,a,l),_u(s,o,l),xu(e))},hu.perlin3=function(t,e,n){var i=Math.floor(t),r=Math.floor(e),s=Math.floor(n);t-=i,e-=r,n-=s;var a=fu[(i&=255)+mu[(r&=255)+mu[s&=255]]].dot3(t,e,n),o=fu[i+mu[r+mu[s+1]]].dot3(t,e,n-1),l=fu[i+mu[r+1+mu[s]]].dot3(t,e-1,n),c=fu[i+mu[r+1+mu[s+1]]].dot3(t,e-1,n-1),h=fu[i+1+mu[r+mu[s]]].dot3(t-1,e,n),u=fu[i+1+mu[r+mu[s+1]]].dot3(t-1,e,n-1),d=fu[i+1+mu[r+1+mu[s]]].dot3(t-1,e-1,n),p=fu[i+1+mu[r+1+mu[s+1]]].dot3(t-1,e-1,n-1),m=xu(t),f=xu(e),g=xu(n);return _u(_u(_u(a,h,m),_u(o,u,m),g),_u(_u(l,d,m),_u(c,p,m),g),f)};const wu=hu;class bu{constructor(){this.material=new yn({uniforms:{uTime:{value:0},uAngle:{value:0},uSpeed:{value:1},uCameraPos:{value:new vt(0,0,0)}},vertexShader:`\n        attribute vec4 fx;\n\n        varying vec4 vFx;\n        varying vec3 vColor;\n\n        uniform float uTime;\n        uniform float uAngle;\n        uniform vec3 uCameraPos;\n        uniform float uSpeed;\n\n        ${Kc}\n        ${Qc}\n        ${Vh}\n        ${cu}\n\n        void main() {\n          bool curled = fx.z > 0.0;\n          float noiseStrength = fx.w;\n\n          vec3 tPosition = position;\n          if(curled) {\n            float rotSpeed = 1.0; // 0.5 + rand(vFx.xx) * 1.0;\n\n            tPosition = position * (0.95 + uSpeed * 0.05);\n            tPosition.xz = rotate(tPosition.xz, uTime * 0.01 * rotSpeed);\n            tPosition = tPosition + curlNoise(tPosition * 0.05) * noiseStrength * (uSpeed * 0.3 + 0.7);\n\n            // tPosition.y += 2.0;\n          }\n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(tPosition, 1.0);\n\n          float dist = abs((modelViewMatrix * vec4(tPosition, 1.0)).z);\n          gl_PointSize = ${Math.floor(.007*innerHeight)}.0 * (70.0 / dist);\n \n          // fx\n          vFx = fx;\n\n          // alpha\n          float alpha = fx.y * (sin(uTime + rand(vFx.xx) * 89.3279) * 0.45 + 0.55);\n          vFx.y = alpha;\n\n          vColor = vec3(0.3, 0.6, 1.0);\n          float posAngle = atan(tPosition.z, tPosition.x);\n          float angleDist = abs(posAngle - uAngle);\n          if(angleDist < 0.5) {\n            vColor = mix(vColor, vec3(1.0, 0.6, 0.3), 1.0 - smoothstep(0.0, 0.5, angleDist));\n          }\n\n\n          \n          if(noiseStrength < 5.0) {\n            vColor *= 0.5;\n          }\n\n\n          // logic to not show the particles if the camera ray intersects a\n          // circle in the xz plane\n          vec3 dVec = tPosition - uCameraPos;\n          float toPlane = uCameraPos.y * (1.0 / abs(normalize(dVec).y));\n          vec3 centralPoint = uCameraPos + normalize(dVec) * toPlane;\n          float cpDist = length(centralPoint);\n          if(cpDist < 17.5) {\n            gl_PointSize = 0.0;\n            vColor = vec3(0.0);\n          } else if(cpDist < 35.0) {\n            float a = smoothstep(17.5, 35.0, cpDist);\n            vFx.y *= a;\n          } \n        }\n      `,fragmentShader:"\n        varying vec4 vFx;\n        varying vec3 vColor;\n        \n        void main() {\n          vec2 uv = gl_PointCoord.st;\n\n          float opacity = 0.0;\n\n          float dist = length(uv - vec2(0.5)) * 2.0;\n          if(dist > 1.0) discard;\n\n          opacity = 1.0 - smoothstep(0.0, 1.0, dist);\n          opacity *= vFx.y;\n\n          gl_FragColor = vec4(vColor, opacity);\n        }\n      ",transparent:!0,blend:5,blendEquation:e,blendDst:n,blendDstAlpha:n,blendSrcAlpha:n,blendSrc:r,depthWrite:!1,side:2}),this.linesMaterial=new yn({uniforms:{uTime:{value:0},uAngle:{value:0},uCameraPos:{value:new vt(0,0,0)},uSpeed:{value:1}},vertexShader:`\n        attribute vec3 basePosition;\n        attribute vec4 fx;\n\n        varying vec4 vFx;\n        varying vec3 vColor;\n\n        uniform float uTime;\n        uniform float uAngle;\n        uniform vec3 uCameraPos;\n        uniform float uSpeed;\n\n        ${Kc}\n        ${Qc}\n        ${Vh}\n        ${cu}\n\n        void main() {\n          bool curled = fx.z > 0.0;\n          float noiseStrength = fx.w;\n\n          vec3 diff = position - basePosition;\n\n          vec3 tPosition = position;\n          if(curled) {\n            float rotSpeed = 1.0; // 0.5 + rand(vFx.xx) * 1.0;\n\n            tPosition = basePosition * (0.95 + uSpeed * 0.05);\n            tPosition.xz = rotate(tPosition.xz, uTime * 0.01 * rotSpeed);\n            tPosition = tPosition + curlNoise(tPosition * 0.05) * noiseStrength * (uSpeed * 0.3 + 0.7);\n          \n            tPosition += diff;\n          }\n\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(tPosition, 1.0);\n\n          // fx\n          vFx = fx;\n\n          // alpha\n          float alpha = fx.y * (sin(uTime + rand(vFx.xx) * 89.3279) * 0.45 + 0.55);\n          vFx.y = alpha * 0.7;\n\n          vColor = vec3(0.3, 0.6, 1.0);\n          float posAngle = atan(tPosition.z, tPosition.x);\n          float angleDist = abs(posAngle - uAngle);\n          if(angleDist < 0.5) {\n            vColor = mix(vColor, vec3(1.0, 0.6, 0.3), 1.0 - smoothstep(0.0, 0.5, angleDist));\n          }\n          \n          if(noiseStrength < 5.0) {\n            vColor *= 0.5;\n          }\n\n          // logic to not show the particles if the camera ray intersects a\n          // circle in the xz plane\n          vec3 dVec = tPosition - uCameraPos;\n          float toPlane = uCameraPos.y * (1.0 / abs(normalize(dVec).y));\n          vec3 centralPoint = uCameraPos + normalize(dVec) * toPlane;\n          float cpDist = length(centralPoint);\n          if(cpDist < 17.5) {\n            gl_PointSize = 0.0;\n            vColor = vec3(0.0);\n          } else if(cpDist < 35.0) {\n            float a = smoothstep(17.5, 35.0, cpDist);\n            vFx.y *= a;\n          } \n        }\n      `,fragmentShader:"\n        varying vec4 vFx;\n        varying vec3 vColor;\n        \n        void main() {\n          float opacity = 1.0;\n          opacity *= vFx.y;\n\n          gl_FragColor = vec4(vColor, opacity);\n        }\n      ",transparent:!0,blend:5,blendEquation:e,blendDst:n,blendDstAlpha:n,blendSrcAlpha:n,blendSrc:r,depthWrite:!1,side:2});let t=new Xe,i=[],s=[],a=1200,o=[];for(let t=0;t<1800;t++){let e=46*Math.random()+25,n=t/a*Math.PI*2,r=2*(2*Math.random()-1),l=!0,c=Math.random()>.25;c&&(e=3*Math.random()+46,e=6*Math.random()+46,r=0);let h=5;t>a&&(l=!1,n=(t-a)/600*Math.PI*2,e=1*Math.random()+45,e-=12,r-=12,h=3.5);let u=Math.sin(n)*e,d=Math.cos(n)*e,p=new vt(u,r,d),m=new dt(t,.7*Math.pow(Math.random(),2.65)+.1,c?1:0,h);o.push({vertex:p,fxv:m,curled:c,higherLevel:l}),i.push(p.x,p.y,p.z),s.push(m.x,m.y,m.z,m.w)}t.setAttribute("position",new Oe(new Float32Array(i),3)),t.setAttribute("fx",new Oe(new Float32Array(s),4)),this.points=new ia(t,this.material),this.angle=0,this.speed=1,this.createLines(o)}createLines(t){let e=new Xe,n=[],i=[],r=[];for(let e=0;e<t.length-10;e++){let s,a,o=1/0;for(let n=1;n<10;n++){let i=t[e].vertex,r=t[e+n].vertex,l=i.clone().sub(r).length();l<o&&(o=l,s=t[e],a=t[e+n])}if(!s.curled||!a.curled)continue;if(!s.higherLevel&&a.higherLevel)continue;if(s.higherLevel&&!a.higherLevel)continue;let l=s.vertex,c=a.vertex,h=l.clone().sub(c).normalize(),u=new vt(-h.z,0,h.x).normalize(),d=l.clone().add(u.clone().multiplyScalar(.05)),p=l.clone().add(u.clone().multiplyScalar(-.05)),m=c.clone().add(u.clone().multiplyScalar(.05)),f=c.clone().add(u.clone().multiplyScalar(-.05));n.push(d.x,d.y,d.z,p.x,p.y,p.z,m.x,m.y,m.z,m.x,m.y,m.z,p.x,p.y,p.z,f.x,f.y,f.z),i.push(l.x,l.y,l.z,l.x,l.y,l.z,c.x,c.y,c.z,c.x,c.y,c.z,l.x,l.y,l.z,c.x,c.y,c.z);let g=s.fxv,v=a.fxv;r.push(g.x,g.y,g.z,g.w,g.x,g.y,g.z,g.w,v.x,v.y,v.z,v.w,v.x,v.y,v.z,v.w,g.x,g.y,g.z,g.w,v.x,v.y,v.z,v.w)}e.setAttribute("position",new Oe(new Float32Array(n),3)),e.setAttribute("basePosition",new Oe(new Float32Array(i),3)),e.setAttribute("fx",new Oe(new Float32Array(r),4)),this.lines=new dn(e,this.linesMaterial)}sanitizeAngle(t,e){let n=e-t;return Math.abs(n)>Math.PI&&(t>0&&(e=Math.PI+(Math.PI+e)),t<0&&(e=-Math.PI-(Math.PI-e))),(t=.965*t+.035*e)>Math.PI&&(t=-(Math.PI-(t-Math.PI))),t<-Math.PI&&(t=Math.PI+(Math.PI+t)),t}update(t,e,n,i){this.angle=this.sanitizeAngle(this.angle,n),this.material.uniforms.uTime.value=e,this.material.uniforms.uAngle.value=this.angle,this.material.uniforms.uCameraPos.value=i.position.clone(),this.material.uniforms.uSpeed.value=this.speed,this.linesMaterial.uniforms.uTime.value=e,this.linesMaterial.uniforms.uAngle.value=this.angle,this.linesMaterial.uniforms.uCameraPos.value=i.position.clone(),this.linesMaterial.uniforms.uSpeed.value=this.speed}}function Mu(t){return(2*mh.rand()-1)*t}class Su{constructor(){this.material=new yn({uniforms:{uTime:{value:0},uStrength:{value:0}},vertexShader:"\n        attribute vec4 fx;\n\n        varying vec3 vFragPos;\n        varying vec2 vUv;\n        varying vec4 vFx;\n        varying float vHiddenAlpha;\n\n        uniform float uTime;\n        uniform float uStrength;\n\n        void main() {\n          vUv = uv;\n          vFx = fx;\n          vFragPos = (modelMatrix * vec4(position, 1.0)).xyz;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n          float animT = mod(uTime, 35.0);\n\n          bool hidden = vFx.y > 0.5;\n\n          // also edit update() if you change these values!\n          // also edit update() if you change these values!\n          if(hidden && uStrength <= 0.0) {\n            // don't render this vertex\n            gl_Position.x = 999999.0;\n          }\n          if(uStrength > 0.0) {\n            vHiddenAlpha = uStrength;\n          }\n        }\n      ",fragmentShader:`\n        varying vec3 vFragPos;\n        varying vec2 vUv;\n        varying vec4 vFx;\n        varying float vHiddenAlpha;\n\n        uniform float uTime;\n\n        ${Vh}\n\n        void main() {\n          float arcIndex = vFx.x;\n\n          float r1 = rand(vec2(arcIndex) * 9.547);\n          float r2 = rand(vec2(77.0, arcIndex) * 9.547);\n\n          float alpha = 0.0325 + sin(uTime + r1 * 19.77) * 0.0625;\n          if(alpha < 0.0) alpha *= 1.35;\n          \n          vec3 color = vec3(0.25, 0.38, 1.0);\n          if(mod(arcIndex, 4.0) < 1.0) {\n            color = color.bgr;\n          }\n          if(mod(arcIndex, 4.0) == 1.0) {\n            color = vec3(0.0, 0.4, 1.0);\n          }\n\n          float animT = mod(uTime * 0.25 + r1 * 19.77, 5.0);\n          if(animT < 2.0) {\n            float vTarget = -1.0 + animT;\n            float vCurrent = vUv.y;\n\n            float vDist = abs(vCurrent - vTarget);\n            if(vDist < 0.1) {\n              alpha += (1.0 - smoothstep(0.0, 0.1, vDist)) * 0.4;\n            }\n          }\n\n          bool hidden = vFx.y > 0.5;\n          if ( hidden ) {\n            alpha *= vHiddenAlpha;\n          }\n\n          gl_FragColor = vec4(color, alpha);\n        }\n      `,blend:5,blendEquation:e,blendDst:n,blendDstAlpha:n,blendSrcAlpha:n,blendSrc:r,side:2,transparent:!0,depthWrite:!1});let t=new Xe,i=[],s=[],a=[];mh.setRandomSeed("arcs-1");let o=parseInt(new URLSearchParams(window.location.search).get("arcs"))||10;for(let t=0;t<o+30;t++){let e=new vt(Mu(40),0,Mu(40)),n=new vt(Mu(40),0,Mu(40)),r=e.clone().add(n).multiplyScalar(.5);r.setY((35,35*-mh.rand()+.2));let l=e.clone().sub(r).normalize(),c=n.clone().sub(r).normalize(),h=l.clone().cross(c).normalize(),u=Math.acos(l.dot(c)),d=t,p=t>o;for(let t=0;t<60;t++){let n=u*(t/60),o=u*((t+1)/60),l=t/60,c=(t+1)/60,m=e.clone().sub(r).applyAxisAngle(h,n);m.add(r);let f=e.clone().sub(r).applyAxisAngle(h,o);f.add(r),Tu(m,f,h,l,c,new dt(d,p,0,0),i,s,a)}}t.setAttribute("position",new Oe(new Float32Array(i),3)),t.setAttribute("uv",new Oe(new Float32Array(s),2)),t.setAttribute("fx",new Oe(new Float32Array(a),4)),this.mesh=new dn(t,this.material),this.customTime=0,this.strength=0,this.finaleIncrementor=0}update(t,e){this.customTime+=t;let n=this.customTime%35;if(n>20){this.material.uniforms.uStrength.value=Math.min(.5*(n-20),1);let e=Math.min(1.25*(n-20),1.5);n>33&&(this.material.uniforms.uStrength.value=1-Math.min(.5*(n-33),1),e*=1-(n-33)/2),this.strength>this.material.uniforms.uStrength.value&&(this.material.uniforms.uStrength.value=this.strength),this.customTime+=t*Math.max(e,this.finaleIncrementor)}else this.customTime+=t*this.finaleIncrementor,this.material.uniforms.uStrength.value=this.strength;this.material.uniforms.uTime.value=this.customTime}}function Tu(t,e,n,i,r,s,a,o,l){let c=n.clone().multiplyScalar(.25),h=t.clone().add(c),u=t.clone().sub(c),d=e.clone().add(c),p=e.clone().sub(c);a.push(h.x,h.y,h.z,u.x,u.y,u.z,d.x,d.y,d.z,d.x,d.y,d.z,u.x,u.y,u.z,p.x,p.y,p.z),o.push(0,i,1,i,0,r,0,r,1,i,1,r),l.push(s.x,s.y,s.z,s.w,s.x,s.y,s.z,s.w,s.x,s.y,s.z,s.w,s.x,s.y,s.z,s.w,s.x,s.y,s.z,s.w,s.x,s.y,s.z,s.w)}class Eu{constructor(t,e,n,i){this.material=new yn({uniforms:{uPostProcTexture:{type:"t",value:e.texture},uFlamesTexture:{type:"t",value:n.texture},uTime:{value:0},uStrength:{value:0}},vertexShader:"\n                varying vec2 vUv;\n\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4(position.xy, 0.0, 1.0);    \n                }\n            ",fragmentShader:"\n                uniform sampler2D uPostProcTexture;\n                uniform sampler2D uFlamesTexture;\n                uniform float uTime;\n                uniform float uStrength;\n\n                varying vec2 vUv;\n\n                float hash(vec2 p) {\n                    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n                    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n                }\n\n                float noise( in vec2 p ) {\n                    vec2 i = floor( p );\n                    vec2 f = fract( p );\n                \n                \tvec2 u = f*f*(3.0-2.0*f);\n                \n                    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                                     hash( i + vec2(1.0,0.0) ), u.x),\n                                mix( hash( i + vec2(0.0,1.0) ), \n                                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n                }\n\n                void main() {\n                    vec4 flames = texture2D(uFlamesTexture, vUv);\n\n                    float dx = dFdx(flames).x;\n                    float dy = dFdy(flames).x;\n\n                    float strength = flames.w * flames.x;\n                    float uvDistortionStrength = strength * 0.65 * uStrength;\n\n                    float colorShiftStrength = length(vUv - 0.5) / 0.5;\n                    float css = pow(colorShiftStrength, 1.7) * 0.004 * uStrength;\n\n                    vec4 colorR = texture2D(uPostProcTexture, vUv + vec2(+1.0 * css, 0.0) + vec2(dx, dy) * uvDistortionStrength);\n                    colorR = mix(colorR, colorR * 1.25 + vec4(1.0, 0.5, 0.1, 1.0) * 0.075 * strength, strength * uStrength);\n                    \n                    vec4 colorG = texture2D(uPostProcTexture, vUv + vec2(0.0, 0.0) + vec2(dx, dy) * uvDistortionStrength);\n                    colorG = mix(colorG, colorG * 1.25 + vec4(1.0, 0.5, 0.1, 1.0) * 0.075 * strength, strength * uStrength);\n                    \n                    vec4 colorB = texture2D(uPostProcTexture, vUv + vec2(-1.0 * css, 0.0) + vec2(dx, dy) * uvDistortionStrength);\n                    colorB = mix(colorB, colorB * 1.25 + vec4(1.0, 0.5, 0.1, 1.0) * 0.075 * strength, strength * uStrength);\n                    \n                    vec4 color = \n                        // colorR * vec4(0.80, 0.25, 0.05, 1.0) + \n                        // colorG * vec4(0.10, 0.10, 0.10, 1.0) +\n                        // colorB * vec4(0.10, 0.65, 0.85, 1.0);\n                        colorR * vec4(1.00, 0.00, 0.00, 1.0) + \n                        colorG * vec4(0.00, 1.00, 0.00, 1.0) +\n                        colorB * vec4(0.00, 0.00, 1.00, 1.0);\n\n\n                    // color = pow(color, vec4(0.88, 0.9, 0.92, 1.0));\n                    // color += (color - vec4(0.35, 0.35, 0.35, 0.0)) * 0.2;\n\n                    vec4 flamesCol1 = vec4(0.035, 0.01, 0.0, 0.0);\n                    vec4 flamesCol2 = vec4(0.0, 0.0075, 0.035, 0.0);\n                    color += mix(flamesCol1, flamesCol2, pow(flames.z, 1.35)) * uStrength * (1.0 + flames.y * 3.0);\n\n                    gl_FragColor = vec4(vec3(color), 1.0);  \n                }\n            ",depthTest:!1,depthWrite:!1}),this.mesh=new dn(new zn(2,2),this.material),this.camera=new _n(45,1,1,1e3),this.renderer=t,this.scene=new ds,this.scene.add(this.mesh),this.flamesMaterial=new yn({uniforms:{uTime:{value:0}},vertexShader:"\n                varying vec2 vUv;\n                varying vec3 vFragPos;\n\n                void main() {\n                    vUv = uv;\n                    vFragPos = (modelMatrix * vec4(position, 1.0)).xyz;\n                    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);    \n                }\n            ",fragmentShader:"\n                varying vec2 vUv;\n                varying vec3 vFragPos;\n\n                uniform float uTime;\n\n                float hash(vec2 p) {\n                    p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n                    return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n                }\n\n                float noise( in vec2 p ) {\n                    vec2 i = floor( p );\n                    vec2 f = fract( p );\n                \n                    vec2 u = f*f*(3.0-2.0*f);\n                \n                    return mix( mix( hash( i + vec2(0.0,0.0) ), \n                                     hash( i + vec2(1.0,0.0) ), u.x),\n                                mix( hash( i + vec2(0.0,1.0) ), \n                                     hash( i + vec2(1.0,1.0) ), u.x), u.y);\n                }\n\n                void main() {\n                    vec2 uv = vUv;\n                    uv.y *= 0.7;\n                    uv.x *= 0.65;\n\n                    float noise1 = smoothstep(+0.0, 5.0, noise(vec2(uv.x * 85.15 * 1.00, uv.y * 2.40 - uTime * 8.4)));\n                    float noise2 = smoothstep(-1.5, 2.2, noise(vec2(uv.x * 85.15 * 1.50, uv.y * 4.80 - uTime * 6.4))) * 2.0;\n                    float noise3 = smoothstep(+0.0, 1.6, noise(vec2(uv.x * 85.15 * 0.88, uv.y * 2.70 - uTime * 3.4))) * 2.0;\n                    float noise4 = smoothstep(-0.4, 1.0, noise(vec2(uv.x * 85.15 * 0.40, uv.y * 2.70 - uTime * 5.8)));\n                    float noise5 = smoothstep(+0.0, 0.8, noise(vec2(uv.x * 85.15 * 1.10, uv.y * 1.70 - uTime * 2.4)));\n                    float noise6 = smoothstep(+0.0, 1.4, noise(vec2(uv.x * 85.15 * 0.27, uv.y * 0.35 - uTime * 1.0))) * 4.0;\n                    \n                    float fieryNoise1 = ((noise1 + noise2 + noise3+ noise4 + noise5 + noise6 ) / 44.0);\n                    vec2 uvDistort1 = uv + (fieryNoise1) * 3.72;\n                    float mask1 = smoothstep(0.2, 0.72, 1.0 - smoothstep(0.0, 1.0, uvDistort1.y));\n\n                    float alpha = mask1;\n\n                    alpha *= smoothstep(0.0, 0.15, vUv.y) * (1.0 - smoothstep(0.85, 1.00, vUv.y));  \n\n                    gl_FragColor = vec4(1.0, noise5, noise4, alpha);  \n                }\n            ",side:2,depthTest:!1,transparent:!0}),this.flamesMesh=new dn(new oa(70,25,35,60,1,!0),this.flamesMaterial),this.flamesMesh.position.set(0,10,0),this.flamesScene=new ds,this.flamesScene.add(this.flamesMesh),this.flamesSceneRT=n,this.stageManager=i,this.fxStrength=0}blit(t,e){this.renderer.setRenderTarget(this.flamesSceneRT),this.flamesMaterial.uniforms.uTime.value=t,this.renderer.render(this.flamesScene,this.stageManager.camera),this.renderer.setRenderTarget(e),this.material.uniforms.uStrength.value=this.fxStrength,this.renderer.render(this.scene,this.camera),this.renderer.setRenderTarget(null)}}let Au,Pu,Ru,Cu=!1,Lu=!1;const Du=new El,Iu=new ds,zu=new dn(new oo(5,10,10),new Ie);Iu.add(zu),window.addEventListener("mousemove",(t=>{if(!Ru)return;let e=document.querySelector(".outer-cursor");if(Nu)return void e.classList.remove("hover");let n=new Z(t.clientX/window.innerWidth*2-1,-t.clientY/window.innerHeight*2+1);Du.setFromCamera(n,Ru),Lu=!1,e.classList.remove("hover"),Du.intersectObjects(Iu.children)[0]&&(Lu=!0,e.classList.add("hover"))}));let Nu=!1;const Ou=new El,Fu=new ds,Uu=new dn(new oo(2,10,10),new Ie);Fu.add(Uu);let Bu=!1;Fl("\n  .d20-riddle {\n    position: absolute;\n    width: 100%;\n    left: 50%;\n    bottom: 103px;\n    transform: translate(-50%, 0%);\n    user-select: none;\n  \n    text-align: center;\n  }\n\n  span.riddle {\n    color: white;\n    font-family: monospace;\n    font-size: 15px;\n    letter-spacing: 0.5px;\n    line-height: 23px;\n\n    opacity: 0;\n    transition: opacity .4s;\n  }\n\n  span.riddle.active {\n    opacity: 1;\n  }\n");class Hu extends hh{constructor(t,e){super(t,e),this.camera=new _n(45,innerWidth/innerHeight,.1,1e3),this.camera.position.set(0,0,50),Gc.missingItems=0,kc("black"),Wc(null,!0),Nu=!0,this.colorRT=new pt(innerWidth,innerHeight,{type:v,samples:4}),this.bloomProgram=new qc(this.renderer,innerWidth,innerHeight,this.colorRT),this.postProcessProgram=new jc(this.renderer,this.colorRT,this.bloomProgram.rt)}async init(){this.buildGeometry(),this.clock.start()}buildGeometry(){this.atomMesh=rh(7,6.9),this.scene.add(this.atomMesh)}update(){let t=this.clock.getDelta();this.clock.getElapsedTime();const e=2*Math.PI/Math.PI;dh();let n=1;n=.3,this.atomMesh.rotateZ(t*e),this.renderer.setRenderTarget(this.colorRT),this.renderer.render(this.scene,this.camera),this.bloomProgram.compute(),this.postProcessProgram.blit(.3,null)}}window.assetsPath="webgl-src/assets/",Fl("\n  html, body {\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    overflow: hidden;\n  }\n");const Gu=new cs({antialias:!0});Gu.setSize(innerWidth,innerHeight),Gu.outputEncoding=I,Gu.toneMapping=1,Gu.physicallyAccurateLights=!0,document.body.appendChild(Gu.domElement);const ku=window.assetsPath,Vu=parseInt(new URLSearchParams(window.location.search).get("day"));let Wu;async function ju(){await new Promise(((t,e)=>{let n={t:0};Uc({targets:n,t:[0,1],easing:"easeInOutSine",duration:1e3,complete:t,update:()=>{Bc.style.opacity=n.t}})})),Wu=new Hu(Gu,20),Wu.init()}Vu<=6&&(Wu=new class extends hh{constructor(t,e){super(t,e),this.camera=new _n(45,innerWidth/innerHeight,.1,1e3),this.camera.position.set(0,0,50),this.audioManager=new xh(this.camera),Gc.missingItems=0,kc("black"),Wc(null,!0),this.updateCursor=uh(),this.colorRT=new pt(innerWidth,innerHeight,{type:v,samples:4}),this.bloomProgram=new qc(this.renderer,innerWidth,innerHeight,this.colorRT),this.postProcessProgram=new jc(this.renderer,this.colorRT,this.bloomProgram.rt),window.addEventListener("resize",this.onResize.bind(this))}onResize(){this.camera.aspect=innerWidth/innerHeight,this.camera.updateProjectionMatrix(),this.bloomProgram.setSize(innerWidth,innerHeight),this.renderer.setSize(innerWidth,innerHeight),this.colorRT.setSize(innerWidth,innerHeight)}async init(){this.buildGeometry(),this.clock.start()}buildGeometry(){1==this.day?(this.atomMesh=rh(7,6.9),this.scene.add(this.atomMesh)):2==this.day?(this.coxeter=function(){const t=rh(4,3.95);t.position.set(-8,0,0);const e=new dn(new zn(3.2,.02),th.opaque());e.position.set(-2.4,0,0);const n=new dn(new zn(3.2,.02),th.opaque());n.position.set(2.4,0,0);const i=new dn(new aa(.8,30),th.transparent(null,1)),r=rh(4,3.95);r.position.set(8,0,0),r.rotateZ(1.5);const s=new is;return s.add(t,e,n,i,r),{group:s,atom1:t,atom2:r,circle:i}}(),this.scene.add(this.coxeter.group)):3==this.day?(this.clockData=oh({}),this.scene.add(this.clockData.group)):4==this.day?(this.clockData=oh({outerRing:!0}),this.scene.add(this.clockData.group)):5==this.day?(this.clockData=oh({outerRing:!0}),this.scene.add(this.clockData.group),function(){let t=document.createElement("div");t.classList.add("glow-orb");let e=document.createElement("div");e.classList.add("d5-text"),e.innerHTML="\n    In the vastness of space and the immensity of time,<br>it is my joy to share an epoch.<br><br>Even so small.<br><br>With all of you.\n  ",document.body.appendChild(t),document.body.appendChild(e),Fl("\n    .glow-orb {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n       \n      transition: transform .75s, background .75s;\n      transform: translate(-50%, -50%) scale(0, 0);\n\n      width: 200px;\n      height: 200px;\n\n      border-radius: 100%;\n      background: radial-gradient(rgb(9 101 255) 12%, rgba(255, 255, 255, 0) 65%);\n      mix-blend-mode: screen;\n     \n      pointer-events: none;\n    }\n\n    .d5-text {\n      position: absolute;\n      top: 50%;\n      left: 50%;\n       \n      font-family: monospace;\n      font-size: 14px;\n      letter-spacing: 0.5px;\n      text-align: center;\n      color: black;\n\n      display: block;\n\n      opacity: 0;\n      transition: transform 1.5s, opacity .5s;\n      transform: translate(-50%, calc(-50% + 50px));\n\n      pointer-events: none;\n    }\n  ");let n=0;window.addEventListener("click",(function(i){let r=.5-i.clientX/innerWidth,s=.5-(1-i.clientY/innerHeight);Math.sqrt(r*r+s*s)<.01&&n++,1==n&&(t.style.transform="translate(-50%, -50%) scale(0.2, 0.2)"),2==n&&(t.style.transform="translate(-50%, -50%) scale(0.5, 0.5)"),3==n&&(t.style.transform="translate(-50%, -50%) scale(0.75, 0.75)"),4==n&&(t.style.transform="translate(-50%, -50%) scale(1, 1)"),5==n&&(t.style.transform="translate(-50%, -50%) scale(1.5, 1.5)"),6==n&&(t.style.transform="translate(-50%, -50%) scale(2.5, 2.5)"),7==n&&(t.style.transform="translate(-50%, -50%) scale(4, 4)"),8==n&&(t.style.transform="translate(-50%, -50%) scale(8, 8)"),9==n&&(t.style.transform="translate(-50%, -50%) scale(15, 15)"),10==n&&(t.style.transform="translate(-50%, -50%) scale(30, 30)"),6==n&&(t.style.background="radial-gradient(rgb(9 101 255) 12%, rgba(255, 255, 255, 0) 65%)"),7==n&&(t.style.background="radial-gradient(rgb(19 121 255) 12%, rgba(255, 255, 255, 0) 65%)"),8==n&&(t.style.background="radial-gradient(rgb(39 151 255) 12%, rgba(255, 255, 255, 0) 65%)"),9==n&&(t.style.background="radial-gradient(rgb(109 200 255) 12%, rgba(255, 255, 255, 0) 65%)"),10==n&&(t.style.background="radial-gradient(rgb(255 255 255) 12%, rgba(255, 255, 255, 0) 65%)"),10==n&&ch("day-5-timeout")&&(setTimeout((()=>{e.style.opacity=1,e.style.transform="translate(-50%, -50%)"}),6e5),localStorage.setItem("d5d",(new Date).getDay()))})),localStorage.getItem("d5d")==(new Date).getDay()&&(n=10,document.querySelector("canvas").click())}()):6==this.day&&(this.clockData=oh({outerRing:!0}),this.scene.add(this.clockData.group),this.trail=new yh(this),this.scene.add(this.trail.group))}update(){let t=this.clock.getDelta(),e=this.clock.getElapsedTime();const n=2*Math.PI/Math.PI;this.updateCursor(t);let i=1;if(1==this.day)i=.3,this.atomMesh.rotateZ(t*n);else if(2==this.day)i=.45,this.coxeter.atom1.rotateZ(t*n),this.coxeter.atom2.rotateZ(t*n),this.coxeter.circle.material.opacity=e%10<1?.5*Math.sin((e+.5*Math.PI)*Math.PI*8)+.5:1;else if(3==this.day||4==this.day||5==this.day){if(i=1.25,this.clockData.atom1.rotateZ(t*n),this.clockData.atom2.rotateZ(t*n),ch("clock-init")){let t=new Date,e=t.getHours()/12*Math.PI*2;this.clockData.hourRotGroup.rotateZ(.5*Math.PI-e);let n=t.getMinutes()/60*Math.PI*2;this.clockData.minutesRotGroup.rotateZ(.5*Math.PI-n)}const e=2*Math.PI/3600,r=2*Math.PI/43200;this.clockData.hourRotGroup.rotateZ(-r*t*6.626),this.clockData.minutesRotGroup.rotateZ(-e*t*6.626),4!=this.day&&5!=this.day||this.clockData.outerCircle.rotateZ(2*Math.PI/87.97*t)}else if(6==this.day){if(i=1.25,this.clockData.atom1.rotateZ(t*n),this.clockData.atom2.rotateZ(t*n),ch("clock-init")){let t=new Date,e=t.getHours()/12*Math.PI*2;this.clockData.hourRotGroup.rotateZ(.5*Math.PI-e),this.clockData.hourRotGroup.children[0].children[1].visible=!1;let n=.5*Math.PI-e;this.trail.setStartPosition(new vt(7*Math.cos(n),7*Math.sin(n),0));let i=t.getMinutes()/60*Math.PI*2;this.clockData.minutesRotGroup.rotateZ(.5*Math.PI-i)}const r=2*Math.PI/3600,s=2*Math.PI/43200;this.clockData.hourRotGroup.rotateZ(-s*t*6.626),this.clockData.minutesRotGroup.rotateZ(-r*t*6.626),this.clockData.outerCircle.rotateZ(2*Math.PI/87.97*t),this.trail.update(t,e)}this.renderer.setRenderTarget(this.colorRT),this.renderer.render(this.scene,this.camera),this.bloomProgram.compute(),this.postProcessProgram.blit(i,null)}}(Gu,Vu)),Vu>=7&&Vu<=15&&(Wu=new class extends hh{constructor(t,e){if(super(t,e),this.camera=new _n(45,innerWidth/innerHeight,.1,1e3),this.camera.position.set(0,110,0),7==e&&this.camera.position.set(0,150,0),e>=9&&this.camera.position.set(-59.8728601084656,72.15819300037391,43.35232783652993),e>=14&&this.camera.position.set(-55.593,55.76,67.858),this.updateCursor=uh(),Nh(this.camera),this.audioManager=new xh(this.camera),this.controls=new bh(this.camera,this.renderer.domElement),this.controls.target.set(0,-4.071195289433606,0),this.controls.enableDamping=!0,this.controls.dampingFactor=.025,this.controls.enableRotate=!1,this.controls.minPolarAngle=0,this.controls.maxPolarAngle=.425*Math.PI,e>=9&&(this.controls.enableRotate=!0,this.controls.rotateSpeed=.36,this.controls.autoRotate=!0,this.controls.autoRotateSpeed=.25),this.controls.minDistance=45,this.controls.maxDistance=120,7==e&&(this.controls.maxDistance=160),Gc.missingItems=0,10==this.day&&(Gc.missingItems=1),11==this.day&&(Gc.missingItems=1),15==this.day&&(Gc.missingItems=3),kc("black"),Wc(this.camera,!1,this.controls),this.colorRT=new pt(innerWidth,innerHeight,{type:v,samples:4}),this.dofRT=new pt(innerWidth,innerHeight,{}),this.bloomRT=new pt(Math.floor(.5*innerWidth),Math.floor(.5*innerHeight),{type:v,samples:4}),9==this.day&&function(){let t=!1,e=0,n=!1,i=[-1,-1];window.addEventListener("mousedown",(r=>{i[0]=r.clientX,i[1]=r.clientY,n=!0,t=!1,e=0,r.clientX>innerWidth-50-200&&r.clientX<innerWidth-50&&r.clientY<300&&r.clientY>50||(t=!0)})),window.addEventListener("mouseup",(i=>{n=!1,!t&&e>100&&async function(){let t=await fetch(ku+"sa_dwra_swepaz_22_pdkqowjzo_uawn_wp_zwnhejc_swnnack_yqhckw.jpg");console.log("nb: "+t),console.log("nb status "+t.status),console.log("nb status text "+t.statusText);let e=await t.blob();console.log("b: "+e),console.log("bl: "+e.size);let n=await new Promise((t=>{let n=new FileReader;n.onload=()=>t(n.result),n.readAsDataURL(e)}));console.log("drl: "+n);const i=document.createElement("a");i.download="sa dwra swepaz 22 pdkqowjzo uawn wp zwnhejc swnnack yqhckw.png",i.href=n,i.click(),i.delete}()})),window.addEventListener("mousemove",(r=>{n&&(Math.abs(r.clientX-i[0])>20?t=!0:e=Math.abs(r.clientY-i[1]))}))}(),15==this.day){let t=document.createElement("div");t.innerHTML=`\n        <video id="video" playsinline webkit-playsinline muted loop autoplay width="320" height="240" src="${assetsPath+"program.mp4"}" style="position: absolute; top: 0; left: 0; opacity: 0;"></video>\n      `,document.body.appendChild(t),this.tvRT=new pt(innerWidth,innerHeight,{}),this.tvPassProgram=new Jh(this.renderer,t.querySelector("video"),this.tvRT)}this.bloomScene=new ds,this.bloomProgram=new qc(this.renderer,innerWidth,innerHeight,this.bloomRT),this.dofProgram=new qh(this.renderer,this.dofRT,this.colorRT.texture),this.postProcessProgram=new jc(this.renderer,this.day>=9?this.dofRT:this.colorRT,this.bloomProgram.rt),window.addEventListener("resize",this.onResize.bind(this))}onResize(){this.camera.aspect=innerWidth/innerHeight,this.camera.updateProjectionMatrix(),this.bloomProgram.setSize(innerWidth,innerHeight),this.renderer.setSize(innerWidth,innerHeight),this.colorRT.setSize(innerWidth,innerHeight),this.dofRT.setSize(innerWidth,innerHeight),this.bloomRT.setSize(Math.floor(.5*innerWidth),Math.floor(.5*innerHeight)),this.dofProgram.setSize(innerWidth,innerHeight)}async init(){this.buildGeometry(),this.clock.start()}buildGeometry(){new URLSearchParams(window.location.search),this.clockData=oh({outerRing:!0,color:new st(.15,.2,.25)}),this.clockData.group.rotateX(.5*-Math.PI),this.clockData.group.scale.set(2.5,2.5,2.5),this.solarSystem=new Fh(this.day),this.solarSystem.mesh.renderOrder=15,this.bloomScene.add(this.solarSystem.bloomMesh),this.sceneGroup=new is,this.sceneGroup.add(this.clockData.group),this.sceneGroup.add(this.solarSystem.mesh),10==this.day&&(this.sacksSpiral=new Wh(this.camera,this.day,this),this.sacksSpiral.mesh.renderOrder=25,this.scene.add(this.sacksSpiral.mesh)),this.day>=10&&(this.bars=new Xh(this.day),this.scene.add(this.bars.group)),this.day>=12&&(this.spheres=new Yh(this.day,this),this.scene.add(this.spheres.mesh),function(t){let e="";window.addEventListener("keypress",(n=>{e="D"!=n.key&&"d"!=n.key||""!=e?"O"!=n.key&&"o"!=n.key||"d"!=e?"V"!=n.key&&"v"!=n.key||"do"!=e?"E"!=n.key&&"e"!=n.key||"dov"!=e?"D"!=n.key&&"d"!=n.key||"dove"!=e?"A"!=n.key&&"a"!=n.key||"doved"!=e?"L"!=n.key&&"l"!=n.key||"doveda"!=e?"E"!=n.key&&"e"!=n.key||"dovedal"!=e?"":"dovedale":"dovedal":"doveda":"doved":"dove":"dov":"do":"d","dovedale"==e&&ch("day-12-song")&&t.audioManager.loadAndPlay(assetsPath+"Au_Clair_de_la_Lune.mp3",.5)}))}(this)),13==this.day&&function(t){let e=setInterval((()=>{t.audioManager.sound&&(clearInterval(e),function(){let e=0,n=-1;function i(t){setTimeout((()=>{e++}),t)}function r(e){t.audioManager.sound.isPlaying&&t.audioManager.sound.stop(),t.audioManager.loadAndPlay(assetsPath+"h6 extrait.mp3",e)}t.audioManager.sound.onEnded=()=>{e++},setInterval((()=>{if(n!=e){n=e;let t=e%9;0==t||1==t?(r(.6),console.log("60%")):2==t?(r(.2),console.log("20%")):3==t?(r(.6),console.log("60%")):4==t?(i(6e4),console.log("silent")):5==t?(r(.7),console.log("70%")):6==t?(r(.1),console.log("10%")):7==t?(r(.5),console.log("50%")):8==t&&(i(12e4),console.log("silent"))}}),100)}())}),100)}(this),this.day>=14&&(this.bars.plane.visible=!1,this.torusGrid=new Zh(this.camera,this.day),this.torusGrid.mesh.renderOrder=0,this.scene.add(this.torusGrid.group)),this.scene.add(this.sceneGroup)}update(){let t=this.clock.getDelta(),e=this.clock.getElapsedTime();const n=2*Math.PI/Math.PI;this.updateCursor(t);let i=5.5;if(i=1.25,this.clockData.atom1.rotateZ(t*n),this.clockData.atom2.rotateZ(t*n),ch("clock-init")){let t=new Date,e=t.getHours()/12*Math.PI*2;this.clockData.hourRotGroup.rotateZ(.5*Math.PI-e);let n=t.getMinutes()/60*Math.PI*2;this.clockData.minutesRotGroup.rotateZ(.5*Math.PI-n)}const r=2*Math.PI/3600,s=2*Math.PI/43200;this.clockData.hourRotGroup.rotateZ(-s*t*6.626),this.clockData.minutesRotGroup.rotateZ(-r*t*6.626),this.clockData.outerCircle.rotateZ(2*Math.PI/87.97*t),this.solarSystem&&this.solarSystem.update(t,e),8==this.day&&function(t,e,n){if(Bh+=t,Bh>Uh){let t=Bh-Uh;Hh||(Hh=!0,document.body.appendChild(Gh)),Gh.style.transform=`translate(calc(-50% + ${2e3*(2*-t+1)}px), -50%)`,t>=1&&(Uh=kh(),Bh=0,Hh=!1,Gh.remove())}if(!zh)return;let i=Ih.clone();i.multiply(new Z(innerWidth/innerHeight,1)),Lh||(Lh=i.clone(),Ch=new Z(0,0),Rh=0);let r=i.clone().sub(Lh).length();if(r>.5)return void(Lh=i.clone());let s=i.clone().normalize();Ch.multiplyScalar(.9),Ch.add(s.multiplyScalar(.1)),Ch.normalize(),Lh=i.clone(),Rh+=.1*r*(1-Math.abs(i.y))*(1-Math.abs(i.x)/(innerWidth/innerHeight)),Rh*=.975,n.rotation.x=Rh*Ch.y,n.rotation.z=Rh*Ch.x}(t,0,this.sceneGroup),this.day>=11&&this.bars.update(t,e),this.day>=12&&this.spheres.update(t,e),this.day>=14&&this.torusGrid.update(t,e),10==this.day&&this.sacksSpiral.update(t,e),this.controls.update(),this.renderer.setRenderTarget(this.colorRT),this.renderer.render(this.scene,this.camera),this.renderer.setRenderTarget(this.bloomRT),this.renderer.render(this.bloomScene,this.camera),this.bloomProgram.compute(4.5),this.day>=9&&this.dofProgram.compute(),15!=this.day?this.postProcessProgram.blit(1.25,null):(this.postProcessProgram.blit(1.25,this.tvRT),this.tvPassProgram.blit(t,e,null))}}(Gu,Vu)),Vu>=16&&(Wu=new class extends hh{constructor(t,e){super(t,e),this.camera=new _n(45,innerWidth/innerHeight,1,1e3),this.camera.position.set(-61.80334776372891,50.97274819170662,66.52528719737116).multiplyScalar(1),Nh(this.camera),this.controls=new bh(this.camera,this.renderer.domElement),this.controls.target.set(0,-4.071195289433606,0),this.controls.enableDamping=!0,this.controls.dampingFactor=.025,this.controls.rotateSpeed=.36,this.controls.autoRotate=!0,this.controls.autoRotateSpeed=.25,this.controls.minPolarAngle=0,this.controls.maxPolarAngle=.4*Math.PI,this.controls.minDistance=45,this.controls.maxDistance=120,Gc.missingItems=0,17==this.day&&(Gc.missingItems=3),18==this.day&&(Gc.missingItems=5),19==this.day&&(Gc.missingItems=5),20==this.day&&(Gc.missingItems=7),kc("black"),Wc(this.camera,!1,this.controls),this.updateCursor=uh(),this.colorRT=new pt(innerWidth,innerHeight,{type:v,samples:4}),this.dofRT=new pt(innerWidth,innerHeight,{}),this.bloomRT=new pt(Math.floor(.5*innerWidth),Math.floor(.5*innerHeight),{type:v,samples:4}),this.bloomScene=new ds,this.bloomGroup=new is,this.day>=20&&(this.postProcRT=new pt(innerWidth,innerHeight,{})),this.simplex=new class{constructor(t=Math.random){const e="function"==typeof t?t:function(t){let e=0,n=0,i=0,r=1;const s=function(){let t=4022871197;return function(e){e=e.toString();for(let n=0;n<e.length;n++){t+=e.charCodeAt(n);let i=.02519603282416938*t;t=i>>>0,i-=t,i*=t,t=i>>>0,i-=t,t+=4294967296*i}return 2.3283064365386963e-10*(t>>>0)}}();return e=s(" "),n=s(" "),i=s(" "),e-=s(t),e<0&&(e+=1),n-=s(t),n<0&&(n+=1),i-=s(t),i<0&&(i+=1),function(){const t=2091639*e+2.3283064365386963e-10*r;return e=n,n=i,i=t-(r=0|t)}}(t);this.p=function(t){const e=new Uint8Array(256);for(let t=0;t<256;t++)e[t]=t;for(let n=0;n<255;n++){const i=n+~~(t()*(256-n)),r=e[n];e[n]=e[i],e[i]=r}return e}(e),this.perm=new Uint8Array(512),this.permMod12=new Uint8Array(512);for(let t=0;t<512;t++)this.perm[t]=this.p[255&t],this.permMod12[t]=this.perm[t]%12}noise2D(t,e){const n=this.permMod12,i=this.perm;let r=0,s=0,a=0;const o=(t+e)*Kh,l=Math.floor(t+o),c=Math.floor(e+o),h=(l+c)*Qh,u=t-(l-h),d=e-(c-h);let p,m;u>d?(p=1,m=0):(p=0,m=1);const f=u-p+Qh,g=d-m+Qh,v=u-1+2*Qh,y=d-1+2*Qh,x=255&l,_=255&c;let w=.5-u*u-d*d;if(w>=0){const t=3*n[x+i[_]];w*=w,r=w*w*(nu[t]*u+nu[t+1]*d)}let b=.5-f*f-g*g;if(b>=0){const t=3*n[x+p+i[_+m]];b*=b,s=b*b*(nu[t]*f+nu[t+1]*g)}let M=.5-v*v-y*y;if(M>=0){const t=3*n[x+1+i[_+1]];M*=M,a=M*M*(nu[t]*v+nu[t+1]*y)}return 70*(r+s+a)}noise3D(t,e,n){const i=this.permMod12,r=this.perm;let s,a,o,l;const c=.3333333333333333*(t+e+n),h=Math.floor(t+c),u=Math.floor(e+c),d=Math.floor(n+c),p=(h+u+d)*$h,m=t-(h-p),f=e-(u-p),g=n-(d-p);let v,y,x,_,w,b;m>=f?f>=g?(v=1,y=0,x=0,_=1,w=1,b=0):m>=g?(v=1,y=0,x=0,_=1,w=0,b=1):(v=0,y=0,x=1,_=1,w=0,b=1):f<g?(v=0,y=0,x=1,_=0,w=1,b=1):m<g?(v=0,y=1,x=0,_=0,w=1,b=1):(v=0,y=1,x=0,_=1,w=1,b=0);const M=m-v+$h,S=f-y+$h,T=g-x+$h,E=m-_+2*$h,A=f-w+2*$h,P=g-b+2*$h,R=m-1+.5,C=f-1+.5,L=g-1+.5,D=255&h,I=255&u,z=255&d;let N=.6-m*m-f*f-g*g;if(N<0)s=0;else{const t=3*i[D+r[I+r[z]]];N*=N,s=N*N*(nu[t]*m+nu[t+1]*f+nu[t+2]*g)}let O=.6-M*M-S*S-T*T;if(O<0)a=0;else{const t=3*i[D+v+r[I+y+r[z+x]]];O*=O,a=O*O*(nu[t]*M+nu[t+1]*S+nu[t+2]*T)}let F=.6-E*E-A*A-P*P;if(F<0)o=0;else{const t=3*i[D+_+r[I+w+r[z+b]]];F*=F,o=F*F*(nu[t]*E+nu[t+1]*A+nu[t+2]*P)}let U=.6-R*R-C*C-L*L;if(U<0)l=0;else{const t=3*i[D+1+r[I+1+r[z+1]]];U*=U,l=U*U*(nu[t]*R+nu[t+1]*C+nu[t+2]*L)}return 32*(s+a+o+l)}noise4D(t,e,n,i){const r=this.perm;let s,a,o,l,c;const h=(t+e+n+i)*tu,u=Math.floor(t+h),d=Math.floor(e+h),p=Math.floor(n+h),m=Math.floor(i+h),f=(u+d+p+m)*eu,g=t-(u-f),v=e-(d-f),y=n-(p-f),x=i-(m-f);let _=0,w=0,b=0,M=0;g>v?_++:w++,g>y?_++:b++,g>x?_++:M++,v>y?w++:b++,v>x?w++:M++,y>x?b++:M++;const S=_>=3?1:0,T=w>=3?1:0,E=b>=3?1:0,A=M>=3?1:0,P=_>=2?1:0,R=w>=2?1:0,C=b>=2?1:0,L=M>=2?1:0,D=_>=1?1:0,I=w>=1?1:0,z=b>=1?1:0,N=M>=1?1:0,O=g-S+eu,F=v-T+eu,U=y-E+eu,B=x-A+eu,H=g-P+2*eu,G=v-R+2*eu,k=y-C+2*eu,V=x-L+2*eu,W=g-D+3*eu,j=v-I+3*eu,q=y-z+3*eu,X=x-N+3*eu,Y=g-1+4*eu,Z=v-1+4*eu,J=y-1+4*eu,K=x-1+4*eu,Q=255&u,$=255&d,tt=255&p,et=255&m;let nt=.6-g*g-v*v-y*y-x*x;if(nt<0)s=0;else{const t=r[Q+r[$+r[tt+r[et]]]]%32*4;nt*=nt,s=nt*nt*(iu[t]*g+iu[t+1]*v+iu[t+2]*y+iu[t+3]*x)}let it=.6-O*O-F*F-U*U-B*B;if(it<0)a=0;else{const t=r[Q+S+r[$+T+r[tt+E+r[et+A]]]]%32*4;it*=it,a=it*it*(iu[t]*O+iu[t+1]*F+iu[t+2]*U+iu[t+3]*B)}let rt=.6-H*H-G*G-k*k-V*V;if(rt<0)o=0;else{const t=r[Q+P+r[$+R+r[tt+C+r[et+L]]]]%32*4;rt*=rt,o=rt*rt*(iu[t]*H+iu[t+1]*G+iu[t+2]*k+iu[t+3]*V)}let st=.6-W*W-j*j-q*q-X*X;if(st<0)l=0;else{const t=r[Q+D+r[$+I+r[tt+z+r[et+N]]]]%32*4;st*=st,l=st*st*(iu[t]*W+iu[t+1]*j+iu[t+2]*q+iu[t+3]*X)}let at=.6-Y*Y-Z*Z-J*J-K*K;if(at<0)c=0;else{const t=r[Q+1+r[$+1+r[tt+1+r[et+1]]]]%32*4;at*=at,c=at*at*(iu[t]*Y+iu[t+1]*Z+iu[t+2]*J+iu[t+3]*K)}return 27*(s+a+o+l+c)}},this.bloomProgram=new qc(this.renderer,innerWidth,innerHeight,this.bloomRT),this.dofProgram=new qh(this.renderer,this.dofRT,this.colorRT.texture),this.postProcessProgram=new jc(this.renderer,this.dofRT,this.bloomProgram.rt),this.day>=20&&(this.postProcess2Program=new Eu(this.renderer,this.postProcRT,this.colorRT,this)),this.audioManager=new xh(this.camera),wu.seed(mh.getSeed()),window.addEventListener("resize",this.onResize.bind(this))}onResize(){this.camera.aspect=innerWidth/innerHeight,this.camera.updateProjectionMatrix(),this.bloomProgram.setSize(innerWidth,innerHeight),this.renderer.setSize(innerWidth,innerHeight),this.colorRT.setSize(innerWidth,innerHeight),this.dofRT.setSize(innerWidth,innerHeight),this.bloomRT.setSize(Math.floor(.5*innerWidth),Math.floor(.5*innerHeight)),this.dofProgram.setSize(innerWidth,innerHeight),this.day>=20&&this.postProcRT.setSize(innerWidth,innerHeight)}async init(){this.clock.start(),this.buildScene()}async buildScene(){this.floorGeo=new zn(2e3,2e3),this.floorBackground=new dn(this.floorGeo,eh()),this.floorBackground.position.set(0,-80,0),this.floorBackground.rotation.x=.5*-Math.PI,this.floorBackground.renderOrder=0,this.scene.add(this.floorBackground),this.floorGridGeo=new zn(400,400),this.floorGrid=new dn(this.floorGridGeo,nh()),this.floorGrid.position.set(0,-35,0),this.floorGrid.rotation.x=.5*-Math.PI,this.floorGrid.renderOrder=5,this.scene.add(this.floorGrid),this.floorGrid2=new dn(new oo(1,100,50,0,2*Math.PI,0,1),ih()),this.floorGrid2.rotation.x=Math.PI,this.floorGrid2.renderOrder=10,this.scene.add(this.floorGrid2),this.solarSystem=new Fh(this.day),this.solarSystem.mesh.renderOrder=15,this.bloomScene.add(this.solarSystem.bloomMesh),this.scene.add(this.solarSystem.mesh),this.day>=17&&(this.compass=new ru(this.camera,this.day,this),this.compass.mesh.renderOrder=25,this.compass.mesh2.renderOrder=2,this.compass.mesh3.renderOrder=20,this.scene.add(this.compass.mesh,this.compass.mesh2,this.compass.mesh3),this.bloomScene.add(this.compass.mesh4,this.compass.mesh5)),this.verticalCols=new lu,this.scene.add(this.verticalCols.mesh),this.day>=19&&(this.rockyBelt=new bu,this.scene.add(this.rockyBelt.points),this.scene.add(this.rockyBelt.lines)),this.arcs=new Su,this.bloomScene.add(this.arcs.mesh),this.spheres=new Yh(this.day,this),this.scene.add(this.spheres.mesh),this.day>=18&&(this.text=new ou,await this.text.init(),this.scene.add(this.text.mesh)),20==this.day&&(function(t){Ru=t.camera,Au=new dn(new zn(15,19.68),new yn({uniforms:{map:{value:(new ko).load(assetsPath+"channel_logo_full.png",(function(t){t.anisotropy=4,t.encoding=z,Gc.missingItems-=1}))},trace:{value:(new ko).load(assetsPath+"channel_logo_full_trace_3.png",(function(t){t.anisotropy=4,t.encoding=z,Gc.missingItems-=1}))},opacity:{value:0},time:{value:0}},vertexShader:"\n        varying vec3 vFragPos;\n        varying vec2 vUv;\n\n        void main() {\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          vUv = uv;\n          vFragPos = (modelMatrix * vec4(position, 1.0)).xyz; \n        }\n      ",fragmentShader:"\n        varying vec2 vUv;\n        varying vec3 vFragPos;\n\n        uniform sampler2D map;\n        uniform sampler2D trace;\n        uniform float opacity;\n        uniform float time;\n\n        float hash(vec2 p) {\n          p  = 50.0*fract( p*0.3183099 + vec2(0.71,0.113));\n          return -1.0+2.0*fract( p.x*p.y*(p.x+p.y) );\n        }\n\n        float noise( in vec2 p ) {\n          vec2 i = floor( p );\n          vec2 f = fract( p );\n        \n          vec2 u = f*f*(3.0-2.0*f);\n        \n          return mix( mix( hash( i + vec2(0.0,0.0) ), \n                           hash( i + vec2(1.0,0.0) ), u.x),\n                      mix( hash( i + vec2(0.0,1.0) ), \n                           hash( i + vec2(1.0,1.0) ), u.x), u.y);\n        }\n\n\n        void main() {\n          vec4 col = texture2D(map, vUv);\n          vec4 trace = texture2D(trace, vUv);\n\n          col.a *= 0.02 * opacity;\n          col.rgb *= vec3(1.0, 0.5, 0.5);\n\n\n          // float animT = mod(time * 6.0, 7.0) - 1.0;\n          // float target = animT * 12.0;\n          // float dist = length(vFragPos.xz);\n\n          // if(abs(target - dist) < 5.0) {\n          //   trace.a *= 0.3 * opacity;\n          //   trace.rgb *= vec3(1.0, 0.8, 0.1);\n          // } else {\n          //   trace.a *= 0.0;\n          // }\n\n          float animT = mod(time, 7.0);\n          // if(animT < 3.0) {\n          if(animT < 7.0) {\n            float dist = length(vFragPos.xz);\n            float alpha = 1.0; // smoothstep(0.0, 0.4, animT) * (1.0 - smoothstep(2.6, 3.0, animT));\n            float noisev = noise(vFragPos.xz * 0.15 + vec2(0.0, time));\n            noisev = pow(clamp(noisev * 1.75, 0.0, 1.0), 2.5) * 1.0;\n            alpha *= (noisev);\n            trace.a *= 0.3 * alpha * opacity * (1.0 - smoothstep(14.0, 28.0, dist));\n            trace.rgb *= vec3(1.0, 0.8, 0.5);\n            // trace.a *= 0.475 * alpha * opacity * (1.0 - smoothstep(14.0, 28.0, dist));\n            // trace.rgb *= vec3(1.0, 0.6, 0.35);\n          } else {\n            trace.a *= 0.0;\n          }\n\n\n          vec4 finalColor = col + trace;\n          if(finalColor.a > 1.0) finalColor.a = 1.0;\n\n          gl_FragColor = finalColor;\n        }\n      ",depthTest:!1,depthWrite:!1,side:2,transparent:!0,opacity:0,blend:5,blendEquation:e,blendDst:n,blendDstAlpha:n,blendSrcAlpha:n,blendSrc:n})),Au.renderOrder=25;let i=!1;window.addEventListener("mousedown",(e=>{if(!(Ru.position.length()<60)&&Lu&&!i){Cu=!Cu;let e={t:Cu?0:1};Uc({targets:e,t:Cu?[0,1]:[1,0],duration:3e3,easing:"easeInOutCubic",begin:()=>{t.scene.add(Au),i=!0},complete:()=>{i=!1},update:()=>{let n=t.solarSystem,i=t.postProcess2Program,r=t.rockyBelt,s=t.arcs;t.spheres,Au.material.uniforms.opacity.value=e.t,n.speedMult=1+25*e.t,n.sunYoffset=1+5*e.t,i.fxStrength=e.t,r.speed=1+2*e.t,s.strength=1.3*e.t,s.finaleIncrementor=e.t}})}}))}(this),function(t){let e=t.camera;window.addEventListener("mousemove",(t=>{if(!e)return;let n=new Z(t.clientX/window.innerWidth*2-1,-t.clientY/window.innerHeight*2+1);Ou.setFromCamera(n,e),Bu=!1,Ou.intersectObjects(Fu.children)[0]&&(Bu=!0)}));let n=0;window.addEventListener("mousedown",(t=>{Bu&&e.position.length()<60&&(n++,37==n&&(ju(),setTimeout((()=>{!function(){let t=document.createElement("p");t.classList.add("d20-riddle");let e="A human being is a part of the whole called by us universe, a part limited in time and space. He experiences#himself, his thoughts and feeling as something separated from the rest, a kind of optical delusion of his#consciousness. This delusion is a kind of prison for us, restricting us to our personal desires and to affection#for a few persons nearest to us. Our task must be to free ourselves from this prison by widening our circle of#compassion to embrace all living creatures and the whole of nature in its beauty.#― Albert Einstein",n="";for(let t=0;t<e.length;t++)n+='<span class="riddle">'+e[t]+"</span>";n=n.replaceAll('<span class="riddle">#</span>',"<br>"),t.innerHTML=n,setInterval((()=>{let e;document.body.appendChild(t);let n=[...t.children];for(n.forEach((t=>t.classList.remove("active")));e=Math.floor(Math.random()*n.length),e===n.length&&(e-=1)," "==n[e].textContent;);n[e].classList.add("active");let i=n[e].getBoundingClientRect(),r=document.createElement("span");r.classList.add("riddle"),r.textContent=n[e].textContent,r.style.position="absolute",r.style.top=i.top+"px",r.style.left=i.left+"px",document.body.appendChild(r),setTimeout((()=>r.style.opacity="1"),100),setTimeout((()=>r.style.opacity="0"),1e3),setTimeout((()=>r.remove()),1500),t.remove()}),1500)}()}),100)))}))}(this))}updateFloorBackground(t,e){let n=.05*e;for(let t=0;t<3;t++){let e=-40,i=40,r=70,s=r+65;1==t?(e=100,i=-170,r=65,s=r+85):2==t&&(e=-80,i=-250,s=r+65),this.floorBackground.material.uniforms.uData.value[t].x=100*this.simplex.noise2D(n+12.356*t,.895)+e,this.floorBackground.material.uniforms.uData.value[t].y=100*this.simplex.noise2D(n+97.8863*t,3.340945)+i,this.floorBackground.material.uniforms.uData.value[t].z=this.simplex.noise2D(n+77.9872*t,7.93487)*r+s}this.floorGrid.material.uniforms.uTime.value=e,this.floorGrid2.material.uniforms.uTime.value=e,this.floorGrid2.material.uniforms.uOffs.value=new dt(this.simplex.noise2D(.07*e+985.34537,.895),this.simplex.noise2D(.07*e+3987.757,3.340945),this.simplex.noise2D(.07*e+3987.757,3.340945),0);let i=1200;this.floorGrid2.scale.set(i,i,i),this.floorGrid2.position.set(0,i-15,0),this.floorGrid2.material.uniforms.uWaveStrength.value=0;let r=(.25*e+5)%10;r<5&&(r<1?(this.floorGrid2.material.uniforms.uWaveStrength.value=ph(r),i=1200-900*ph(r)):r<4?(this.floorGrid2.material.uniforms.uWaveStrength.value=1,i=300):(this.floorGrid2.material.uniforms.uWaveStrength.value=1-ph(r-4),i=300+900*ph(r-4)),this.floorGrid2.scale.set(i,i,i),this.floorGrid2.position.set(0,i-15,0))}update(){let t=this.clock.getDelta(),e=this.clock.getElapsedTime();this.updateCursor(t),20==this.day&&function(t,e){if(!Au)return;let n=Math.atan2(t.camera.position.z,t.camera.position.x);n+=Math.PI,n=0,Pu=.035,Au.position.set(0,-6,0),Au.scale.set(3,3,3),Au.rotation.set(0,0,0),Au.updateMatrixWorld(),Au.rotateOnAxis(new vt(0,1,0),-0-.5*Math.PI),Au.rotateOnAxis(new vt(1,0,0),.5*-Math.PI),Au.material.uniforms.time.value=e}(this,e),this.controls.update(),this.updateFloorBackground(t,e),this.day>=17&&this.compass.update(t,e),this.day>=18&&this.text&&this.text.update(this.compass.angle2,t,e),this.arcs.update(t,e),this.verticalCols.update(t,e),this.spheres.update(t,e),this.day>=19&&this.rockyBelt.update(t,e,this.compass.angle,this.camera),this.solarSystem&&this.solarSystem.update(t,e),this.renderer.setRenderTarget(this.bloomRT),this.renderer.render(this.bloomScene,this.camera),this.renderer.setRenderTarget(this.colorRT),this.renderer.render(this.scene,this.camera),this.bloomProgram.compute(4.5),this.dofProgram.compute(),this.day>=20&&this.postProcess2Program.fxStrength>0?(this.postProcessProgram.blit(5.5,this.postProcRT),this.postProcess2Program.blit(e,null)):this.postProcessProgram.blit(5.5,null)}}(Gu,Vu)),async function(){Wu.init(),Gu.setAnimationLoop((()=>{Wu.update()}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,