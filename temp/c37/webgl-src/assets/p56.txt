let s = 1000;

function setup() {
  createCanvas(s, s);
}

function resetM() {
  resetMatrix();
  translate(s * 0.5, s * 0.5);
  scale(1.35);
}

function draw() {
  background(0);
  
  resetM();
  
  noFill();
  stroke('rgba(255,255,255, 0.185)');
  strokeWeight(20);
  circle(0, 0, 400);
  
  stroke('rgba(255,255,255, 0.3)');
  strokeWeight(12);
  circle(0, 0, 490);
  
  stroke('rgba(255,255,255, 0.4)');
  strokeWeight(2);
  circle(0, 0, 440);
  
  stroke('rgba(255,255,255, 0.35)');
  strokeWeight(2);
  circle(0, 0, 170);
  
  
  stroke('rgba(255,255,255, 0.45)');
  strokeWeight(1);
  circle(0, 0, 230);
  circle(0, 0, 240);
  circle(0, 0, 350);
  stroke('rgba(255,255,255, 0.25)');
  circle(0, 0, 330);
  
  
  stroke('rgba(255,255,255, 0.25)');
  strokeWeight(2);
  circle(0, 0, 285);
  for(let i = 0; i < 48; i++) {
    noStroke();
    let sangle = i / 48 * Math.PI * 2;
    
    resetM();
    fill('rgba(255,255,255, 0.5)');
    rotate(sangle);
    translate(140, 0);
    rect(-5, -1, 3, 2);
  }
  
  for(let i = 0; i < 25; i++) {
    noStroke();
  
    resetM();
    let sangle = i / 25 * Math.PI * 2;
    rotate(sangle);
    
    if(i % 2 == 0) {
      if(i > 3) {
        fill('rgba(255,255,255, 1.0)');
        translate(210, 0);
        rect(-10, -1.5, 10, 2);
      } else {
        fill('rgba(255,255,255, 0.7)');
        translate(192.5, 0);
        rect(-10, -1.5, 14, 2);
      } 
    }
    
    for(let j = 1; j < 3; j++) {
      resetM();
      let share = 1 / 25 * Math.PI * 2;
      let shareStep = share / 3;
      
      fill('rgba(255,255,255, 0.5)');

      rotate(sangle + shareStep * j);
      translate(208, 0);
      
      rect(-5, -1, 6, 2);
    }
    
    resetM();
    
    if(i % 2 == 0) {
      fill('rgba(255,255,255, 0.5)');
      rotate(sangle);
      translate(80, 0);
      rect(-5, -1, 4, 2);
    }
  }
  
  /*for(let i = 0; i < 12; i++) {
    noStroke();
  
    resetM();
    let sangle = i / 12 * Math.PI * 2;
    rotate(sangle);
    
    if(i > 3) {
      fill('rgba(255,255,255, 1.0)');
      translate(210, 0);
      rect(-10, -1.5, 10, 2);
    } else {
      fill('rgba(255,255,255, 0.7)');
      translate(192.5, 0);
      rect(-10, -1.5, 14, 2);
    }
    
    for(let j = 1; j < 5; j++) {
      resetM();
      let share = 1 / 12 * Math.PI * 2;
      let shareStep = share / 5;
      
      fill('rgba(255,255,255, 0.5)');

      rotate(sangle + shareStep * j);
      translate(208, 0);
      
      rect(-5, -1, 6, 2);
    }
    
    resetM();
    fill('rgba(255,255,255, 0.5)');
    rotate(sangle);
    translate(80, 0);
    rect(-5, -1, 4, 2);
  }*/
  
  resetM();
  noFill();
  stroke('rgba(255,255,255, 0.45)');
  strokeWeight(1.85);
  arc(0, 0, 190, 190, PI * 0.5, PI * 1.7, OPEN);
  
  
  
  resetM();
  noStroke();
  
  fill('rgba(255,255,255, 0.75)');
  rotate(PI * 0.25);
  translate(85, 0);
  rect(0, 0, 135, 1);
  
  resetM();
  rotate(PI * 0.75);
  translate(95, 0);
  rect(0, 0, 200, 1);
  

  // hexagons
  resetM();
  for(let i = -15; i < 15; i++) {
    for(let j = -15; j < 15; j++) {
      let x = i * 23;
      let y = j * 26 + (i%2) * 13;
      
      let dist = sqrt(x * x + y * y);
      if(dist > 320) continue;
      else if(dist > 90 && dist < 280) continue;
      
      hexagon(x, y, 0.1);
    }    
  }
  
  resetM();
}

function hexagon(transX, transY, s) {
  resetM();
  stroke('rgba(255, 255, 255, 0.5)');
  strokeWeight(5);
  noFill();
  // fill('rgba(255, 255, 100, .25)');
  push();
  translate(transX, transY);
  scale(s);
  beginShape();
	vertex(-75, -130);
	vertex(75, -130);
	vertex(150, 0);
	vertex(75, 130);
  vertex(-75, 130);
	vertex(-150, 0);
	endShape(CLOSE); 
	pop();
}